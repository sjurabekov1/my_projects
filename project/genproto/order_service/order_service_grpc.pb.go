// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: order_service.proto

package order_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	NewOrder(ctx context.Context, in *NewOrderRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	OrderUpdateStatus(ctx context.Context, in *OrderUpdateStatusRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetOrdersByInvestor(ctx context.Context, in *GetOrdersByInvestorRequest, opts ...grpc.CallOption) (*GetOrdersByInvestorResponse, error)
	GetInvestorPortfolio(ctx context.Context, in *GetInvestorPortfolioRequest, opts ...grpc.CallOption) (*GetInvestorPortfolioResponse, error)
	GetInvestorStockCount(ctx context.Context, in *GetInvestorStockCountRequest, opts ...grpc.CallOption) (*GetInvestorStockCountResponse, error)
	GetPendingOrders(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetPendingOrdersResponse, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) NewOrder(ctx context.Context, in *NewOrderRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/order_service.OrderService/NewOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) OrderUpdateStatus(ctx context.Context, in *OrderUpdateStatusRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/order_service.OrderService/OrderUpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrdersByInvestor(ctx context.Context, in *GetOrdersByInvestorRequest, opts ...grpc.CallOption) (*GetOrdersByInvestorResponse, error) {
	out := new(GetOrdersByInvestorResponse)
	err := c.cc.Invoke(ctx, "/order_service.OrderService/GetOrdersByInvestor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetInvestorPortfolio(ctx context.Context, in *GetInvestorPortfolioRequest, opts ...grpc.CallOption) (*GetInvestorPortfolioResponse, error) {
	out := new(GetInvestorPortfolioResponse)
	err := c.cc.Invoke(ctx, "/order_service.OrderService/GetInvestorPortfolio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetInvestorStockCount(ctx context.Context, in *GetInvestorStockCountRequest, opts ...grpc.CallOption) (*GetInvestorStockCountResponse, error) {
	out := new(GetInvestorStockCountResponse)
	err := c.cc.Invoke(ctx, "/order_service.OrderService/GetInvestorStockCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetPendingOrders(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetPendingOrdersResponse, error) {
	out := new(GetPendingOrdersResponse)
	err := c.cc.Invoke(ctx, "/order_service.OrderService/GetPendingOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	NewOrder(context.Context, *NewOrderRequest) (*empty.Empty, error)
	OrderUpdateStatus(context.Context, *OrderUpdateStatusRequest) (*empty.Empty, error)
	GetOrdersByInvestor(context.Context, *GetOrdersByInvestorRequest) (*GetOrdersByInvestorResponse, error)
	GetInvestorPortfolio(context.Context, *GetInvestorPortfolioRequest) (*GetInvestorPortfolioResponse, error)
	GetInvestorStockCount(context.Context, *GetInvestorStockCountRequest) (*GetInvestorStockCountResponse, error)
	GetPendingOrders(context.Context, *empty.Empty) (*GetPendingOrdersResponse, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) NewOrder(context.Context, *NewOrderRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOrder not implemented")
}
func (UnimplementedOrderServiceServer) OrderUpdateStatus(context.Context, *OrderUpdateStatusRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderUpdateStatus not implemented")
}
func (UnimplementedOrderServiceServer) GetOrdersByInvestor(context.Context, *GetOrdersByInvestorRequest) (*GetOrdersByInvestorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersByInvestor not implemented")
}
func (UnimplementedOrderServiceServer) GetInvestorPortfolio(context.Context, *GetInvestorPortfolioRequest) (*GetInvestorPortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvestorPortfolio not implemented")
}
func (UnimplementedOrderServiceServer) GetInvestorStockCount(context.Context, *GetInvestorStockCountRequest) (*GetInvestorStockCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvestorStockCount not implemented")
}
func (UnimplementedOrderServiceServer) GetPendingOrders(context.Context, *empty.Empty) (*GetPendingOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingOrders not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_NewOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).NewOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.OrderService/NewOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).NewOrder(ctx, req.(*NewOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_OrderUpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderUpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderUpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.OrderService/OrderUpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderUpdateStatus(ctx, req.(*OrderUpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrdersByInvestor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersByInvestorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrdersByInvestor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.OrderService/GetOrdersByInvestor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrdersByInvestor(ctx, req.(*GetOrdersByInvestorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetInvestorPortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvestorPortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetInvestorPortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.OrderService/GetInvestorPortfolio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetInvestorPortfolio(ctx, req.(*GetInvestorPortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetInvestorStockCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvestorStockCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetInvestorStockCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.OrderService/GetInvestorStockCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetInvestorStockCount(ctx, req.(*GetInvestorStockCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetPendingOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetPendingOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.OrderService/GetPendingOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetPendingOrders(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order_service.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewOrder",
			Handler:    _OrderService_NewOrder_Handler,
		},
		{
			MethodName: "OrderUpdateStatus",
			Handler:    _OrderService_OrderUpdateStatus_Handler,
		},
		{
			MethodName: "GetOrdersByInvestor",
			Handler:    _OrderService_GetOrdersByInvestor_Handler,
		},
		{
			MethodName: "GetInvestorPortfolio",
			Handler:    _OrderService_GetInvestorPortfolio_Handler,
		},
		{
			MethodName: "GetInvestorStockCount",
			Handler:    _OrderService_GetInvestorStockCount_Handler,
		},
		{
			MethodName: "GetPendingOrders",
			Handler:    _OrderService_GetPendingOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_service.proto",
}
