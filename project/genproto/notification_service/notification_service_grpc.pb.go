// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: notification_service.proto

package notification_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceClient interface {
	SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateNotification(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*Notification, error)
	GetNotificationByID(ctx context.Context, in *GetByID, opts ...grpc.CallOption) (*Notification, error)
	GetNotificationsByInvestorID(ctx context.Context, in *GetByID, opts ...grpc.CallOption) (*GetNotificationsByInvestorIDResponse, error)
	CreateNotificationLog(ctx context.Context, in *NotificationLog, opts ...grpc.CallOption) (*Notification, error)
	UpdateNotificationStatus(ctx context.Context, in *NotificationStatusServiceRequest, opts ...grpc.CallOption) (*NotificationStatusServiceResponse, error)
	CreateNotification(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*Notification, error)
	CreateSumsubStatus(ctx context.Context, in *CreateSumsubStatusRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdateSumsubStatus(ctx context.Context, in *CreateSumsubStatusRequest, opts ...grpc.CallOption) (*SumsubStatusResponse, error)
	GetSumsubStatus(ctx context.Context, in *GetSumsubStatusRequest, opts ...grpc.CallOption) (*GetSumsubStatusResponse, error)
	GetNotificationImg(ctx context.Context, in *GetNotificationImgRequest, opts ...grpc.CallOption) (*GetNotificationImgResponse, error)
	GetNotificationStatus(ctx context.Context, in *GetNotificationStatusRequest, opts ...grpc.CallOption) (*GetNotificationStatusResponse, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/order_service.NotificationService/SendNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) UpdateNotification(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*Notification, error) {
	out := new(Notification)
	err := c.cc.Invoke(ctx, "/order_service.NotificationService/UpdateNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetNotificationByID(ctx context.Context, in *GetByID, opts ...grpc.CallOption) (*Notification, error) {
	out := new(Notification)
	err := c.cc.Invoke(ctx, "/order_service.NotificationService/GetNotificationByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetNotificationsByInvestorID(ctx context.Context, in *GetByID, opts ...grpc.CallOption) (*GetNotificationsByInvestorIDResponse, error) {
	out := new(GetNotificationsByInvestorIDResponse)
	err := c.cc.Invoke(ctx, "/order_service.NotificationService/GetNotificationsByInvestorID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) CreateNotificationLog(ctx context.Context, in *NotificationLog, opts ...grpc.CallOption) (*Notification, error) {
	out := new(Notification)
	err := c.cc.Invoke(ctx, "/order_service.NotificationService/CreateNotificationLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) UpdateNotificationStatus(ctx context.Context, in *NotificationStatusServiceRequest, opts ...grpc.CallOption) (*NotificationStatusServiceResponse, error) {
	out := new(NotificationStatusServiceResponse)
	err := c.cc.Invoke(ctx, "/order_service.NotificationService/UpdateNotificationStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) CreateNotification(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*Notification, error) {
	out := new(Notification)
	err := c.cc.Invoke(ctx, "/order_service.NotificationService/CreateNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) CreateSumsubStatus(ctx context.Context, in *CreateSumsubStatusRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/order_service.NotificationService/CreateSumsubStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) UpdateSumsubStatus(ctx context.Context, in *CreateSumsubStatusRequest, opts ...grpc.CallOption) (*SumsubStatusResponse, error) {
	out := new(SumsubStatusResponse)
	err := c.cc.Invoke(ctx, "/order_service.NotificationService/UpdateSumsubStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetSumsubStatus(ctx context.Context, in *GetSumsubStatusRequest, opts ...grpc.CallOption) (*GetSumsubStatusResponse, error) {
	out := new(GetSumsubStatusResponse)
	err := c.cc.Invoke(ctx, "/order_service.NotificationService/GetSumsubStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetNotificationImg(ctx context.Context, in *GetNotificationImgRequest, opts ...grpc.CallOption) (*GetNotificationImgResponse, error) {
	out := new(GetNotificationImgResponse)
	err := c.cc.Invoke(ctx, "/order_service.NotificationService/GetNotificationImg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetNotificationStatus(ctx context.Context, in *GetNotificationStatusRequest, opts ...grpc.CallOption) (*GetNotificationStatusResponse, error) {
	out := new(GetNotificationStatusResponse)
	err := c.cc.Invoke(ctx, "/order_service.NotificationService/GetNotificationStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations must embed UnimplementedNotificationServiceServer
// for forward compatibility
type NotificationServiceServer interface {
	SendNotification(context.Context, *SendNotificationRequest) (*empty.Empty, error)
	UpdateNotification(context.Context, *Notification) (*Notification, error)
	GetNotificationByID(context.Context, *GetByID) (*Notification, error)
	GetNotificationsByInvestorID(context.Context, *GetByID) (*GetNotificationsByInvestorIDResponse, error)
	CreateNotificationLog(context.Context, *NotificationLog) (*Notification, error)
	UpdateNotificationStatus(context.Context, *NotificationStatusServiceRequest) (*NotificationStatusServiceResponse, error)
	CreateNotification(context.Context, *Notification) (*Notification, error)
	CreateSumsubStatus(context.Context, *CreateSumsubStatusRequest) (*Empty, error)
	UpdateSumsubStatus(context.Context, *CreateSumsubStatusRequest) (*SumsubStatusResponse, error)
	GetSumsubStatus(context.Context, *GetSumsubStatusRequest) (*GetSumsubStatusResponse, error)
	GetNotificationImg(context.Context, *GetNotificationImgRequest) (*GetNotificationImgResponse, error)
	GetNotificationStatus(context.Context, *GetNotificationStatusRequest) (*GetNotificationStatusResponse, error)
	mustEmbedUnimplementedNotificationServiceServer()
}

// UnimplementedNotificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationServiceServer struct {
}

func (UnimplementedNotificationServiceServer) SendNotification(context.Context, *SendNotificationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotification not implemented")
}
func (UnimplementedNotificationServiceServer) UpdateNotification(context.Context, *Notification) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotification not implemented")
}
func (UnimplementedNotificationServiceServer) GetNotificationByID(context.Context, *GetByID) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationByID not implemented")
}
func (UnimplementedNotificationServiceServer) GetNotificationsByInvestorID(context.Context, *GetByID) (*GetNotificationsByInvestorIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationsByInvestorID not implemented")
}
func (UnimplementedNotificationServiceServer) CreateNotificationLog(context.Context, *NotificationLog) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotificationLog not implemented")
}
func (UnimplementedNotificationServiceServer) UpdateNotificationStatus(context.Context, *NotificationStatusServiceRequest) (*NotificationStatusServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationStatus not implemented")
}
func (UnimplementedNotificationServiceServer) CreateNotification(context.Context, *Notification) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotification not implemented")
}
func (UnimplementedNotificationServiceServer) CreateSumsubStatus(context.Context, *CreateSumsubStatusRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSumsubStatus not implemented")
}
func (UnimplementedNotificationServiceServer) UpdateSumsubStatus(context.Context, *CreateSumsubStatusRequest) (*SumsubStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSumsubStatus not implemented")
}
func (UnimplementedNotificationServiceServer) GetSumsubStatus(context.Context, *GetSumsubStatusRequest) (*GetSumsubStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSumsubStatus not implemented")
}
func (UnimplementedNotificationServiceServer) GetNotificationImg(context.Context, *GetNotificationImgRequest) (*GetNotificationImgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationImg not implemented")
}
func (UnimplementedNotificationServiceServer) GetNotificationStatus(context.Context, *GetNotificationStatusRequest) (*GetNotificationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationStatus not implemented")
}
func (UnimplementedNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_SendNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.NotificationService/SendNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendNotification(ctx, req.(*SendNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_UpdateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).UpdateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.NotificationService/UpdateNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).UpdateNotification(ctx, req.(*Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetNotificationByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetNotificationByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.NotificationService/GetNotificationByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetNotificationByID(ctx, req.(*GetByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetNotificationsByInvestorID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetNotificationsByInvestorID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.NotificationService/GetNotificationsByInvestorID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetNotificationsByInvestorID(ctx, req.(*GetByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_CreateNotificationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).CreateNotificationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.NotificationService/CreateNotificationLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).CreateNotificationLog(ctx, req.(*NotificationLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_UpdateNotificationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationStatusServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).UpdateNotificationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.NotificationService/UpdateNotificationStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).UpdateNotificationStatus(ctx, req.(*NotificationStatusServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_CreateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).CreateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.NotificationService/CreateNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).CreateNotification(ctx, req.(*Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_CreateSumsubStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSumsubStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).CreateSumsubStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.NotificationService/CreateSumsubStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).CreateSumsubStatus(ctx, req.(*CreateSumsubStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_UpdateSumsubStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSumsubStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).UpdateSumsubStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.NotificationService/UpdateSumsubStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).UpdateSumsubStatus(ctx, req.(*CreateSumsubStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetSumsubStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSumsubStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetSumsubStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.NotificationService/GetSumsubStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetSumsubStatus(ctx, req.(*GetSumsubStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetNotificationImg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationImgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetNotificationImg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.NotificationService/GetNotificationImg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetNotificationImg(ctx, req.(*GetNotificationImgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetNotificationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetNotificationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.NotificationService/GetNotificationStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetNotificationStatus(ctx, req.(*GetNotificationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order_service.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendNotification",
			Handler:    _NotificationService_SendNotification_Handler,
		},
		{
			MethodName: "UpdateNotification",
			Handler:    _NotificationService_UpdateNotification_Handler,
		},
		{
			MethodName: "GetNotificationByID",
			Handler:    _NotificationService_GetNotificationByID_Handler,
		},
		{
			MethodName: "GetNotificationsByInvestorID",
			Handler:    _NotificationService_GetNotificationsByInvestorID_Handler,
		},
		{
			MethodName: "CreateNotificationLog",
			Handler:    _NotificationService_CreateNotificationLog_Handler,
		},
		{
			MethodName: "UpdateNotificationStatus",
			Handler:    _NotificationService_UpdateNotificationStatus_Handler,
		},
		{
			MethodName: "CreateNotification",
			Handler:    _NotificationService_CreateNotification_Handler,
		},
		{
			MethodName: "CreateSumsubStatus",
			Handler:    _NotificationService_CreateSumsubStatus_Handler,
		},
		{
			MethodName: "UpdateSumsubStatus",
			Handler:    _NotificationService_UpdateSumsubStatus_Handler,
		},
		{
			MethodName: "GetSumsubStatus",
			Handler:    _NotificationService_GetSumsubStatus_Handler,
		},
		{
			MethodName: "GetNotificationImg",
			Handler:    _NotificationService_GetNotificationImg_Handler,
		},
		{
			MethodName: "GetNotificationStatus",
			Handler:    _NotificationService_GetNotificationStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification_service.proto",
}
