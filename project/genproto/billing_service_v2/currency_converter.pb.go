// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: currency_converter.proto

package billing_service_v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateCurrencyConvertorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PrimaryCurrency   int32   `protobuf:"varint,2,opt,name=primary_currency,json=primaryCurrency,proto3" json:"primary_currency,omitempty"`
	SecondaryCurrency int32   `protobuf:"varint,3,opt,name=secondary_currency,json=secondaryCurrency,proto3" json:"secondary_currency,omitempty"`
	Amount            float32 `protobuf:"fixed32,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *CreateCurrencyConvertorRequest) Reset() {
	*x = CreateCurrencyConvertorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_converter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCurrencyConvertorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCurrencyConvertorRequest) ProtoMessage() {}

func (x *CreateCurrencyConvertorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_currency_converter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCurrencyConvertorRequest.ProtoReflect.Descriptor instead.
func (*CreateCurrencyConvertorRequest) Descriptor() ([]byte, []int) {
	return file_currency_converter_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCurrencyConvertorRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateCurrencyConvertorRequest) GetPrimaryCurrency() int32 {
	if x != nil {
		return x.PrimaryCurrency
	}
	return 0
}

func (x *CreateCurrencyConvertorRequest) GetSecondaryCurrency() int32 {
	if x != nil {
		return x.SecondaryCurrency
	}
	return 0
}

func (x *CreateCurrencyConvertorRequest) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type CreateCurrencyConvertorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateCurrencyConvertorResponse) Reset() {
	*x = CreateCurrencyConvertorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_converter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCurrencyConvertorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCurrencyConvertorResponse) ProtoMessage() {}

func (x *CreateCurrencyConvertorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_currency_converter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCurrencyConvertorResponse.ProtoReflect.Descriptor instead.
func (*CreateCurrencyConvertorResponse) Descriptor() ([]byte, []int) {
	return file_currency_converter_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCurrencyConvertorResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateCurrencyConvertorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PrimaryCurrency   int32   `protobuf:"varint,2,opt,name=primary_currency,json=primaryCurrency,proto3" json:"primary_currency,omitempty"`
	SecondaryCurrency int32   `protobuf:"varint,3,opt,name=secondary_currency,json=secondaryCurrency,proto3" json:"secondary_currency,omitempty"`
	Amount            float32 `protobuf:"fixed32,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *UpdateCurrencyConvertorRequest) Reset() {
	*x = UpdateCurrencyConvertorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_converter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCurrencyConvertorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCurrencyConvertorRequest) ProtoMessage() {}

func (x *UpdateCurrencyConvertorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_currency_converter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCurrencyConvertorRequest.ProtoReflect.Descriptor instead.
func (*UpdateCurrencyConvertorRequest) Descriptor() ([]byte, []int) {
	return file_currency_converter_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateCurrencyConvertorRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCurrencyConvertorRequest) GetPrimaryCurrency() int32 {
	if x != nil {
		return x.PrimaryCurrency
	}
	return 0
}

func (x *UpdateCurrencyConvertorRequest) GetSecondaryCurrency() int32 {
	if x != nil {
		return x.SecondaryCurrency
	}
	return 0
}

func (x *UpdateCurrencyConvertorRequest) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type UpdateCurrencyConvertorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UpdateCurrencyConvertorResponse) Reset() {
	*x = UpdateCurrencyConvertorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_converter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCurrencyConvertorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCurrencyConvertorResponse) ProtoMessage() {}

func (x *UpdateCurrencyConvertorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_currency_converter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCurrencyConvertorResponse.ProtoReflect.Descriptor instead.
func (*UpdateCurrencyConvertorResponse) Descriptor() ([]byte, []int) {
	return file_currency_converter_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateCurrencyConvertorResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteCurrencyConvertorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCurrencyConvertorRequest) Reset() {
	*x = DeleteCurrencyConvertorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_converter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCurrencyConvertorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCurrencyConvertorRequest) ProtoMessage() {}

func (x *DeleteCurrencyConvertorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_currency_converter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCurrencyConvertorRequest.ProtoReflect.Descriptor instead.
func (*DeleteCurrencyConvertorRequest) Descriptor() ([]byte, []int) {
	return file_currency_converter_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteCurrencyConvertorRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteCurrencyConvertorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCurrencyConvertorResponse) Reset() {
	*x = DeleteCurrencyConvertorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_converter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCurrencyConvertorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCurrencyConvertorResponse) ProtoMessage() {}

func (x *DeleteCurrencyConvertorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_currency_converter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCurrencyConvertorResponse.ProtoReflect.Descriptor instead.
func (*DeleteCurrencyConvertorResponse) Descriptor() ([]byte, []int) {
	return file_currency_converter_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteCurrencyConvertorResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetCurrencyConvertorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PrimaryCurrency   int32   `protobuf:"varint,2,opt,name=primary_currency,json=primaryCurrency,proto3" json:"primary_currency,omitempty"`
	SecondaryCurrency int32   `protobuf:"varint,3,opt,name=secondary_currency,json=secondaryCurrency,proto3" json:"secondary_currency,omitempty"`
	Amount            float32 `protobuf:"fixed32,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *GetCurrencyConvertorResponse) Reset() {
	*x = GetCurrencyConvertorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_converter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyConvertorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyConvertorResponse) ProtoMessage() {}

func (x *GetCurrencyConvertorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_currency_converter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyConvertorResponse.ProtoReflect.Descriptor instead.
func (*GetCurrencyConvertorResponse) Descriptor() ([]byte, []int) {
	return file_currency_converter_proto_rawDescGZIP(), []int{6}
}

func (x *GetCurrencyConvertorResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetCurrencyConvertorResponse) GetPrimaryCurrency() int32 {
	if x != nil {
		return x.PrimaryCurrency
	}
	return 0
}

func (x *GetCurrencyConvertorResponse) GetSecondaryCurrency() int32 {
	if x != nil {
		return x.SecondaryCurrency
	}
	return 0
}

func (x *GetCurrencyConvertorResponse) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type GetCurrencyConvertorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryCurrency   int32 `protobuf:"varint,1,opt,name=primary_currency,json=primaryCurrency,proto3" json:"primary_currency,omitempty"`
	SecondaryCurrency int32 `protobuf:"varint,2,opt,name=secondary_currency,json=secondaryCurrency,proto3" json:"secondary_currency,omitempty"`
}

func (x *GetCurrencyConvertorRequest) Reset() {
	*x = GetCurrencyConvertorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_converter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyConvertorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyConvertorRequest) ProtoMessage() {}

func (x *GetCurrencyConvertorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_currency_converter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyConvertorRequest.ProtoReflect.Descriptor instead.
func (*GetCurrencyConvertorRequest) Descriptor() ([]byte, []int) {
	return file_currency_converter_proto_rawDescGZIP(), []int{7}
}

func (x *GetCurrencyConvertorRequest) GetPrimaryCurrency() int32 {
	if x != nil {
		return x.PrimaryCurrency
	}
	return 0
}

func (x *GetCurrencyConvertorRequest) GetSecondaryCurrency() int32 {
	if x != nil {
		return x.SecondaryCurrency
	}
	return 0
}

type GetNameBySalesforceIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PocketId    string `protobuf:"bytes,1,opt,name=pocket_id,json=pocketId,proto3" json:"pocket_id,omitempty"`
	CurrencyId  string `protobuf:"bytes,2,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`
	OperationId string `protobuf:"bytes,3,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
}

func (x *GetNameBySalesforceIDRequest) Reset() {
	*x = GetNameBySalesforceIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_converter_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNameBySalesforceIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNameBySalesforceIDRequest) ProtoMessage() {}

func (x *GetNameBySalesforceIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_currency_converter_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNameBySalesforceIDRequest.ProtoReflect.Descriptor instead.
func (*GetNameBySalesforceIDRequest) Descriptor() ([]byte, []int) {
	return file_currency_converter_proto_rawDescGZIP(), []int{8}
}

func (x *GetNameBySalesforceIDRequest) GetPocketId() string {
	if x != nil {
		return x.PocketId
	}
	return ""
}

func (x *GetNameBySalesforceIDRequest) GetCurrencyId() string {
	if x != nil {
		return x.CurrencyId
	}
	return ""
}

func (x *GetNameBySalesforceIDRequest) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

type ConvertCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromCurrency string  `protobuf:"bytes,1,opt,name=from_currency,json=fromCurrency,proto3" json:"from_currency,omitempty"`
	ToCurrency   string  `protobuf:"bytes,2,opt,name=to_currency,json=toCurrency,proto3" json:"to_currency,omitempty"`
	Amount       float64 `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *ConvertCurrencyRequest) Reset() {
	*x = ConvertCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_converter_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertCurrencyRequest) ProtoMessage() {}

func (x *ConvertCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_currency_converter_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertCurrencyRequest.ProtoReflect.Descriptor instead.
func (*ConvertCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_currency_converter_proto_rawDescGZIP(), []int{9}
}

func (x *ConvertCurrencyRequest) GetFromCurrency() string {
	if x != nil {
		return x.FromCurrency
	}
	return ""
}

func (x *ConvertCurrencyRequest) GetToCurrency() string {
	if x != nil {
		return x.ToCurrency
	}
	return ""
}

func (x *ConvertCurrencyRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type GetNameBySalesforceIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PocketName    string `protobuf:"bytes,1,opt,name=pocket_name,json=pocketName,proto3" json:"pocket_name,omitempty"`
	CurrencyName  string `protobuf:"bytes,2,opt,name=currency_name,json=currencyName,proto3" json:"currency_name,omitempty"`
	OperationName string `protobuf:"bytes,3,opt,name=operation_name,json=operationName,proto3" json:"operation_name,omitempty"`
	UserId        string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetNameBySalesforceIDResponse) Reset() {
	*x = GetNameBySalesforceIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_converter_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNameBySalesforceIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNameBySalesforceIDResponse) ProtoMessage() {}

func (x *GetNameBySalesforceIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_currency_converter_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNameBySalesforceIDResponse.ProtoReflect.Descriptor instead.
func (*GetNameBySalesforceIDResponse) Descriptor() ([]byte, []int) {
	return file_currency_converter_proto_rawDescGZIP(), []int{10}
}

func (x *GetNameBySalesforceIDResponse) GetPocketName() string {
	if x != nil {
		return x.PocketName
	}
	return ""
}

func (x *GetNameBySalesforceIDResponse) GetCurrencyName() string {
	if x != nil {
		return x.CurrencyName
	}
	return ""
}

func (x *GetNameBySalesforceIDResponse) GetOperationName() string {
	if x != nil {
		return x.OperationName
	}
	return ""
}

func (x *GetNameBySalesforceIDResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ConvertCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency string  `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	Amount   float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *ConvertCurrencyResponse) Reset() {
	*x = ConvertCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_converter_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertCurrencyResponse) ProtoMessage() {}

func (x *ConvertCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_currency_converter_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertCurrencyResponse.ProtoReflect.Descriptor instead.
func (*ConvertCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_currency_converter_proto_rawDescGZIP(), []int{11}
}

func (x *ConvertCurrencyResponse) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ConvertCurrencyResponse) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

var File_currency_converter_proto protoreflect.FileDescriptor

var file_currency_converter_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x32, 0x22, 0xa2,
	0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2d, 0x0a, 0x12,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x31, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x31, 0x0a, 0x1f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x30,
	0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x31, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x2d, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x77, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22,
	0x7f, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x76, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x4d, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x32,
	0x9a, 0x06, 0x0a, 0x18, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x84, 0x01, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x32, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76,
	0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x32,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x84, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76,
	0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x6f, 0x72, 0x12, 0x32, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x53, 0x61, 0x6c, 0x65, 0x73,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x49, 0x44, 0x12, 0x30, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x32, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c,
	0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x2a, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x1d, 0x5a, 0x1b,
	0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_currency_converter_proto_rawDescOnce sync.Once
	file_currency_converter_proto_rawDescData = file_currency_converter_proto_rawDesc
)

func file_currency_converter_proto_rawDescGZIP() []byte {
	file_currency_converter_proto_rawDescOnce.Do(func() {
		file_currency_converter_proto_rawDescData = protoimpl.X.CompressGZIP(file_currency_converter_proto_rawDescData)
	})
	return file_currency_converter_proto_rawDescData
}

var file_currency_converter_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_currency_converter_proto_goTypes = []interface{}{
	(*CreateCurrencyConvertorRequest)(nil),  // 0: billing_service_v2.CreateCurrencyConvertorRequest
	(*CreateCurrencyConvertorResponse)(nil), // 1: billing_service_v2.CreateCurrencyConvertorResponse
	(*UpdateCurrencyConvertorRequest)(nil),  // 2: billing_service_v2.UpdateCurrencyConvertorRequest
	(*UpdateCurrencyConvertorResponse)(nil), // 3: billing_service_v2.UpdateCurrencyConvertorResponse
	(*DeleteCurrencyConvertorRequest)(nil),  // 4: billing_service_v2.DeleteCurrencyConvertorRequest
	(*DeleteCurrencyConvertorResponse)(nil), // 5: billing_service_v2.DeleteCurrencyConvertorResponse
	(*GetCurrencyConvertorResponse)(nil),    // 6: billing_service_v2.GetCurrencyConvertorResponse
	(*GetCurrencyConvertorRequest)(nil),     // 7: billing_service_v2.GetCurrencyConvertorRequest
	(*GetNameBySalesforceIDRequest)(nil),    // 8: billing_service_v2.GetNameBySalesforceIDRequest
	(*ConvertCurrencyRequest)(nil),          // 9: billing_service_v2.ConvertCurrencyRequest
	(*GetNameBySalesforceIDResponse)(nil),   // 10: billing_service_v2.GetNameBySalesforceIDResponse
	(*ConvertCurrencyResponse)(nil),         // 11: billing_service_v2.ConvertCurrencyResponse
}
var file_currency_converter_proto_depIdxs = []int32{
	0,  // 0: billing_service_v2.CurrencyConverterService.CreateCurrencyConvertor:input_type -> billing_service_v2.CreateCurrencyConvertorRequest
	7,  // 1: billing_service_v2.CurrencyConverterService.GetCurrencyConvertor:input_type -> billing_service_v2.GetCurrencyConvertorRequest
	2,  // 2: billing_service_v2.CurrencyConverterService.UpdateCurrencyConvertor:input_type -> billing_service_v2.UpdateCurrencyConvertorRequest
	4,  // 3: billing_service_v2.CurrencyConverterService.DeleteCurrencyConvertor:input_type -> billing_service_v2.DeleteCurrencyConvertorRequest
	8,  // 4: billing_service_v2.CurrencyConverterService.GetNameBySalesforceID:input_type -> billing_service_v2.GetNameBySalesforceIDRequest
	9,  // 5: billing_service_v2.CurrencyConverterService.ConvertCurrency:input_type -> billing_service_v2.ConvertCurrencyRequest
	1,  // 6: billing_service_v2.CurrencyConverterService.CreateCurrencyConvertor:output_type -> billing_service_v2.CreateCurrencyConvertorResponse
	6,  // 7: billing_service_v2.CurrencyConverterService.GetCurrencyConvertor:output_type -> billing_service_v2.GetCurrencyConvertorResponse
	3,  // 8: billing_service_v2.CurrencyConverterService.UpdateCurrencyConvertor:output_type -> billing_service_v2.UpdateCurrencyConvertorResponse
	5,  // 9: billing_service_v2.CurrencyConverterService.DeleteCurrencyConvertor:output_type -> billing_service_v2.DeleteCurrencyConvertorResponse
	10, // 10: billing_service_v2.CurrencyConverterService.GetNameBySalesforceID:output_type -> billing_service_v2.GetNameBySalesforceIDResponse
	11, // 11: billing_service_v2.CurrencyConverterService.ConvertCurrency:output_type -> billing_service_v2.ConvertCurrencyResponse
	6,  // [6:12] is the sub-list for method output_type
	0,  // [0:6] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_currency_converter_proto_init() }
func file_currency_converter_proto_init() {
	if File_currency_converter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_currency_converter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCurrencyConvertorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_currency_converter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCurrencyConvertorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_currency_converter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCurrencyConvertorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_currency_converter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCurrencyConvertorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_currency_converter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCurrencyConvertorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_currency_converter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCurrencyConvertorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_currency_converter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrencyConvertorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_currency_converter_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrencyConvertorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_currency_converter_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNameBySalesforceIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_currency_converter_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvertCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_currency_converter_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNameBySalesforceIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_currency_converter_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvertCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_currency_converter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_currency_converter_proto_goTypes,
		DependencyIndexes: file_currency_converter_proto_depIdxs,
		MessageInfos:      file_currency_converter_proto_msgTypes,
	}.Build()
	File_currency_converter_proto = out.File
	file_currency_converter_proto_rawDesc = nil
	file_currency_converter_proto_goTypes = nil
	file_currency_converter_proto_depIdxs = nil
}
