// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: pocket.proto

package billing_service_v2

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PocketServiceClient is the client API for PocketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PocketServiceClient interface {
	CreateRequiredPockets(ctx context.Context, in *CreatePocketRequest, opts ...grpc.CallOption) (*PocketList, error)
	CreateCustomPocket(ctx context.Context, in *CreatePocketRequest, opts ...grpc.CallOption) (*Pocket, error)
	UpdatePocket(ctx context.Context, in *UpdatePocketRequest, opts ...grpc.CallOption) (*Pocket, error)
	GetPocket(ctx context.Context, in *GetPocketRequest, opts ...grpc.CallOption) (*Pocket, error)
	GetTransitPocket(ctx context.Context, in *GetPocketRequest, opts ...grpc.CallOption) (*Pocket, error)
	GetAllPocketsOfUser(ctx context.Context, in *GetAllPocketsOfUserRequest, opts ...grpc.CallOption) (*PocketList, error)
	TransferPocketOrders(ctx context.Context, in *TransferPocketOrdersRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeletePocket(ctx context.Context, in *DeletePocketRequest, opts ...grpc.CallOption) (*Pocket, error)
	DeletePocketWithoutTransfer(ctx context.Context, in *DeletePocketRequest, opts ...grpc.CallOption) (*Pocket, error)
	GetPocketSalesforceId(ctx context.Context, in *GetPocketSalesforceIdRequest, opts ...grpc.CallOption) (*GetPocketSalesforceIdResponse, error)
	GetPocketsData(ctx context.Context, in *GetPocketsDataRequest, opts ...grpc.CallOption) (*GetPocketsDataResponse, error)
	GetPocketTypes(ctx context.Context, in *GetPocketTypesRequest, opts ...grpc.CallOption) (*GetPocketTypesResponse, error)
}

type pocketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPocketServiceClient(cc grpc.ClientConnInterface) PocketServiceClient {
	return &pocketServiceClient{cc}
}

func (c *pocketServiceClient) CreateRequiredPockets(ctx context.Context, in *CreatePocketRequest, opts ...grpc.CallOption) (*PocketList, error) {
	out := new(PocketList)
	err := c.cc.Invoke(ctx, "/billing_service_v2.PocketService/CreateRequiredPockets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocketServiceClient) CreateCustomPocket(ctx context.Context, in *CreatePocketRequest, opts ...grpc.CallOption) (*Pocket, error) {
	out := new(Pocket)
	err := c.cc.Invoke(ctx, "/billing_service_v2.PocketService/CreateCustomPocket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocketServiceClient) UpdatePocket(ctx context.Context, in *UpdatePocketRequest, opts ...grpc.CallOption) (*Pocket, error) {
	out := new(Pocket)
	err := c.cc.Invoke(ctx, "/billing_service_v2.PocketService/UpdatePocket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocketServiceClient) GetPocket(ctx context.Context, in *GetPocketRequest, opts ...grpc.CallOption) (*Pocket, error) {
	out := new(Pocket)
	err := c.cc.Invoke(ctx, "/billing_service_v2.PocketService/GetPocket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocketServiceClient) GetTransitPocket(ctx context.Context, in *GetPocketRequest, opts ...grpc.CallOption) (*Pocket, error) {
	out := new(Pocket)
	err := c.cc.Invoke(ctx, "/billing_service_v2.PocketService/GetTransitPocket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocketServiceClient) GetAllPocketsOfUser(ctx context.Context, in *GetAllPocketsOfUserRequest, opts ...grpc.CallOption) (*PocketList, error) {
	out := new(PocketList)
	err := c.cc.Invoke(ctx, "/billing_service_v2.PocketService/GetAllPocketsOfUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocketServiceClient) TransferPocketOrders(ctx context.Context, in *TransferPocketOrdersRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/billing_service_v2.PocketService/TransferPocketOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocketServiceClient) DeletePocket(ctx context.Context, in *DeletePocketRequest, opts ...grpc.CallOption) (*Pocket, error) {
	out := new(Pocket)
	err := c.cc.Invoke(ctx, "/billing_service_v2.PocketService/DeletePocket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocketServiceClient) DeletePocketWithoutTransfer(ctx context.Context, in *DeletePocketRequest, opts ...grpc.CallOption) (*Pocket, error) {
	out := new(Pocket)
	err := c.cc.Invoke(ctx, "/billing_service_v2.PocketService/DeletePocketWithoutTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocketServiceClient) GetPocketSalesforceId(ctx context.Context, in *GetPocketSalesforceIdRequest, opts ...grpc.CallOption) (*GetPocketSalesforceIdResponse, error) {
	out := new(GetPocketSalesforceIdResponse)
	err := c.cc.Invoke(ctx, "/billing_service_v2.PocketService/GetPocketSalesforceId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocketServiceClient) GetPocketsData(ctx context.Context, in *GetPocketsDataRequest, opts ...grpc.CallOption) (*GetPocketsDataResponse, error) {
	out := new(GetPocketsDataResponse)
	err := c.cc.Invoke(ctx, "/billing_service_v2.PocketService/GetPocketsData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocketServiceClient) GetPocketTypes(ctx context.Context, in *GetPocketTypesRequest, opts ...grpc.CallOption) (*GetPocketTypesResponse, error) {
	out := new(GetPocketTypesResponse)
	err := c.cc.Invoke(ctx, "/billing_service_v2.PocketService/GetPocketTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PocketServiceServer is the server API for PocketService service.
// All implementations must embed UnimplementedPocketServiceServer
// for forward compatibility
type PocketServiceServer interface {
	CreateRequiredPockets(context.Context, *CreatePocketRequest) (*PocketList, error)
	CreateCustomPocket(context.Context, *CreatePocketRequest) (*Pocket, error)
	UpdatePocket(context.Context, *UpdatePocketRequest) (*Pocket, error)
	GetPocket(context.Context, *GetPocketRequest) (*Pocket, error)
	GetTransitPocket(context.Context, *GetPocketRequest) (*Pocket, error)
	GetAllPocketsOfUser(context.Context, *GetAllPocketsOfUserRequest) (*PocketList, error)
	TransferPocketOrders(context.Context, *TransferPocketOrdersRequest) (*empty.Empty, error)
	DeletePocket(context.Context, *DeletePocketRequest) (*Pocket, error)
	DeletePocketWithoutTransfer(context.Context, *DeletePocketRequest) (*Pocket, error)
	GetPocketSalesforceId(context.Context, *GetPocketSalesforceIdRequest) (*GetPocketSalesforceIdResponse, error)
	GetPocketsData(context.Context, *GetPocketsDataRequest) (*GetPocketsDataResponse, error)
	GetPocketTypes(context.Context, *GetPocketTypesRequest) (*GetPocketTypesResponse, error)
	mustEmbedUnimplementedPocketServiceServer()
}

// UnimplementedPocketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPocketServiceServer struct {
}

func (UnimplementedPocketServiceServer) CreateRequiredPockets(context.Context, *CreatePocketRequest) (*PocketList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRequiredPockets not implemented")
}
func (UnimplementedPocketServiceServer) CreateCustomPocket(context.Context, *CreatePocketRequest) (*Pocket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomPocket not implemented")
}
func (UnimplementedPocketServiceServer) UpdatePocket(context.Context, *UpdatePocketRequest) (*Pocket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePocket not implemented")
}
func (UnimplementedPocketServiceServer) GetPocket(context.Context, *GetPocketRequest) (*Pocket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPocket not implemented")
}
func (UnimplementedPocketServiceServer) GetTransitPocket(context.Context, *GetPocketRequest) (*Pocket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransitPocket not implemented")
}
func (UnimplementedPocketServiceServer) GetAllPocketsOfUser(context.Context, *GetAllPocketsOfUserRequest) (*PocketList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPocketsOfUser not implemented")
}
func (UnimplementedPocketServiceServer) TransferPocketOrders(context.Context, *TransferPocketOrdersRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferPocketOrders not implemented")
}
func (UnimplementedPocketServiceServer) DeletePocket(context.Context, *DeletePocketRequest) (*Pocket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePocket not implemented")
}
func (UnimplementedPocketServiceServer) DeletePocketWithoutTransfer(context.Context, *DeletePocketRequest) (*Pocket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePocketWithoutTransfer not implemented")
}
func (UnimplementedPocketServiceServer) GetPocketSalesforceId(context.Context, *GetPocketSalesforceIdRequest) (*GetPocketSalesforceIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPocketSalesforceId not implemented")
}
func (UnimplementedPocketServiceServer) GetPocketsData(context.Context, *GetPocketsDataRequest) (*GetPocketsDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPocketsData not implemented")
}
func (UnimplementedPocketServiceServer) GetPocketTypes(context.Context, *GetPocketTypesRequest) (*GetPocketTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPocketTypes not implemented")
}
func (UnimplementedPocketServiceServer) mustEmbedUnimplementedPocketServiceServer() {}

// UnsafePocketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PocketServiceServer will
// result in compilation errors.
type UnsafePocketServiceServer interface {
	mustEmbedUnimplementedPocketServiceServer()
}

func RegisterPocketServiceServer(s grpc.ServiceRegistrar, srv PocketServiceServer) {
	s.RegisterService(&PocketService_ServiceDesc, srv)
}

func _PocketService_CreateRequiredPockets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocketServiceServer).CreateRequiredPockets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service_v2.PocketService/CreateRequiredPockets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocketServiceServer).CreateRequiredPockets(ctx, req.(*CreatePocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PocketService_CreateCustomPocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocketServiceServer).CreateCustomPocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service_v2.PocketService/CreateCustomPocket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocketServiceServer).CreateCustomPocket(ctx, req.(*CreatePocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PocketService_UpdatePocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocketServiceServer).UpdatePocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service_v2.PocketService/UpdatePocket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocketServiceServer).UpdatePocket(ctx, req.(*UpdatePocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PocketService_GetPocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocketServiceServer).GetPocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service_v2.PocketService/GetPocket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocketServiceServer).GetPocket(ctx, req.(*GetPocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PocketService_GetTransitPocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocketServiceServer).GetTransitPocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service_v2.PocketService/GetTransitPocket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocketServiceServer).GetTransitPocket(ctx, req.(*GetPocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PocketService_GetAllPocketsOfUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPocketsOfUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocketServiceServer).GetAllPocketsOfUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service_v2.PocketService/GetAllPocketsOfUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocketServiceServer).GetAllPocketsOfUser(ctx, req.(*GetAllPocketsOfUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PocketService_TransferPocketOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferPocketOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocketServiceServer).TransferPocketOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service_v2.PocketService/TransferPocketOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocketServiceServer).TransferPocketOrders(ctx, req.(*TransferPocketOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PocketService_DeletePocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocketServiceServer).DeletePocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service_v2.PocketService/DeletePocket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocketServiceServer).DeletePocket(ctx, req.(*DeletePocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PocketService_DeletePocketWithoutTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocketServiceServer).DeletePocketWithoutTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service_v2.PocketService/DeletePocketWithoutTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocketServiceServer).DeletePocketWithoutTransfer(ctx, req.(*DeletePocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PocketService_GetPocketSalesforceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPocketSalesforceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocketServiceServer).GetPocketSalesforceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service_v2.PocketService/GetPocketSalesforceId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocketServiceServer).GetPocketSalesforceId(ctx, req.(*GetPocketSalesforceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PocketService_GetPocketsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPocketsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocketServiceServer).GetPocketsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service_v2.PocketService/GetPocketsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocketServiceServer).GetPocketsData(ctx, req.(*GetPocketsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PocketService_GetPocketTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPocketTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocketServiceServer).GetPocketTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service_v2.PocketService/GetPocketTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocketServiceServer).GetPocketTypes(ctx, req.(*GetPocketTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PocketService_ServiceDesc is the grpc.ServiceDesc for PocketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PocketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "billing_service_v2.PocketService",
	HandlerType: (*PocketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRequiredPockets",
			Handler:    _PocketService_CreateRequiredPockets_Handler,
		},
		{
			MethodName: "CreateCustomPocket",
			Handler:    _PocketService_CreateCustomPocket_Handler,
		},
		{
			MethodName: "UpdatePocket",
			Handler:    _PocketService_UpdatePocket_Handler,
		},
		{
			MethodName: "GetPocket",
			Handler:    _PocketService_GetPocket_Handler,
		},
		{
			MethodName: "GetTransitPocket",
			Handler:    _PocketService_GetTransitPocket_Handler,
		},
		{
			MethodName: "GetAllPocketsOfUser",
			Handler:    _PocketService_GetAllPocketsOfUser_Handler,
		},
		{
			MethodName: "TransferPocketOrders",
			Handler:    _PocketService_TransferPocketOrders_Handler,
		},
		{
			MethodName: "DeletePocket",
			Handler:    _PocketService_DeletePocket_Handler,
		},
		{
			MethodName: "DeletePocketWithoutTransfer",
			Handler:    _PocketService_DeletePocketWithoutTransfer_Handler,
		},
		{
			MethodName: "GetPocketSalesforceId",
			Handler:    _PocketService_GetPocketSalesforceId_Handler,
		},
		{
			MethodName: "GetPocketsData",
			Handler:    _PocketService_GetPocketsData_Handler,
		},
		{
			MethodName: "GetPocketTypes",
			Handler:    _PocketService_GetPocketTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pocket.proto",
}
