// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: currency_converter.proto

package billing_service_v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CurrencyConverterServiceClient is the client API for CurrencyConverterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurrencyConverterServiceClient interface {
	CreateCurrencyConvertor(ctx context.Context, in *CreateCurrencyConvertorRequest, opts ...grpc.CallOption) (*CreateCurrencyConvertorResponse, error)
	GetCurrencyConvertor(ctx context.Context, in *GetCurrencyConvertorRequest, opts ...grpc.CallOption) (*GetCurrencyConvertorResponse, error)
	UpdateCurrencyConvertor(ctx context.Context, in *UpdateCurrencyConvertorRequest, opts ...grpc.CallOption) (*UpdateCurrencyConvertorResponse, error)
	DeleteCurrencyConvertor(ctx context.Context, in *DeleteCurrencyConvertorRequest, opts ...grpc.CallOption) (*DeleteCurrencyConvertorResponse, error)
	GetNameBySalesforceID(ctx context.Context, in *GetNameBySalesforceIDRequest, opts ...grpc.CallOption) (*GetNameBySalesforceIDResponse, error)
	ConvertCurrency(ctx context.Context, in *ConvertCurrencyRequest, opts ...grpc.CallOption) (*ConvertCurrencyResponse, error)
}

type currencyConverterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrencyConverterServiceClient(cc grpc.ClientConnInterface) CurrencyConverterServiceClient {
	return &currencyConverterServiceClient{cc}
}

func (c *currencyConverterServiceClient) CreateCurrencyConvertor(ctx context.Context, in *CreateCurrencyConvertorRequest, opts ...grpc.CallOption) (*CreateCurrencyConvertorResponse, error) {
	out := new(CreateCurrencyConvertorResponse)
	err := c.cc.Invoke(ctx, "/billing_service_v2.CurrencyConverterService/CreateCurrencyConvertor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyConverterServiceClient) GetCurrencyConvertor(ctx context.Context, in *GetCurrencyConvertorRequest, opts ...grpc.CallOption) (*GetCurrencyConvertorResponse, error) {
	out := new(GetCurrencyConvertorResponse)
	err := c.cc.Invoke(ctx, "/billing_service_v2.CurrencyConverterService/GetCurrencyConvertor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyConverterServiceClient) UpdateCurrencyConvertor(ctx context.Context, in *UpdateCurrencyConvertorRequest, opts ...grpc.CallOption) (*UpdateCurrencyConvertorResponse, error) {
	out := new(UpdateCurrencyConvertorResponse)
	err := c.cc.Invoke(ctx, "/billing_service_v2.CurrencyConverterService/UpdateCurrencyConvertor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyConverterServiceClient) DeleteCurrencyConvertor(ctx context.Context, in *DeleteCurrencyConvertorRequest, opts ...grpc.CallOption) (*DeleteCurrencyConvertorResponse, error) {
	out := new(DeleteCurrencyConvertorResponse)
	err := c.cc.Invoke(ctx, "/billing_service_v2.CurrencyConverterService/DeleteCurrencyConvertor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyConverterServiceClient) GetNameBySalesforceID(ctx context.Context, in *GetNameBySalesforceIDRequest, opts ...grpc.CallOption) (*GetNameBySalesforceIDResponse, error) {
	out := new(GetNameBySalesforceIDResponse)
	err := c.cc.Invoke(ctx, "/billing_service_v2.CurrencyConverterService/GetNameBySalesforceID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyConverterServiceClient) ConvertCurrency(ctx context.Context, in *ConvertCurrencyRequest, opts ...grpc.CallOption) (*ConvertCurrencyResponse, error) {
	out := new(ConvertCurrencyResponse)
	err := c.cc.Invoke(ctx, "/billing_service_v2.CurrencyConverterService/ConvertCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrencyConverterServiceServer is the server API for CurrencyConverterService service.
// All implementations must embed UnimplementedCurrencyConverterServiceServer
// for forward compatibility
type CurrencyConverterServiceServer interface {
	CreateCurrencyConvertor(context.Context, *CreateCurrencyConvertorRequest) (*CreateCurrencyConvertorResponse, error)
	GetCurrencyConvertor(context.Context, *GetCurrencyConvertorRequest) (*GetCurrencyConvertorResponse, error)
	UpdateCurrencyConvertor(context.Context, *UpdateCurrencyConvertorRequest) (*UpdateCurrencyConvertorResponse, error)
	DeleteCurrencyConvertor(context.Context, *DeleteCurrencyConvertorRequest) (*DeleteCurrencyConvertorResponse, error)
	GetNameBySalesforceID(context.Context, *GetNameBySalesforceIDRequest) (*GetNameBySalesforceIDResponse, error)
	ConvertCurrency(context.Context, *ConvertCurrencyRequest) (*ConvertCurrencyResponse, error)
	mustEmbedUnimplementedCurrencyConverterServiceServer()
}

// UnimplementedCurrencyConverterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCurrencyConverterServiceServer struct {
}

func (UnimplementedCurrencyConverterServiceServer) CreateCurrencyConvertor(context.Context, *CreateCurrencyConvertorRequest) (*CreateCurrencyConvertorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCurrencyConvertor not implemented")
}
func (UnimplementedCurrencyConverterServiceServer) GetCurrencyConvertor(context.Context, *GetCurrencyConvertorRequest) (*GetCurrencyConvertorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrencyConvertor not implemented")
}
func (UnimplementedCurrencyConverterServiceServer) UpdateCurrencyConvertor(context.Context, *UpdateCurrencyConvertorRequest) (*UpdateCurrencyConvertorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurrencyConvertor not implemented")
}
func (UnimplementedCurrencyConverterServiceServer) DeleteCurrencyConvertor(context.Context, *DeleteCurrencyConvertorRequest) (*DeleteCurrencyConvertorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCurrencyConvertor not implemented")
}
func (UnimplementedCurrencyConverterServiceServer) GetNameBySalesforceID(context.Context, *GetNameBySalesforceIDRequest) (*GetNameBySalesforceIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNameBySalesforceID not implemented")
}
func (UnimplementedCurrencyConverterServiceServer) ConvertCurrency(context.Context, *ConvertCurrencyRequest) (*ConvertCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertCurrency not implemented")
}
func (UnimplementedCurrencyConverterServiceServer) mustEmbedUnimplementedCurrencyConverterServiceServer() {
}

// UnsafeCurrencyConverterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurrencyConverterServiceServer will
// result in compilation errors.
type UnsafeCurrencyConverterServiceServer interface {
	mustEmbedUnimplementedCurrencyConverterServiceServer()
}

func RegisterCurrencyConverterServiceServer(s grpc.ServiceRegistrar, srv CurrencyConverterServiceServer) {
	s.RegisterService(&CurrencyConverterService_ServiceDesc, srv)
}

func _CurrencyConverterService_CreateCurrencyConvertor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCurrencyConvertorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyConverterServiceServer).CreateCurrencyConvertor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service_v2.CurrencyConverterService/CreateCurrencyConvertor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyConverterServiceServer).CreateCurrencyConvertor(ctx, req.(*CreateCurrencyConvertorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyConverterService_GetCurrencyConvertor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrencyConvertorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyConverterServiceServer).GetCurrencyConvertor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service_v2.CurrencyConverterService/GetCurrencyConvertor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyConverterServiceServer).GetCurrencyConvertor(ctx, req.(*GetCurrencyConvertorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyConverterService_UpdateCurrencyConvertor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCurrencyConvertorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyConverterServiceServer).UpdateCurrencyConvertor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service_v2.CurrencyConverterService/UpdateCurrencyConvertor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyConverterServiceServer).UpdateCurrencyConvertor(ctx, req.(*UpdateCurrencyConvertorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyConverterService_DeleteCurrencyConvertor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCurrencyConvertorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyConverterServiceServer).DeleteCurrencyConvertor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service_v2.CurrencyConverterService/DeleteCurrencyConvertor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyConverterServiceServer).DeleteCurrencyConvertor(ctx, req.(*DeleteCurrencyConvertorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyConverterService_GetNameBySalesforceID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNameBySalesforceIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyConverterServiceServer).GetNameBySalesforceID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service_v2.CurrencyConverterService/GetNameBySalesforceID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyConverterServiceServer).GetNameBySalesforceID(ctx, req.(*GetNameBySalesforceIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyConverterService_ConvertCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyConverterServiceServer).ConvertCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service_v2.CurrencyConverterService/ConvertCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyConverterServiceServer).ConvertCurrency(ctx, req.(*ConvertCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CurrencyConverterService_ServiceDesc is the grpc.ServiceDesc for CurrencyConverterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CurrencyConverterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "billing_service_v2.CurrencyConverterService",
	HandlerType: (*CurrencyConverterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCurrencyConvertor",
			Handler:    _CurrencyConverterService_CreateCurrencyConvertor_Handler,
		},
		{
			MethodName: "GetCurrencyConvertor",
			Handler:    _CurrencyConverterService_GetCurrencyConvertor_Handler,
		},
		{
			MethodName: "UpdateCurrencyConvertor",
			Handler:    _CurrencyConverterService_UpdateCurrencyConvertor_Handler,
		},
		{
			MethodName: "DeleteCurrencyConvertor",
			Handler:    _CurrencyConverterService_DeleteCurrencyConvertor_Handler,
		},
		{
			MethodName: "GetNameBySalesforceID",
			Handler:    _CurrencyConverterService_GetNameBySalesforceID_Handler,
		},
		{
			MethodName: "ConvertCurrency",
			Handler:    _CurrencyConverterService_ConvertCurrency_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "currency_converter.proto",
}
