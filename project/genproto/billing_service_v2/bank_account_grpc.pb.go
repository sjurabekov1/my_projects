// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: bank_account.proto

package billing_service_v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BankServiceClient is the client API for BankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankServiceClient interface {
	CreateBankAccount(ctx context.Context, in *CreateBankAccountRequest, opts ...grpc.CallOption) (*CreateBankAccountResponse, error)
	GetBankAccount(ctx context.Context, in *GetBankAccountRequest, opts ...grpc.CallOption) (*GetBankAccountResponse, error)
	SetSalesforceId(ctx context.Context, in *SetSalesforceIdRequest, opts ...grpc.CallOption) (*SetSalesforceIdResponse, error)
	UpdateBankAccount(ctx context.Context, in *UpdateBankAccountRequest, opts ...grpc.CallOption) (*UpdateBankAccountResponse, error)
	UpsertBankAccountCurrency(ctx context.Context, in *UpsertBankAccountCurrencyRequest, opts ...grpc.CallOption) (*UpsertBankAccountCurrencyResponse, error)
}

type bankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankServiceClient(cc grpc.ClientConnInterface) BankServiceClient {
	return &bankServiceClient{cc}
}

func (c *bankServiceClient) CreateBankAccount(ctx context.Context, in *CreateBankAccountRequest, opts ...grpc.CallOption) (*CreateBankAccountResponse, error) {
	out := new(CreateBankAccountResponse)
	err := c.cc.Invoke(ctx, "/billing_service_v2.BankService/CreateBankAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) GetBankAccount(ctx context.Context, in *GetBankAccountRequest, opts ...grpc.CallOption) (*GetBankAccountResponse, error) {
	out := new(GetBankAccountResponse)
	err := c.cc.Invoke(ctx, "/billing_service_v2.BankService/GetBankAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) SetSalesforceId(ctx context.Context, in *SetSalesforceIdRequest, opts ...grpc.CallOption) (*SetSalesforceIdResponse, error) {
	out := new(SetSalesforceIdResponse)
	err := c.cc.Invoke(ctx, "/billing_service_v2.BankService/SetSalesforceId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) UpdateBankAccount(ctx context.Context, in *UpdateBankAccountRequest, opts ...grpc.CallOption) (*UpdateBankAccountResponse, error) {
	out := new(UpdateBankAccountResponse)
	err := c.cc.Invoke(ctx, "/billing_service_v2.BankService/UpdateBankAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) UpsertBankAccountCurrency(ctx context.Context, in *UpsertBankAccountCurrencyRequest, opts ...grpc.CallOption) (*UpsertBankAccountCurrencyResponse, error) {
	out := new(UpsertBankAccountCurrencyResponse)
	err := c.cc.Invoke(ctx, "/billing_service_v2.BankService/UpsertBankAccountCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankServiceServer is the server API for BankService service.
// All implementations must embed UnimplementedBankServiceServer
// for forward compatibility
type BankServiceServer interface {
	CreateBankAccount(context.Context, *CreateBankAccountRequest) (*CreateBankAccountResponse, error)
	GetBankAccount(context.Context, *GetBankAccountRequest) (*GetBankAccountResponse, error)
	SetSalesforceId(context.Context, *SetSalesforceIdRequest) (*SetSalesforceIdResponse, error)
	UpdateBankAccount(context.Context, *UpdateBankAccountRequest) (*UpdateBankAccountResponse, error)
	UpsertBankAccountCurrency(context.Context, *UpsertBankAccountCurrencyRequest) (*UpsertBankAccountCurrencyResponse, error)
	mustEmbedUnimplementedBankServiceServer()
}

// UnimplementedBankServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBankServiceServer struct {
}

func (UnimplementedBankServiceServer) CreateBankAccount(context.Context, *CreateBankAccountRequest) (*CreateBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBankAccount not implemented")
}
func (UnimplementedBankServiceServer) GetBankAccount(context.Context, *GetBankAccountRequest) (*GetBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankAccount not implemented")
}
func (UnimplementedBankServiceServer) SetSalesforceId(context.Context, *SetSalesforceIdRequest) (*SetSalesforceIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSalesforceId not implemented")
}
func (UnimplementedBankServiceServer) UpdateBankAccount(context.Context, *UpdateBankAccountRequest) (*UpdateBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBankAccount not implemented")
}
func (UnimplementedBankServiceServer) UpsertBankAccountCurrency(context.Context, *UpsertBankAccountCurrencyRequest) (*UpsertBankAccountCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertBankAccountCurrency not implemented")
}
func (UnimplementedBankServiceServer) mustEmbedUnimplementedBankServiceServer() {}

// UnsafeBankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankServiceServer will
// result in compilation errors.
type UnsafeBankServiceServer interface {
	mustEmbedUnimplementedBankServiceServer()
}

func RegisterBankServiceServer(s grpc.ServiceRegistrar, srv BankServiceServer) {
	s.RegisterService(&BankService_ServiceDesc, srv)
}

func _BankService_CreateBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).CreateBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service_v2.BankService/CreateBankAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).CreateBankAccount(ctx, req.(*CreateBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_GetBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).GetBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service_v2.BankService/GetBankAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).GetBankAccount(ctx, req.(*GetBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_SetSalesforceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSalesforceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).SetSalesforceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service_v2.BankService/SetSalesforceId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).SetSalesforceId(ctx, req.(*SetSalesforceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_UpdateBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).UpdateBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service_v2.BankService/UpdateBankAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).UpdateBankAccount(ctx, req.(*UpdateBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_UpsertBankAccountCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertBankAccountCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).UpsertBankAccountCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service_v2.BankService/UpsertBankAccountCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).UpsertBankAccountCurrency(ctx, req.(*UpsertBankAccountCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankService_ServiceDesc is the grpc.ServiceDesc for BankService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "billing_service_v2.BankService",
	HandlerType: (*BankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBankAccount",
			Handler:    _BankService_CreateBankAccount_Handler,
		},
		{
			MethodName: "GetBankAccount",
			Handler:    _BankService_GetBankAccount_Handler,
		},
		{
			MethodName: "SetSalesforceId",
			Handler:    _BankService_SetSalesforceId_Handler,
		},
		{
			MethodName: "UpdateBankAccount",
			Handler:    _BankService_UpdateBankAccount_Handler,
		},
		{
			MethodName: "UpsertBankAccountCurrency",
			Handler:    _BankService_UpsertBankAccountCurrency_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bank_account.proto",
}
