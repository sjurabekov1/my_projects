// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: instrument_service.proto

package instrument_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InstrumentSeviceClient is the client API for InstrumentSevice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstrumentSeviceClient interface {
	GetAllExchanges(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetExchangesResponse, error)
	GetAllGroups(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetGroupsResponse, error)
	GetAllTypes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetTypesResponse, error)
	FilterInstruments(ctx context.Context, in *FilterInstrumentsRequest, opts ...grpc.CallOption) (*FilterInstrumentsResponse, error)
	GetInstrumentByID(ctx context.Context, in *GetInstrumentByIDRequest, opts ...grpc.CallOption) (*FixSymbol, error)
	GetBussinessSummary(ctx context.Context, in *GetBussinessSummaryRequest, opts ...grpc.CallOption) (*GetBussinessSummaryResponse, error)
	GetGroupByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*FixGroupResponse, error)
	GetExchangeByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*FixExchangesResponse, error)
	GetExchangesByType(ctx context.Context, in *GetExchangesByTypeRequest, opts ...grpc.CallOption) (*GetExchangesResponse, error)
	GetShortDetailsByStocks(ctx context.Context, in *GetShortDetailsByStocksRequest, opts ...grpc.CallOption) (*GetShortDetailsByStocksResponse, error)
	UpdateIcon(ctx context.Context, in *GetInstrumentsByTypeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetInstrumentHistory(ctx context.Context, in *GetInstrumentHistoryRequest, opts ...grpc.CallOption) (*GetInstrumentHistoryResponse, error)
	UploadDocument(ctx context.Context, in *UploadDocumentRequest, opts ...grpc.CallOption) (*UploadDocumentResponse, error)
	GetApplicantInfoByExternalID(ctx context.Context, in *GetApplicantInfoByExternalIdRequest, opts ...grpc.CallOption) (*GetApplicantInfoByExternalIdResponse, error)
	GetApplicantInfo(ctx context.Context, in *GetApplicantInfoRequest, opts ...grpc.CallOption) (*GetApplicantInfoResponse, error)
	CreateApplicant(ctx context.Context, in *CreateApplicantRequest, opts ...grpc.CallOption) (*CreateApplicantResponse, error)
	GetStockNews(ctx context.Context, in *GetStockNewsRequest, opts ...grpc.CallOption) (*GetStockNewsResponse, error)
	RetrieveStoriesByIds(ctx context.Context, in *RetrieveStoriesByIdsRequests, opts ...grpc.CallOption) (*RetrieveStoriesByIdsResponse, error)
	// KYC(Sumsub)
	GetKeyStats(ctx context.Context, in *GetKeyStatsRequest, opts ...grpc.CallOption) (*GetKeyStatsResponse, error)
	GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error)
	GetAllSymbolId(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetSymbolIdsResponse, error)
	// Favourite instrument(s)
	AddFavouriteInstrument(ctx context.Context, in *AddFavouriteInstrumentRequest, opts ...grpc.CallOption) (*FavouriteInstrument, error)
	GetFavouriteInstruments(ctx context.Context, in *InvestorId, opts ...grpc.CallOption) (*FavouriteInstrumentList, error)
	RemoveFromFavourite(ctx context.Context, in *FavouriteInstrument, opts ...grpc.CallOption) (*FavouriteInstrument, error)
	IsInstrumentFavourite(ctx context.Context, in *FavouriteInstrument, opts ...grpc.CallOption) (*IsInstrumentFavouriteResponse, error)
}

type instrumentSeviceClient struct {
	cc grpc.ClientConnInterface
}

func NewInstrumentSeviceClient(cc grpc.ClientConnInterface) InstrumentSeviceClient {
	return &instrumentSeviceClient{cc}
}

func (c *instrumentSeviceClient) GetAllExchanges(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetExchangesResponse, error) {
	out := new(GetExchangesResponse)
	err := c.cc.Invoke(ctx, "/instrument_service.InstrumentSevice/GetAllExchanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentSeviceClient) GetAllGroups(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetGroupsResponse, error) {
	out := new(GetGroupsResponse)
	err := c.cc.Invoke(ctx, "/instrument_service.InstrumentSevice/GetAllGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentSeviceClient) GetAllTypes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetTypesResponse, error) {
	out := new(GetTypesResponse)
	err := c.cc.Invoke(ctx, "/instrument_service.InstrumentSevice/GetAllTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentSeviceClient) FilterInstruments(ctx context.Context, in *FilterInstrumentsRequest, opts ...grpc.CallOption) (*FilterInstrumentsResponse, error) {
	out := new(FilterInstrumentsResponse)
	err := c.cc.Invoke(ctx, "/instrument_service.InstrumentSevice/FilterInstruments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentSeviceClient) GetInstrumentByID(ctx context.Context, in *GetInstrumentByIDRequest, opts ...grpc.CallOption) (*FixSymbol, error) {
	out := new(FixSymbol)
	err := c.cc.Invoke(ctx, "/instrument_service.InstrumentSevice/GetInstrumentByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentSeviceClient) GetBussinessSummary(ctx context.Context, in *GetBussinessSummaryRequest, opts ...grpc.CallOption) (*GetBussinessSummaryResponse, error) {
	out := new(GetBussinessSummaryResponse)
	err := c.cc.Invoke(ctx, "/instrument_service.InstrumentSevice/GetBussinessSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentSeviceClient) GetGroupByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*FixGroupResponse, error) {
	out := new(FixGroupResponse)
	err := c.cc.Invoke(ctx, "/instrument_service.InstrumentSevice/GetGroupByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentSeviceClient) GetExchangeByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*FixExchangesResponse, error) {
	out := new(FixExchangesResponse)
	err := c.cc.Invoke(ctx, "/instrument_service.InstrumentSevice/GetExchangeByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentSeviceClient) GetExchangesByType(ctx context.Context, in *GetExchangesByTypeRequest, opts ...grpc.CallOption) (*GetExchangesResponse, error) {
	out := new(GetExchangesResponse)
	err := c.cc.Invoke(ctx, "/instrument_service.InstrumentSevice/GetExchangesByType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentSeviceClient) GetShortDetailsByStocks(ctx context.Context, in *GetShortDetailsByStocksRequest, opts ...grpc.CallOption) (*GetShortDetailsByStocksResponse, error) {
	out := new(GetShortDetailsByStocksResponse)
	err := c.cc.Invoke(ctx, "/instrument_service.InstrumentSevice/GetShortDetailsByStocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentSeviceClient) UpdateIcon(ctx context.Context, in *GetInstrumentsByTypeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/instrument_service.InstrumentSevice/UpdateIcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentSeviceClient) GetInstrumentHistory(ctx context.Context, in *GetInstrumentHistoryRequest, opts ...grpc.CallOption) (*GetInstrumentHistoryResponse, error) {
	out := new(GetInstrumentHistoryResponse)
	err := c.cc.Invoke(ctx, "/instrument_service.InstrumentSevice/GetInstrumentHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentSeviceClient) UploadDocument(ctx context.Context, in *UploadDocumentRequest, opts ...grpc.CallOption) (*UploadDocumentResponse, error) {
	out := new(UploadDocumentResponse)
	err := c.cc.Invoke(ctx, "/instrument_service.InstrumentSevice/UploadDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentSeviceClient) GetApplicantInfoByExternalID(ctx context.Context, in *GetApplicantInfoByExternalIdRequest, opts ...grpc.CallOption) (*GetApplicantInfoByExternalIdResponse, error) {
	out := new(GetApplicantInfoByExternalIdResponse)
	err := c.cc.Invoke(ctx, "/instrument_service.InstrumentSevice/GetApplicantInfoByExternalID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentSeviceClient) GetApplicantInfo(ctx context.Context, in *GetApplicantInfoRequest, opts ...grpc.CallOption) (*GetApplicantInfoResponse, error) {
	out := new(GetApplicantInfoResponse)
	err := c.cc.Invoke(ctx, "/instrument_service.InstrumentSevice/GetApplicantInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentSeviceClient) CreateApplicant(ctx context.Context, in *CreateApplicantRequest, opts ...grpc.CallOption) (*CreateApplicantResponse, error) {
	out := new(CreateApplicantResponse)
	err := c.cc.Invoke(ctx, "/instrument_service.InstrumentSevice/CreateApplicant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentSeviceClient) GetStockNews(ctx context.Context, in *GetStockNewsRequest, opts ...grpc.CallOption) (*GetStockNewsResponse, error) {
	out := new(GetStockNewsResponse)
	err := c.cc.Invoke(ctx, "/instrument_service.InstrumentSevice/GetStockNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentSeviceClient) RetrieveStoriesByIds(ctx context.Context, in *RetrieveStoriesByIdsRequests, opts ...grpc.CallOption) (*RetrieveStoriesByIdsResponse, error) {
	out := new(RetrieveStoriesByIdsResponse)
	err := c.cc.Invoke(ctx, "/instrument_service.InstrumentSevice/RetrieveStoriesByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentSeviceClient) GetKeyStats(ctx context.Context, in *GetKeyStatsRequest, opts ...grpc.CallOption) (*GetKeyStatsResponse, error) {
	out := new(GetKeyStatsResponse)
	err := c.cc.Invoke(ctx, "/instrument_service.InstrumentSevice/GetKeyStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentSeviceClient) GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error) {
	out := new(GenerateTokenResponse)
	err := c.cc.Invoke(ctx, "/instrument_service.InstrumentSevice/GenerateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentSeviceClient) GetAllSymbolId(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetSymbolIdsResponse, error) {
	out := new(GetSymbolIdsResponse)
	err := c.cc.Invoke(ctx, "/instrument_service.InstrumentSevice/GetAllSymbolId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentSeviceClient) AddFavouriteInstrument(ctx context.Context, in *AddFavouriteInstrumentRequest, opts ...grpc.CallOption) (*FavouriteInstrument, error) {
	out := new(FavouriteInstrument)
	err := c.cc.Invoke(ctx, "/instrument_service.InstrumentSevice/AddFavouriteInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentSeviceClient) GetFavouriteInstruments(ctx context.Context, in *InvestorId, opts ...grpc.CallOption) (*FavouriteInstrumentList, error) {
	out := new(FavouriteInstrumentList)
	err := c.cc.Invoke(ctx, "/instrument_service.InstrumentSevice/GetFavouriteInstruments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentSeviceClient) RemoveFromFavourite(ctx context.Context, in *FavouriteInstrument, opts ...grpc.CallOption) (*FavouriteInstrument, error) {
	out := new(FavouriteInstrument)
	err := c.cc.Invoke(ctx, "/instrument_service.InstrumentSevice/RemoveFromFavourite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentSeviceClient) IsInstrumentFavourite(ctx context.Context, in *FavouriteInstrument, opts ...grpc.CallOption) (*IsInstrumentFavouriteResponse, error) {
	out := new(IsInstrumentFavouriteResponse)
	err := c.cc.Invoke(ctx, "/instrument_service.InstrumentSevice/IsInstrumentFavourite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstrumentSeviceServer is the server API for InstrumentSevice service.
// All implementations must embed UnimplementedInstrumentSeviceServer
// for forward compatibility
type InstrumentSeviceServer interface {
	GetAllExchanges(context.Context, *empty.Empty) (*GetExchangesResponse, error)
	GetAllGroups(context.Context, *GetByIDRequest) (*GetGroupsResponse, error)
	GetAllTypes(context.Context, *empty.Empty) (*GetTypesResponse, error)
	FilterInstruments(context.Context, *FilterInstrumentsRequest) (*FilterInstrumentsResponse, error)
	GetInstrumentByID(context.Context, *GetInstrumentByIDRequest) (*FixSymbol, error)
	GetBussinessSummary(context.Context, *GetBussinessSummaryRequest) (*GetBussinessSummaryResponse, error)
	GetGroupByID(context.Context, *GetByIDRequest) (*FixGroupResponse, error)
	GetExchangeByID(context.Context, *GetByIDRequest) (*FixExchangesResponse, error)
	GetExchangesByType(context.Context, *GetExchangesByTypeRequest) (*GetExchangesResponse, error)
	GetShortDetailsByStocks(context.Context, *GetShortDetailsByStocksRequest) (*GetShortDetailsByStocksResponse, error)
	UpdateIcon(context.Context, *GetInstrumentsByTypeRequest) (*empty.Empty, error)
	GetInstrumentHistory(context.Context, *GetInstrumentHistoryRequest) (*GetInstrumentHistoryResponse, error)
	UploadDocument(context.Context, *UploadDocumentRequest) (*UploadDocumentResponse, error)
	GetApplicantInfoByExternalID(context.Context, *GetApplicantInfoByExternalIdRequest) (*GetApplicantInfoByExternalIdResponse, error)
	GetApplicantInfo(context.Context, *GetApplicantInfoRequest) (*GetApplicantInfoResponse, error)
	CreateApplicant(context.Context, *CreateApplicantRequest) (*CreateApplicantResponse, error)
	GetStockNews(context.Context, *GetStockNewsRequest) (*GetStockNewsResponse, error)
	RetrieveStoriesByIds(context.Context, *RetrieveStoriesByIdsRequests) (*RetrieveStoriesByIdsResponse, error)
	// KYC(Sumsub)
	GetKeyStats(context.Context, *GetKeyStatsRequest) (*GetKeyStatsResponse, error)
	GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error)
	GetAllSymbolId(context.Context, *empty.Empty) (*GetSymbolIdsResponse, error)
	// Favourite instrument(s)
	AddFavouriteInstrument(context.Context, *AddFavouriteInstrumentRequest) (*FavouriteInstrument, error)
	GetFavouriteInstruments(context.Context, *InvestorId) (*FavouriteInstrumentList, error)
	RemoveFromFavourite(context.Context, *FavouriteInstrument) (*FavouriteInstrument, error)
	IsInstrumentFavourite(context.Context, *FavouriteInstrument) (*IsInstrumentFavouriteResponse, error)
	mustEmbedUnimplementedInstrumentSeviceServer()
}

// UnimplementedInstrumentSeviceServer must be embedded to have forward compatible implementations.
type UnimplementedInstrumentSeviceServer struct {
}

func (UnimplementedInstrumentSeviceServer) GetAllExchanges(context.Context, *empty.Empty) (*GetExchangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllExchanges not implemented")
}
func (UnimplementedInstrumentSeviceServer) GetAllGroups(context.Context, *GetByIDRequest) (*GetGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGroups not implemented")
}
func (UnimplementedInstrumentSeviceServer) GetAllTypes(context.Context, *empty.Empty) (*GetTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTypes not implemented")
}
func (UnimplementedInstrumentSeviceServer) FilterInstruments(context.Context, *FilterInstrumentsRequest) (*FilterInstrumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterInstruments not implemented")
}
func (UnimplementedInstrumentSeviceServer) GetInstrumentByID(context.Context, *GetInstrumentByIDRequest) (*FixSymbol, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstrumentByID not implemented")
}
func (UnimplementedInstrumentSeviceServer) GetBussinessSummary(context.Context, *GetBussinessSummaryRequest) (*GetBussinessSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBussinessSummary not implemented")
}
func (UnimplementedInstrumentSeviceServer) GetGroupByID(context.Context, *GetByIDRequest) (*FixGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupByID not implemented")
}
func (UnimplementedInstrumentSeviceServer) GetExchangeByID(context.Context, *GetByIDRequest) (*FixExchangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangeByID not implemented")
}
func (UnimplementedInstrumentSeviceServer) GetExchangesByType(context.Context, *GetExchangesByTypeRequest) (*GetExchangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangesByType not implemented")
}
func (UnimplementedInstrumentSeviceServer) GetShortDetailsByStocks(context.Context, *GetShortDetailsByStocksRequest) (*GetShortDetailsByStocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortDetailsByStocks not implemented")
}
func (UnimplementedInstrumentSeviceServer) UpdateIcon(context.Context, *GetInstrumentsByTypeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIcon not implemented")
}
func (UnimplementedInstrumentSeviceServer) GetInstrumentHistory(context.Context, *GetInstrumentHistoryRequest) (*GetInstrumentHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstrumentHistory not implemented")
}
func (UnimplementedInstrumentSeviceServer) UploadDocument(context.Context, *UploadDocumentRequest) (*UploadDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDocument not implemented")
}
func (UnimplementedInstrumentSeviceServer) GetApplicantInfoByExternalID(context.Context, *GetApplicantInfoByExternalIdRequest) (*GetApplicantInfoByExternalIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicantInfoByExternalID not implemented")
}
func (UnimplementedInstrumentSeviceServer) GetApplicantInfo(context.Context, *GetApplicantInfoRequest) (*GetApplicantInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicantInfo not implemented")
}
func (UnimplementedInstrumentSeviceServer) CreateApplicant(context.Context, *CreateApplicantRequest) (*CreateApplicantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplicant not implemented")
}
func (UnimplementedInstrumentSeviceServer) GetStockNews(context.Context, *GetStockNewsRequest) (*GetStockNewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockNews not implemented")
}
func (UnimplementedInstrumentSeviceServer) RetrieveStoriesByIds(context.Context, *RetrieveStoriesByIdsRequests) (*RetrieveStoriesByIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStoriesByIds not implemented")
}
func (UnimplementedInstrumentSeviceServer) GetKeyStats(context.Context, *GetKeyStatsRequest) (*GetKeyStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyStats not implemented")
}
func (UnimplementedInstrumentSeviceServer) GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (UnimplementedInstrumentSeviceServer) GetAllSymbolId(context.Context, *empty.Empty) (*GetSymbolIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSymbolId not implemented")
}
func (UnimplementedInstrumentSeviceServer) AddFavouriteInstrument(context.Context, *AddFavouriteInstrumentRequest) (*FavouriteInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFavouriteInstrument not implemented")
}
func (UnimplementedInstrumentSeviceServer) GetFavouriteInstruments(context.Context, *InvestorId) (*FavouriteInstrumentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavouriteInstruments not implemented")
}
func (UnimplementedInstrumentSeviceServer) RemoveFromFavourite(context.Context, *FavouriteInstrument) (*FavouriteInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromFavourite not implemented")
}
func (UnimplementedInstrumentSeviceServer) IsInstrumentFavourite(context.Context, *FavouriteInstrument) (*IsInstrumentFavouriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsInstrumentFavourite not implemented")
}
func (UnimplementedInstrumentSeviceServer) mustEmbedUnimplementedInstrumentSeviceServer() {}

// UnsafeInstrumentSeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstrumentSeviceServer will
// result in compilation errors.
type UnsafeInstrumentSeviceServer interface {
	mustEmbedUnimplementedInstrumentSeviceServer()
}

func RegisterInstrumentSeviceServer(s grpc.ServiceRegistrar, srv InstrumentSeviceServer) {
	s.RegisterService(&InstrumentSevice_ServiceDesc, srv)
}

func _InstrumentSevice_GetAllExchanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentSeviceServer).GetAllExchanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument_service.InstrumentSevice/GetAllExchanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentSeviceServer).GetAllExchanges(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentSevice_GetAllGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentSeviceServer).GetAllGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument_service.InstrumentSevice/GetAllGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentSeviceServer).GetAllGroups(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentSevice_GetAllTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentSeviceServer).GetAllTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument_service.InstrumentSevice/GetAllTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentSeviceServer).GetAllTypes(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentSevice_FilterInstruments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterInstrumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentSeviceServer).FilterInstruments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument_service.InstrumentSevice/FilterInstruments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentSeviceServer).FilterInstruments(ctx, req.(*FilterInstrumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentSevice_GetInstrumentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstrumentByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentSeviceServer).GetInstrumentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument_service.InstrumentSevice/GetInstrumentByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentSeviceServer).GetInstrumentByID(ctx, req.(*GetInstrumentByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentSevice_GetBussinessSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBussinessSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentSeviceServer).GetBussinessSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument_service.InstrumentSevice/GetBussinessSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentSeviceServer).GetBussinessSummary(ctx, req.(*GetBussinessSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentSevice_GetGroupByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentSeviceServer).GetGroupByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument_service.InstrumentSevice/GetGroupByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentSeviceServer).GetGroupByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentSevice_GetExchangeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentSeviceServer).GetExchangeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument_service.InstrumentSevice/GetExchangeByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentSeviceServer).GetExchangeByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentSevice_GetExchangesByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangesByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentSeviceServer).GetExchangesByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument_service.InstrumentSevice/GetExchangesByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentSeviceServer).GetExchangesByType(ctx, req.(*GetExchangesByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentSevice_GetShortDetailsByStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortDetailsByStocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentSeviceServer).GetShortDetailsByStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument_service.InstrumentSevice/GetShortDetailsByStocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentSeviceServer).GetShortDetailsByStocks(ctx, req.(*GetShortDetailsByStocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentSevice_UpdateIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstrumentsByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentSeviceServer).UpdateIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument_service.InstrumentSevice/UpdateIcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentSeviceServer).UpdateIcon(ctx, req.(*GetInstrumentsByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentSevice_GetInstrumentHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstrumentHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentSeviceServer).GetInstrumentHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument_service.InstrumentSevice/GetInstrumentHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentSeviceServer).GetInstrumentHistory(ctx, req.(*GetInstrumentHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentSevice_UploadDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentSeviceServer).UploadDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument_service.InstrumentSevice/UploadDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentSeviceServer).UploadDocument(ctx, req.(*UploadDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentSevice_GetApplicantInfoByExternalID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicantInfoByExternalIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentSeviceServer).GetApplicantInfoByExternalID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument_service.InstrumentSevice/GetApplicantInfoByExternalID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentSeviceServer).GetApplicantInfoByExternalID(ctx, req.(*GetApplicantInfoByExternalIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentSevice_GetApplicantInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicantInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentSeviceServer).GetApplicantInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument_service.InstrumentSevice/GetApplicantInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentSeviceServer).GetApplicantInfo(ctx, req.(*GetApplicantInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentSevice_CreateApplicant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentSeviceServer).CreateApplicant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument_service.InstrumentSevice/CreateApplicant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentSeviceServer).CreateApplicant(ctx, req.(*CreateApplicantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentSevice_GetStockNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentSeviceServer).GetStockNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument_service.InstrumentSevice/GetStockNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentSeviceServer).GetStockNews(ctx, req.(*GetStockNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentSevice_RetrieveStoriesByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStoriesByIdsRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentSeviceServer).RetrieveStoriesByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument_service.InstrumentSevice/RetrieveStoriesByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentSeviceServer).RetrieveStoriesByIds(ctx, req.(*RetrieveStoriesByIdsRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentSevice_GetKeyStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentSeviceServer).GetKeyStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument_service.InstrumentSevice/GetKeyStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentSeviceServer).GetKeyStats(ctx, req.(*GetKeyStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentSevice_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentSeviceServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument_service.InstrumentSevice/GenerateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentSeviceServer).GenerateToken(ctx, req.(*GenerateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentSevice_GetAllSymbolId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentSeviceServer).GetAllSymbolId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument_service.InstrumentSevice/GetAllSymbolId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentSeviceServer).GetAllSymbolId(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentSevice_AddFavouriteInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFavouriteInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentSeviceServer).AddFavouriteInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument_service.InstrumentSevice/AddFavouriteInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentSeviceServer).AddFavouriteInstrument(ctx, req.(*AddFavouriteInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentSevice_GetFavouriteInstruments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvestorId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentSeviceServer).GetFavouriteInstruments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument_service.InstrumentSevice/GetFavouriteInstruments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentSeviceServer).GetFavouriteInstruments(ctx, req.(*InvestorId))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentSevice_RemoveFromFavourite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavouriteInstrument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentSeviceServer).RemoveFromFavourite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument_service.InstrumentSevice/RemoveFromFavourite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentSeviceServer).RemoveFromFavourite(ctx, req.(*FavouriteInstrument))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentSevice_IsInstrumentFavourite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavouriteInstrument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentSeviceServer).IsInstrumentFavourite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instrument_service.InstrumentSevice/IsInstrumentFavourite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentSeviceServer).IsInstrumentFavourite(ctx, req.(*FavouriteInstrument))
	}
	return interceptor(ctx, in, info, handler)
}

// InstrumentSevice_ServiceDesc is the grpc.ServiceDesc for InstrumentSevice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstrumentSevice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "instrument_service.InstrumentSevice",
	HandlerType: (*InstrumentSeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllExchanges",
			Handler:    _InstrumentSevice_GetAllExchanges_Handler,
		},
		{
			MethodName: "GetAllGroups",
			Handler:    _InstrumentSevice_GetAllGroups_Handler,
		},
		{
			MethodName: "GetAllTypes",
			Handler:    _InstrumentSevice_GetAllTypes_Handler,
		},
		{
			MethodName: "FilterInstruments",
			Handler:    _InstrumentSevice_FilterInstruments_Handler,
		},
		{
			MethodName: "GetInstrumentByID",
			Handler:    _InstrumentSevice_GetInstrumentByID_Handler,
		},
		{
			MethodName: "GetBussinessSummary",
			Handler:    _InstrumentSevice_GetBussinessSummary_Handler,
		},
		{
			MethodName: "GetGroupByID",
			Handler:    _InstrumentSevice_GetGroupByID_Handler,
		},
		{
			MethodName: "GetExchangeByID",
			Handler:    _InstrumentSevice_GetExchangeByID_Handler,
		},
		{
			MethodName: "GetExchangesByType",
			Handler:    _InstrumentSevice_GetExchangesByType_Handler,
		},
		{
			MethodName: "GetShortDetailsByStocks",
			Handler:    _InstrumentSevice_GetShortDetailsByStocks_Handler,
		},
		{
			MethodName: "UpdateIcon",
			Handler:    _InstrumentSevice_UpdateIcon_Handler,
		},
		{
			MethodName: "GetInstrumentHistory",
			Handler:    _InstrumentSevice_GetInstrumentHistory_Handler,
		},
		{
			MethodName: "UploadDocument",
			Handler:    _InstrumentSevice_UploadDocument_Handler,
		},
		{
			MethodName: "GetApplicantInfoByExternalID",
			Handler:    _InstrumentSevice_GetApplicantInfoByExternalID_Handler,
		},
		{
			MethodName: "GetApplicantInfo",
			Handler:    _InstrumentSevice_GetApplicantInfo_Handler,
		},
		{
			MethodName: "CreateApplicant",
			Handler:    _InstrumentSevice_CreateApplicant_Handler,
		},
		{
			MethodName: "GetStockNews",
			Handler:    _InstrumentSevice_GetStockNews_Handler,
		},
		{
			MethodName: "RetrieveStoriesByIds",
			Handler:    _InstrumentSevice_RetrieveStoriesByIds_Handler,
		},
		{
			MethodName: "GetKeyStats",
			Handler:    _InstrumentSevice_GetKeyStats_Handler,
		},
		{
			MethodName: "GenerateToken",
			Handler:    _InstrumentSevice_GenerateToken_Handler,
		},
		{
			MethodName: "GetAllSymbolId",
			Handler:    _InstrumentSevice_GetAllSymbolId_Handler,
		},
		{
			MethodName: "AddFavouriteInstrument",
			Handler:    _InstrumentSevice_AddFavouriteInstrument_Handler,
		},
		{
			MethodName: "GetFavouriteInstruments",
			Handler:    _InstrumentSevice_GetFavouriteInstruments_Handler,
		},
		{
			MethodName: "RemoveFromFavourite",
			Handler:    _InstrumentSevice_RemoveFromFavourite_Handler,
		},
		{
			MethodName: "IsInstrumentFavourite",
			Handler:    _InstrumentSevice_IsInstrumentFavourite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "instrument_service.proto",
}
