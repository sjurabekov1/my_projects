// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: billing_service.proto

package billing_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BillingServiceClient is the client API for BillingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingServiceClient interface {
	ExecOperation(ctx context.Context, in *ExecOperationRequest, opts ...grpc.CallOption) (*ExecOperationResponse, error)
	UpsertTaxPropery(ctx context.Context, in *TaxProperty, opts ...grpc.CallOption) (*TaxProperty, error)
	GetFirstTransactions(ctx context.Context, in *GetFirstTransactionsRequest, opts ...grpc.CallOption) (*GetFirstTransactionsResponse, error)
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	GetOperations(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetOperationsResponse, error)
	CalculateTax(ctx context.Context, in *CalculateTaxRequest, opts ...grpc.CallOption) (*CalculateTaxResponse, error)
	GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error)
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*Order, error)
	GetPurchasedStocks(ctx context.Context, in *GetPurchasedStockRequest, opts ...grpc.CallOption) (*GetPurchasedStocksResponse, error)
	GetInstrumentPurchaseStatus(ctx context.Context, in *GetInstrumentPurchaseStatusRequest, opts ...grpc.CallOption) (*GetInstrumentPurchaseStatusResponse, error)
	// Fix Order
	FixPlaceOrder(ctx context.Context, in *FixPlaceOrderRequest, opts ...grpc.CallOption) (*FixOrderResponse, error)
	FixCancelOrder(ctx context.Context, in *FixCancelOrderRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetPocketName(ctx context.Context, in *GetPocketNameRequest, opts ...grpc.CallOption) (*GetPocketNameResponse, error)
	UpsertComissionGroup(ctx context.Context, in *UpsertComissionGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpsertComissionGroupRelation(ctx context.Context, in *UpsertComissionGroupRelationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Analytics
	UpdateTransactionStatus(ctx context.Context, in *UpdateTransactionStatusRequest, opts ...grpc.CallOption) (*UpdateTransactionStatusReponse, error)
	SetSalesforceId(ctx context.Context, in *SetSalesforceIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Test(ctx context.Context, in *TestMsg, opts ...grpc.CallOption) (*Quote, error)
	GetTransactionsV2(ctx context.Context, in *GetTransactionsV2Request, opts ...grpc.CallOption) (*GetTransactionsV2Response, error)
	GetInvoices(ctx context.Context, in *GetInvoicesRequest, opts ...grpc.CallOption) (*GetInvoicesResponse, error)
	GetLastQuote(ctx context.Context, in *GetLastQuoteRequest, opts ...grpc.CallOption) (*GetLastQuoteResponse, error)
	GetLastQuoteMap(ctx context.Context, in *GetLastQuoteRequest, opts ...grpc.CallOption) (*GetLastQuoteMapResponse, error)
	GetAveragePriceOfSymbols(ctx context.Context, in *GetAveragePriceOfSymbolsRequest, opts ...grpc.CallOption) (*GetAveragePriceOfSymbolsResponse, error)
	GetTransactionsById(ctx context.Context, in *GetTransactionByIdRequest, opts ...grpc.CallOption) (*GetTransactionByIdResponse, error)
	GetCountOfInstrumentsInTransit(ctx context.Context, in *GetCountOfInstrumentsInTransitRequest, opts ...grpc.CallOption) (*GetCountOfInstrumentsInTransitResponse, error)
	GetMainGraphData(ctx context.Context, in *GetMainGraphDataRequest, opts ...grpc.CallOption) (*GetMainGraphDataResponse, error)
	GetMainGraph(ctx context.Context, in *GetMainGraphRequest, opts ...grpc.CallOption) (*GetInstrumentHistoryResponse, error)
	TestGetLastQuote(ctx context.Context, in *TestGetLastQuoteRequest, opts ...grpc.CallOption) (*TestGetLastQuoteResponse, error)
	GetWithdrawalAmount(ctx context.Context, in *GetWithdrawalAmountRequest, opts ...grpc.CallOption) (*GetWithdrawalAmountResponse, error)
	UpdateUserStock(ctx context.Context, in *UpdateUserStockRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CalculateGrowthPercentage(ctx context.Context, in *CalculateGrowthPercentageRequest, opts ...grpc.CallOption) (*CalculateGrowthPercentageResponse, error)
	CalculateGrowthPercentageBySymbol(ctx context.Context, in *CalculateGrowthPercentageRequest, opts ...grpc.CallOption) (*CalculateGrowthPercentageResponseBySymbol, error)
	CalculatePercentageBySymbol(ctx context.Context, in *CalculateGrowthPercentageRequest, opts ...grpc.CallOption) (*CalculatePercentageResponseBySymbol, error)
	UpsertBroker(ctx context.Context, in *UpsertBrokerRequest, opts ...grpc.CallOption) (*UpsertBrokerRequest, error)
	UpsertPartner(ctx context.Context, in *UpsertPartnerRequest, opts ...grpc.CallOption) (*UpsertPartnerRequest, error)
	InvestorBillingData(ctx context.Context, in *InvestorBillingDataRequest, opts ...grpc.CallOption) (*InvestorBillingDataResponse, error)
	CreateMainGraph(ctx context.Context, in *CreateMainGraphRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type billingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingServiceClient(cc grpc.ClientConnInterface) BillingServiceClient {
	return &billingServiceClient{cc}
}

func (c *billingServiceClient) ExecOperation(ctx context.Context, in *ExecOperationRequest, opts ...grpc.CallOption) (*ExecOperationResponse, error) {
	out := new(ExecOperationResponse)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/ExecOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) UpsertTaxPropery(ctx context.Context, in *TaxProperty, opts ...grpc.CallOption) (*TaxProperty, error) {
	out := new(TaxProperty)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/UpsertTaxPropery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetFirstTransactions(ctx context.Context, in *GetFirstTransactionsRequest, opts ...grpc.CallOption) (*GetFirstTransactionsResponse, error) {
	out := new(GetFirstTransactionsResponse)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/GetFirstTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetOperations(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetOperationsResponse, error) {
	out := new(GetOperationsResponse)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/GetOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) CalculateTax(ctx context.Context, in *CalculateTaxRequest, opts ...grpc.CallOption) (*CalculateTaxResponse, error) {
	out := new(CalculateTaxResponse)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/CalculateTax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error) {
	out := new(GetOrdersResponse)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/GetOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetPurchasedStocks(ctx context.Context, in *GetPurchasedStockRequest, opts ...grpc.CallOption) (*GetPurchasedStocksResponse, error) {
	out := new(GetPurchasedStocksResponse)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/GetPurchasedStocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetInstrumentPurchaseStatus(ctx context.Context, in *GetInstrumentPurchaseStatusRequest, opts ...grpc.CallOption) (*GetInstrumentPurchaseStatusResponse, error) {
	out := new(GetInstrumentPurchaseStatusResponse)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/GetInstrumentPurchaseStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) FixPlaceOrder(ctx context.Context, in *FixPlaceOrderRequest, opts ...grpc.CallOption) (*FixOrderResponse, error) {
	out := new(FixOrderResponse)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/FixPlaceOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) FixCancelOrder(ctx context.Context, in *FixCancelOrderRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/FixCancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetPocketName(ctx context.Context, in *GetPocketNameRequest, opts ...grpc.CallOption) (*GetPocketNameResponse, error) {
	out := new(GetPocketNameResponse)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/GetPocketName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) UpsertComissionGroup(ctx context.Context, in *UpsertComissionGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/UpsertComissionGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) UpsertComissionGroupRelation(ctx context.Context, in *UpsertComissionGroupRelationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/UpsertComissionGroupRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) UpdateTransactionStatus(ctx context.Context, in *UpdateTransactionStatusRequest, opts ...grpc.CallOption) (*UpdateTransactionStatusReponse, error) {
	out := new(UpdateTransactionStatusReponse)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/UpdateTransactionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) SetSalesforceId(ctx context.Context, in *SetSalesforceIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/SetSalesforceId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) Test(ctx context.Context, in *TestMsg, opts ...grpc.CallOption) (*Quote, error) {
	out := new(Quote)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetTransactionsV2(ctx context.Context, in *GetTransactionsV2Request, opts ...grpc.CallOption) (*GetTransactionsV2Response, error) {
	out := new(GetTransactionsV2Response)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/GetTransactionsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetInvoices(ctx context.Context, in *GetInvoicesRequest, opts ...grpc.CallOption) (*GetInvoicesResponse, error) {
	out := new(GetInvoicesResponse)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/GetInvoices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetLastQuote(ctx context.Context, in *GetLastQuoteRequest, opts ...grpc.CallOption) (*GetLastQuoteResponse, error) {
	out := new(GetLastQuoteResponse)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/GetLastQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetLastQuoteMap(ctx context.Context, in *GetLastQuoteRequest, opts ...grpc.CallOption) (*GetLastQuoteMapResponse, error) {
	out := new(GetLastQuoteMapResponse)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/GetLastQuoteMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetAveragePriceOfSymbols(ctx context.Context, in *GetAveragePriceOfSymbolsRequest, opts ...grpc.CallOption) (*GetAveragePriceOfSymbolsResponse, error) {
	out := new(GetAveragePriceOfSymbolsResponse)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/GetAveragePriceOfSymbols", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetTransactionsById(ctx context.Context, in *GetTransactionByIdRequest, opts ...grpc.CallOption) (*GetTransactionByIdResponse, error) {
	out := new(GetTransactionByIdResponse)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/GetTransactionsById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetCountOfInstrumentsInTransit(ctx context.Context, in *GetCountOfInstrumentsInTransitRequest, opts ...grpc.CallOption) (*GetCountOfInstrumentsInTransitResponse, error) {
	out := new(GetCountOfInstrumentsInTransitResponse)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/GetCountOfInstrumentsInTransit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetMainGraphData(ctx context.Context, in *GetMainGraphDataRequest, opts ...grpc.CallOption) (*GetMainGraphDataResponse, error) {
	out := new(GetMainGraphDataResponse)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/GetMainGraphData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetMainGraph(ctx context.Context, in *GetMainGraphRequest, opts ...grpc.CallOption) (*GetInstrumentHistoryResponse, error) {
	out := new(GetInstrumentHistoryResponse)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/GetMainGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) TestGetLastQuote(ctx context.Context, in *TestGetLastQuoteRequest, opts ...grpc.CallOption) (*TestGetLastQuoteResponse, error) {
	out := new(TestGetLastQuoteResponse)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/TestGetLastQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetWithdrawalAmount(ctx context.Context, in *GetWithdrawalAmountRequest, opts ...grpc.CallOption) (*GetWithdrawalAmountResponse, error) {
	out := new(GetWithdrawalAmountResponse)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/GetWithdrawalAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) UpdateUserStock(ctx context.Context, in *UpdateUserStockRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/UpdateUserStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) CalculateGrowthPercentage(ctx context.Context, in *CalculateGrowthPercentageRequest, opts ...grpc.CallOption) (*CalculateGrowthPercentageResponse, error) {
	out := new(CalculateGrowthPercentageResponse)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/CalculateGrowthPercentage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) CalculateGrowthPercentageBySymbol(ctx context.Context, in *CalculateGrowthPercentageRequest, opts ...grpc.CallOption) (*CalculateGrowthPercentageResponseBySymbol, error) {
	out := new(CalculateGrowthPercentageResponseBySymbol)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/CalculateGrowthPercentageBySymbol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) CalculatePercentageBySymbol(ctx context.Context, in *CalculateGrowthPercentageRequest, opts ...grpc.CallOption) (*CalculatePercentageResponseBySymbol, error) {
	out := new(CalculatePercentageResponseBySymbol)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/CalculatePercentageBySymbol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) UpsertBroker(ctx context.Context, in *UpsertBrokerRequest, opts ...grpc.CallOption) (*UpsertBrokerRequest, error) {
	out := new(UpsertBrokerRequest)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/UpsertBroker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) UpsertPartner(ctx context.Context, in *UpsertPartnerRequest, opts ...grpc.CallOption) (*UpsertPartnerRequest, error) {
	out := new(UpsertPartnerRequest)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/UpsertPartner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) InvestorBillingData(ctx context.Context, in *InvestorBillingDataRequest, opts ...grpc.CallOption) (*InvestorBillingDataResponse, error) {
	out := new(InvestorBillingDataResponse)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/InvestorBillingData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) CreateMainGraph(ctx context.Context, in *CreateMainGraphRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/billing_service.BillingService/CreateMainGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingServiceServer is the server API for BillingService service.
// All implementations must embed UnimplementedBillingServiceServer
// for forward compatibility
type BillingServiceServer interface {
	ExecOperation(context.Context, *ExecOperationRequest) (*ExecOperationResponse, error)
	UpsertTaxPropery(context.Context, *TaxProperty) (*TaxProperty, error)
	GetFirstTransactions(context.Context, *GetFirstTransactionsRequest) (*GetFirstTransactionsResponse, error)
	GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error)
	GetOperations(context.Context, *empty.Empty) (*GetOperationsResponse, error)
	CalculateTax(context.Context, *CalculateTaxRequest) (*CalculateTaxResponse, error)
	GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error)
	CreateOrder(context.Context, *CreateOrderRequest) (*Order, error)
	GetPurchasedStocks(context.Context, *GetPurchasedStockRequest) (*GetPurchasedStocksResponse, error)
	GetInstrumentPurchaseStatus(context.Context, *GetInstrumentPurchaseStatusRequest) (*GetInstrumentPurchaseStatusResponse, error)
	// Fix Order
	FixPlaceOrder(context.Context, *FixPlaceOrderRequest) (*FixOrderResponse, error)
	FixCancelOrder(context.Context, *FixCancelOrderRequest) (*empty.Empty, error)
	GetPocketName(context.Context, *GetPocketNameRequest) (*GetPocketNameResponse, error)
	UpsertComissionGroup(context.Context, *UpsertComissionGroupRequest) (*empty.Empty, error)
	UpsertComissionGroupRelation(context.Context, *UpsertComissionGroupRelationRequest) (*empty.Empty, error)
	// Analytics
	UpdateTransactionStatus(context.Context, *UpdateTransactionStatusRequest) (*UpdateTransactionStatusReponse, error)
	SetSalesforceId(context.Context, *SetSalesforceIdRequest) (*empty.Empty, error)
	Test(context.Context, *TestMsg) (*Quote, error)
	GetTransactionsV2(context.Context, *GetTransactionsV2Request) (*GetTransactionsV2Response, error)
	GetInvoices(context.Context, *GetInvoicesRequest) (*GetInvoicesResponse, error)
	GetLastQuote(context.Context, *GetLastQuoteRequest) (*GetLastQuoteResponse, error)
	GetLastQuoteMap(context.Context, *GetLastQuoteRequest) (*GetLastQuoteMapResponse, error)
	GetAveragePriceOfSymbols(context.Context, *GetAveragePriceOfSymbolsRequest) (*GetAveragePriceOfSymbolsResponse, error)
	GetTransactionsById(context.Context, *GetTransactionByIdRequest) (*GetTransactionByIdResponse, error)
	GetCountOfInstrumentsInTransit(context.Context, *GetCountOfInstrumentsInTransitRequest) (*GetCountOfInstrumentsInTransitResponse, error)
	GetMainGraphData(context.Context, *GetMainGraphDataRequest) (*GetMainGraphDataResponse, error)
	GetMainGraph(context.Context, *GetMainGraphRequest) (*GetInstrumentHistoryResponse, error)
	TestGetLastQuote(context.Context, *TestGetLastQuoteRequest) (*TestGetLastQuoteResponse, error)
	GetWithdrawalAmount(context.Context, *GetWithdrawalAmountRequest) (*GetWithdrawalAmountResponse, error)
	UpdateUserStock(context.Context, *UpdateUserStockRequest) (*empty.Empty, error)
	CalculateGrowthPercentage(context.Context, *CalculateGrowthPercentageRequest) (*CalculateGrowthPercentageResponse, error)
	CalculateGrowthPercentageBySymbol(context.Context, *CalculateGrowthPercentageRequest) (*CalculateGrowthPercentageResponseBySymbol, error)
	CalculatePercentageBySymbol(context.Context, *CalculateGrowthPercentageRequest) (*CalculatePercentageResponseBySymbol, error)
	UpsertBroker(context.Context, *UpsertBrokerRequest) (*UpsertBrokerRequest, error)
	UpsertPartner(context.Context, *UpsertPartnerRequest) (*UpsertPartnerRequest, error)
	InvestorBillingData(context.Context, *InvestorBillingDataRequest) (*InvestorBillingDataResponse, error)
	CreateMainGraph(context.Context, *CreateMainGraphRequest) (*empty.Empty, error)
	mustEmbedUnimplementedBillingServiceServer()
}

// UnimplementedBillingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBillingServiceServer struct {
}

func (UnimplementedBillingServiceServer) ExecOperation(context.Context, *ExecOperationRequest) (*ExecOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecOperation not implemented")
}
func (UnimplementedBillingServiceServer) UpsertTaxPropery(context.Context, *TaxProperty) (*TaxProperty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertTaxPropery not implemented")
}
func (UnimplementedBillingServiceServer) GetFirstTransactions(context.Context, *GetFirstTransactionsRequest) (*GetFirstTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFirstTransactions not implemented")
}
func (UnimplementedBillingServiceServer) GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedBillingServiceServer) GetOperations(context.Context, *empty.Empty) (*GetOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperations not implemented")
}
func (UnimplementedBillingServiceServer) CalculateTax(context.Context, *CalculateTaxRequest) (*CalculateTaxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateTax not implemented")
}
func (UnimplementedBillingServiceServer) GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedBillingServiceServer) CreateOrder(context.Context, *CreateOrderRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedBillingServiceServer) GetPurchasedStocks(context.Context, *GetPurchasedStockRequest) (*GetPurchasedStocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchasedStocks not implemented")
}
func (UnimplementedBillingServiceServer) GetInstrumentPurchaseStatus(context.Context, *GetInstrumentPurchaseStatusRequest) (*GetInstrumentPurchaseStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstrumentPurchaseStatus not implemented")
}
func (UnimplementedBillingServiceServer) FixPlaceOrder(context.Context, *FixPlaceOrderRequest) (*FixOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FixPlaceOrder not implemented")
}
func (UnimplementedBillingServiceServer) FixCancelOrder(context.Context, *FixCancelOrderRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FixCancelOrder not implemented")
}
func (UnimplementedBillingServiceServer) GetPocketName(context.Context, *GetPocketNameRequest) (*GetPocketNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPocketName not implemented")
}
func (UnimplementedBillingServiceServer) UpsertComissionGroup(context.Context, *UpsertComissionGroupRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertComissionGroup not implemented")
}
func (UnimplementedBillingServiceServer) UpsertComissionGroupRelation(context.Context, *UpsertComissionGroupRelationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertComissionGroupRelation not implemented")
}
func (UnimplementedBillingServiceServer) UpdateTransactionStatus(context.Context, *UpdateTransactionStatusRequest) (*UpdateTransactionStatusReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransactionStatus not implemented")
}
func (UnimplementedBillingServiceServer) SetSalesforceId(context.Context, *SetSalesforceIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSalesforceId not implemented")
}
func (UnimplementedBillingServiceServer) Test(context.Context, *TestMsg) (*Quote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedBillingServiceServer) GetTransactionsV2(context.Context, *GetTransactionsV2Request) (*GetTransactionsV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsV2 not implemented")
}
func (UnimplementedBillingServiceServer) GetInvoices(context.Context, *GetInvoicesRequest) (*GetInvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoices not implemented")
}
func (UnimplementedBillingServiceServer) GetLastQuote(context.Context, *GetLastQuoteRequest) (*GetLastQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastQuote not implemented")
}
func (UnimplementedBillingServiceServer) GetLastQuoteMap(context.Context, *GetLastQuoteRequest) (*GetLastQuoteMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastQuoteMap not implemented")
}
func (UnimplementedBillingServiceServer) GetAveragePriceOfSymbols(context.Context, *GetAveragePriceOfSymbolsRequest) (*GetAveragePriceOfSymbolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAveragePriceOfSymbols not implemented")
}
func (UnimplementedBillingServiceServer) GetTransactionsById(context.Context, *GetTransactionByIdRequest) (*GetTransactionByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsById not implemented")
}
func (UnimplementedBillingServiceServer) GetCountOfInstrumentsInTransit(context.Context, *GetCountOfInstrumentsInTransitRequest) (*GetCountOfInstrumentsInTransitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountOfInstrumentsInTransit not implemented")
}
func (UnimplementedBillingServiceServer) GetMainGraphData(context.Context, *GetMainGraphDataRequest) (*GetMainGraphDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMainGraphData not implemented")
}
func (UnimplementedBillingServiceServer) GetMainGraph(context.Context, *GetMainGraphRequest) (*GetInstrumentHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMainGraph not implemented")
}
func (UnimplementedBillingServiceServer) TestGetLastQuote(context.Context, *TestGetLastQuoteRequest) (*TestGetLastQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestGetLastQuote not implemented")
}
func (UnimplementedBillingServiceServer) GetWithdrawalAmount(context.Context, *GetWithdrawalAmountRequest) (*GetWithdrawalAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawalAmount not implemented")
}
func (UnimplementedBillingServiceServer) UpdateUserStock(context.Context, *UpdateUserStockRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserStock not implemented")
}
func (UnimplementedBillingServiceServer) CalculateGrowthPercentage(context.Context, *CalculateGrowthPercentageRequest) (*CalculateGrowthPercentageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateGrowthPercentage not implemented")
}
func (UnimplementedBillingServiceServer) CalculateGrowthPercentageBySymbol(context.Context, *CalculateGrowthPercentageRequest) (*CalculateGrowthPercentageResponseBySymbol, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateGrowthPercentageBySymbol not implemented")
}
func (UnimplementedBillingServiceServer) CalculatePercentageBySymbol(context.Context, *CalculateGrowthPercentageRequest) (*CalculatePercentageResponseBySymbol, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculatePercentageBySymbol not implemented")
}
func (UnimplementedBillingServiceServer) UpsertBroker(context.Context, *UpsertBrokerRequest) (*UpsertBrokerRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertBroker not implemented")
}
func (UnimplementedBillingServiceServer) UpsertPartner(context.Context, *UpsertPartnerRequest) (*UpsertPartnerRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertPartner not implemented")
}
func (UnimplementedBillingServiceServer) InvestorBillingData(context.Context, *InvestorBillingDataRequest) (*InvestorBillingDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvestorBillingData not implemented")
}
func (UnimplementedBillingServiceServer) CreateMainGraph(context.Context, *CreateMainGraphRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMainGraph not implemented")
}
func (UnimplementedBillingServiceServer) mustEmbedUnimplementedBillingServiceServer() {}

// UnsafeBillingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingServiceServer will
// result in compilation errors.
type UnsafeBillingServiceServer interface {
	mustEmbedUnimplementedBillingServiceServer()
}

func RegisterBillingServiceServer(s grpc.ServiceRegistrar, srv BillingServiceServer) {
	s.RegisterService(&BillingService_ServiceDesc, srv)
}

func _BillingService_ExecOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).ExecOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/ExecOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).ExecOperation(ctx, req.(*ExecOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_UpsertTaxPropery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaxProperty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).UpsertTaxPropery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/UpsertTaxPropery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).UpsertTaxPropery(ctx, req.(*TaxProperty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetFirstTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFirstTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetFirstTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/GetFirstTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetFirstTransactions(ctx, req.(*GetFirstTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/GetOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetOperations(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_CalculateTax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateTaxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).CalculateTax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/CalculateTax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).CalculateTax(ctx, req.(*CalculateTaxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/GetOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetOrders(ctx, req.(*GetOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetPurchasedStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPurchasedStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetPurchasedStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/GetPurchasedStocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetPurchasedStocks(ctx, req.(*GetPurchasedStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetInstrumentPurchaseStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstrumentPurchaseStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetInstrumentPurchaseStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/GetInstrumentPurchaseStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetInstrumentPurchaseStatus(ctx, req.(*GetInstrumentPurchaseStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_FixPlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FixPlaceOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).FixPlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/FixPlaceOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).FixPlaceOrder(ctx, req.(*FixPlaceOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_FixCancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FixCancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).FixCancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/FixCancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).FixCancelOrder(ctx, req.(*FixCancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetPocketName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPocketNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetPocketName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/GetPocketName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetPocketName(ctx, req.(*GetPocketNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_UpsertComissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertComissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).UpsertComissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/UpsertComissionGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).UpsertComissionGroup(ctx, req.(*UpsertComissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_UpsertComissionGroupRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertComissionGroupRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).UpsertComissionGroupRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/UpsertComissionGroupRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).UpsertComissionGroupRelation(ctx, req.(*UpsertComissionGroupRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_UpdateTransactionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransactionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).UpdateTransactionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/UpdateTransactionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).UpdateTransactionStatus(ctx, req.(*UpdateTransactionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_SetSalesforceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSalesforceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).SetSalesforceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/SetSalesforceId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).SetSalesforceId(ctx, req.(*SetSalesforceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).Test(ctx, req.(*TestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetTransactionsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetTransactionsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/GetTransactionsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetTransactionsV2(ctx, req.(*GetTransactionsV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/GetInvoices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetInvoices(ctx, req.(*GetInvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetLastQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetLastQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/GetLastQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetLastQuote(ctx, req.(*GetLastQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetLastQuoteMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetLastQuoteMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/GetLastQuoteMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetLastQuoteMap(ctx, req.(*GetLastQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetAveragePriceOfSymbols_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAveragePriceOfSymbolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetAveragePriceOfSymbols(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/GetAveragePriceOfSymbols",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetAveragePriceOfSymbols(ctx, req.(*GetAveragePriceOfSymbolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetTransactionsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetTransactionsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/GetTransactionsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetTransactionsById(ctx, req.(*GetTransactionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetCountOfInstrumentsInTransit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountOfInstrumentsInTransitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetCountOfInstrumentsInTransit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/GetCountOfInstrumentsInTransit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetCountOfInstrumentsInTransit(ctx, req.(*GetCountOfInstrumentsInTransitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetMainGraphData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMainGraphDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetMainGraphData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/GetMainGraphData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetMainGraphData(ctx, req.(*GetMainGraphDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetMainGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMainGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetMainGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/GetMainGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetMainGraph(ctx, req.(*GetMainGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_TestGetLastQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestGetLastQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).TestGetLastQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/TestGetLastQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).TestGetLastQuote(ctx, req.(*TestGetLastQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetWithdrawalAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawalAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetWithdrawalAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/GetWithdrawalAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetWithdrawalAmount(ctx, req.(*GetWithdrawalAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_UpdateUserStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).UpdateUserStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/UpdateUserStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).UpdateUserStock(ctx, req.(*UpdateUserStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_CalculateGrowthPercentage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateGrowthPercentageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).CalculateGrowthPercentage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/CalculateGrowthPercentage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).CalculateGrowthPercentage(ctx, req.(*CalculateGrowthPercentageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_CalculateGrowthPercentageBySymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateGrowthPercentageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).CalculateGrowthPercentageBySymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/CalculateGrowthPercentageBySymbol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).CalculateGrowthPercentageBySymbol(ctx, req.(*CalculateGrowthPercentageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_CalculatePercentageBySymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateGrowthPercentageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).CalculatePercentageBySymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/CalculatePercentageBySymbol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).CalculatePercentageBySymbol(ctx, req.(*CalculateGrowthPercentageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_UpsertBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertBrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).UpsertBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/UpsertBroker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).UpsertBroker(ctx, req.(*UpsertBrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_UpsertPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertPartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).UpsertPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/UpsertPartner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).UpsertPartner(ctx, req.(*UpsertPartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_InvestorBillingData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvestorBillingDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).InvestorBillingData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/InvestorBillingData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).InvestorBillingData(ctx, req.(*InvestorBillingDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_CreateMainGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMainGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).CreateMainGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing_service.BillingService/CreateMainGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).CreateMainGraph(ctx, req.(*CreateMainGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingService_ServiceDesc is the grpc.ServiceDesc for BillingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "billing_service.BillingService",
	HandlerType: (*BillingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecOperation",
			Handler:    _BillingService_ExecOperation_Handler,
		},
		{
			MethodName: "UpsertTaxPropery",
			Handler:    _BillingService_UpsertTaxPropery_Handler,
		},
		{
			MethodName: "GetFirstTransactions",
			Handler:    _BillingService_GetFirstTransactions_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _BillingService_GetTransaction_Handler,
		},
		{
			MethodName: "GetOperations",
			Handler:    _BillingService_GetOperations_Handler,
		},
		{
			MethodName: "CalculateTax",
			Handler:    _BillingService_CalculateTax_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _BillingService_GetOrders_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _BillingService_CreateOrder_Handler,
		},
		{
			MethodName: "GetPurchasedStocks",
			Handler:    _BillingService_GetPurchasedStocks_Handler,
		},
		{
			MethodName: "GetInstrumentPurchaseStatus",
			Handler:    _BillingService_GetInstrumentPurchaseStatus_Handler,
		},
		{
			MethodName: "FixPlaceOrder",
			Handler:    _BillingService_FixPlaceOrder_Handler,
		},
		{
			MethodName: "FixCancelOrder",
			Handler:    _BillingService_FixCancelOrder_Handler,
		},
		{
			MethodName: "GetPocketName",
			Handler:    _BillingService_GetPocketName_Handler,
		},
		{
			MethodName: "UpsertComissionGroup",
			Handler:    _BillingService_UpsertComissionGroup_Handler,
		},
		{
			MethodName: "UpsertComissionGroupRelation",
			Handler:    _BillingService_UpsertComissionGroupRelation_Handler,
		},
		{
			MethodName: "UpdateTransactionStatus",
			Handler:    _BillingService_UpdateTransactionStatus_Handler,
		},
		{
			MethodName: "SetSalesforceId",
			Handler:    _BillingService_SetSalesforceId_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _BillingService_Test_Handler,
		},
		{
			MethodName: "GetTransactionsV2",
			Handler:    _BillingService_GetTransactionsV2_Handler,
		},
		{
			MethodName: "GetInvoices",
			Handler:    _BillingService_GetInvoices_Handler,
		},
		{
			MethodName: "GetLastQuote",
			Handler:    _BillingService_GetLastQuote_Handler,
		},
		{
			MethodName: "GetLastQuoteMap",
			Handler:    _BillingService_GetLastQuoteMap_Handler,
		},
		{
			MethodName: "GetAveragePriceOfSymbols",
			Handler:    _BillingService_GetAveragePriceOfSymbols_Handler,
		},
		{
			MethodName: "GetTransactionsById",
			Handler:    _BillingService_GetTransactionsById_Handler,
		},
		{
			MethodName: "GetCountOfInstrumentsInTransit",
			Handler:    _BillingService_GetCountOfInstrumentsInTransit_Handler,
		},
		{
			MethodName: "GetMainGraphData",
			Handler:    _BillingService_GetMainGraphData_Handler,
		},
		{
			MethodName: "GetMainGraph",
			Handler:    _BillingService_GetMainGraph_Handler,
		},
		{
			MethodName: "TestGetLastQuote",
			Handler:    _BillingService_TestGetLastQuote_Handler,
		},
		{
			MethodName: "GetWithdrawalAmount",
			Handler:    _BillingService_GetWithdrawalAmount_Handler,
		},
		{
			MethodName: "UpdateUserStock",
			Handler:    _BillingService_UpdateUserStock_Handler,
		},
		{
			MethodName: "CalculateGrowthPercentage",
			Handler:    _BillingService_CalculateGrowthPercentage_Handler,
		},
		{
			MethodName: "CalculateGrowthPercentageBySymbol",
			Handler:    _BillingService_CalculateGrowthPercentageBySymbol_Handler,
		},
		{
			MethodName: "CalculatePercentageBySymbol",
			Handler:    _BillingService_CalculatePercentageBySymbol_Handler,
		},
		{
			MethodName: "UpsertBroker",
			Handler:    _BillingService_UpsertBroker_Handler,
		},
		{
			MethodName: "UpsertPartner",
			Handler:    _BillingService_UpsertPartner_Handler,
		},
		{
			MethodName: "InvestorBillingData",
			Handler:    _BillingService_InvestorBillingData_Handler,
		},
		{
			MethodName: "CreateMainGraph",
			Handler:    _BillingService_CreateMainGraph_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing_service.proto",
}
