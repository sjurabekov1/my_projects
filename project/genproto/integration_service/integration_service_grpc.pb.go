// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: integration_service.proto

package integration_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IntegrationSeviceClient is the client API for IntegrationSevice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntegrationSeviceClient interface {
	// Instrument
	GetAllExchanges(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetExchangesResponse, error)
	GetAllGroups(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetGroupsResponse, error)
	GetAllTypes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetTypesResponse, error)
	GetGroupByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*FixGroupResponse, error)
	GetExchangeByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*FixExchangesResponse, error)
	GetExchangesByType(ctx context.Context, in *GetExchangesByTypeRequest, opts ...grpc.CallOption) (*GetExchangesResponse, error)
	GetShortDetailsByStocks(ctx context.Context, in *GetShortDetailsByStocksRequest, opts ...grpc.CallOption) (*GetShortDetailsByStocksResponse, error)
	UpdateIcon(ctx context.Context, in *GetInstrumentsByTypeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	FilterInstruments(ctx context.Context, in *FilterInstrumentsRequest, opts ...grpc.CallOption) (*FilterInstrumentsResponse, error)
	GetInstrumentByID(ctx context.Context, in *GetInstrumentByIDRequest, opts ...grpc.CallOption) (*FixSymbol, error)
	GetInstrumentHistory(ctx context.Context, in *GetInstrumentHistoryRequest, opts ...grpc.CallOption) (*GetInstrumentHistoryResponse, error)
	GetAllSymbolId(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetSymbolIdsResponse, error)
	FilteredInstruments(ctx context.Context, in *FilterInstrumentsRequest, opts ...grpc.CallOption) (*FilterInstrumentsResponse, error)
	// Instrument - Musaffo
	GetMusaffoDetails(ctx context.Context, in *GetMusaffoDetailsRequest, opts ...grpc.CallOption) (*GetMusaffoDetailsResponse, error)
	// Instrument - Refinitiv
	GetKeyStats(ctx context.Context, in *GetKeyStatsRequest, opts ...grpc.CallOption) (*GetKeyStatsResponse, error)
	GetBussinessSummary(ctx context.Context, in *GetBussinessSummaryRequest, opts ...grpc.CallOption) (*GetBussinessSummaryResponse, error)
	GetKeyStatsNew(ctx context.Context, in *GetKeyStatsRequest, opts ...grpc.CallOption) (*GetKeyStatsNewResponse, error)
	// KYC(Sumsub)
	GetApplicantInfoByExternalID(ctx context.Context, in *GetApplicantInfoByExternalIdRequest, opts ...grpc.CallOption) (*GetApplicantInfoByExternalIdResponse, error)
	CreateApplicant(ctx context.Context, in *CreateApplicantRequest, opts ...grpc.CallOption) (*CreateApplicantResponse, error)
	GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error)
	UploadDocument(ctx context.Context, in *UploadDocumentRequest, opts ...grpc.CallOption) (*UploadDocumentResponse, error)
	GetApplicantDocs(ctx context.Context, in *GetApplicantDocsRequest, opts ...grpc.CallOption) (*GetApplicantDocsResponse, error)
	GetApplicantDocsStatus(ctx context.Context, in *GetApplicantDocsStatusRequest, opts ...grpc.CallOption) (*GetApplicantDocsStatusResponse, error)
	GetApprovedInvestorsDocIds(ctx context.Context, in *GetApplicantDocsStatusRequest, opts ...grpc.CallOption) (*GetApplicantDocsStatusResponse, error)
	UpdateKYCStatus(ctx context.Context, in *UpdateKYCStatusRequest, opts ...grpc.CallOption) (*UpdateKYCStatusResponse, error)
	// News - Refinitiv
	RetrieveStoriesByIds(ctx context.Context, in *RetrieveStoriesByIdsRequests, opts ...grpc.CallOption) (*RetrieveStoriesByIdsResponse, error)
	GetStockNews(ctx context.Context, in *GetStockNewsRequest, opts ...grpc.CallOption) (*GetStockNewsResponse, error)
	// Twilio
	InvestorLoginByPhone(ctx context.Context, in *InvestorLoginByPhoneRequest, opts ...grpc.CallOption) (*InvestorLoginByPhoneResponse, error)
	InvestorLoginVerifyByPhone(ctx context.Context, in *InvestorLoginVerifyRequest, opts ...grpc.CallOption) (*InvestorLoginVerifyResponse, error)
	// Favourite instrument(s)
	AddFavouriteInstrument(ctx context.Context, in *AddFavouriteInstrumentRequest, opts ...grpc.CallOption) (*FavouriteInstrument, error)
	GetFavouriteInstruments(ctx context.Context, in *InvestorId, opts ...grpc.CallOption) (*FavouriteInstrumentList, error)
	RemoveFromFavourite(ctx context.Context, in *FavouriteInstrument, opts ...grpc.CallOption) (*FavouriteInstrument, error)
	IsInstrumentFavourite(ctx context.Context, in *FavouriteInstrument, opts ...grpc.CallOption) (*IsInstrumentFavouriteResponse, error)
	// Webhook instrument
	UpdateInstrumentMusaffoFromSalesforce(ctx context.Context, in *UpdateInstrumentMusaffoFromSalesforceRequest, opts ...grpc.CallOption) (*UpdateInstrumentMusaffoFromSalesforceResponse, error)
	// Last checked
	GetLastCheckedInstruments(ctx context.Context, in *GetLastCheckedInstrumentsRequest, opts ...grpc.CallOption) (*FilterInstrumentsResponse, error)
	UpdateInstrumentRefenitiveFromSalesforce(ctx context.Context, in *UpdateInstrumentRefenitiveFromSalesforceRequest, opts ...grpc.CallOption) (*UpdateInstrumentRefenitiveFromSalesforceResponse, error)
	UpdateRatiosReport(ctx context.Context, in *UpdateRatiosReportRequst, opts ...grpc.CallOption) (*UpdateInstrumentRefenitiveFromSalesforceResponse, error)
	UpsertInstrument(ctx context.Context, in *FixSymbol, opts ...grpc.CallOption) (*FixSymbol, error)
	GetInstrumentRequiredFields(ctx context.Context, in *GetInstrumentRequiredFieldsRequest, opts ...grpc.CallOption) (*GetInstrumentRequiredFieldsResponse, error)
	CreateInvestorAlert(ctx context.Context, in *CreateInvestorAlertRequest, opts ...grpc.CallOption) (*CreateInvestorAlertResponse, error)
	GetInvestorAlerts(ctx context.Context, in *GetInvestorAlertsRequest, opts ...grpc.CallOption) (*GetInvestorAlertsReponse, error)
	GetInvestorOneAlert(ctx context.Context, in *GetInvestorOneAlertRequest, opts ...grpc.CallOption) (*GetInvestorOneAlertResponse, error)
	DeleteInvestorAlert(ctx context.Context, in *DeleteInvestorAlertRequest, opts ...grpc.CallOption) (*DeleteInvestorAlertResponse, error)
	UpdateInvestorAlert(ctx context.Context, in *UpdateInvestorAlertRequest, opts ...grpc.CallOption) (*UpdateInvestorAlertResponse, error)
	GetInstrumentNameById(ctx context.Context, in *GetInstrumentNameByIdRequest, opts ...grpc.CallOption) (*GetInstrumentNameByIdResponse, error)
	GetInvestorInstrumentAlert(ctx context.Context, in *GetInvestorInstrumentAlertRequest, opts ...grpc.CallOption) (*GetInvestorInstrumentAlertResponse, error)
	GetStreetEvents(ctx context.Context, in *GetStreetEventsRequest, opts ...grpc.CallOption) (*GetStreetEventsResponse, error)
	GetInstrumentByISID(ctx context.Context, in *GetInstrumentByISIDRequest, opts ...grpc.CallOption) (*FixSymbol, error)
	InsertSumsubComments(ctx context.Context, in *InsertSumsubCommentsRequest, opts ...grpc.CallOption) (*InsertSumsubCommentsResponse, error)
	CreateUsersFromWeb(ctx context.Context, in *CreateUsersFromWebRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CheckEmail(ctx context.Context, in *CheckEmailRequest, opts ...grpc.CallOption) (*CheckEmailResponse, error)
	GetLevelUpEmailTemplate(ctx context.Context, in *GetLevelUpEmailTemplateRequest, opts ...grpc.CallOption) (*GetLevelUpEmailTemplateResponse, error)
	UpdateCompaileQuestions(ctx context.Context, in *UpdateCompaileQuestionsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateUserFromWeb(ctx context.Context, in *UpdateUserFromWebRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Createcommissionrule(ctx context.Context, in *CommissionRule, opts ...grpc.CallOption) (*empty.Empty, error)
	Deletecommissionrule(ctx context.Context, in *DeletecommissionruleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetUserCommissionrule(ctx context.Context, in *GetUserCommissionruleRequest, opts ...grpc.CallOption) (*CommissionRule, error)
	GetInstrumentIndustries(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetIndustriesResponse, error)
}

type integrationSeviceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegrationSeviceClient(cc grpc.ClientConnInterface) IntegrationSeviceClient {
	return &integrationSeviceClient{cc}
}

func (c *integrationSeviceClient) GetAllExchanges(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetExchangesResponse, error) {
	out := new(GetExchangesResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetAllExchanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetAllGroups(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetGroupsResponse, error) {
	out := new(GetGroupsResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetAllGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetAllTypes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetTypesResponse, error) {
	out := new(GetTypesResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetAllTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetGroupByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*FixGroupResponse, error) {
	out := new(FixGroupResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetGroupByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetExchangeByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*FixExchangesResponse, error) {
	out := new(FixExchangesResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetExchangeByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetExchangesByType(ctx context.Context, in *GetExchangesByTypeRequest, opts ...grpc.CallOption) (*GetExchangesResponse, error) {
	out := new(GetExchangesResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetExchangesByType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetShortDetailsByStocks(ctx context.Context, in *GetShortDetailsByStocksRequest, opts ...grpc.CallOption) (*GetShortDetailsByStocksResponse, error) {
	out := new(GetShortDetailsByStocksResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetShortDetailsByStocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) UpdateIcon(ctx context.Context, in *GetInstrumentsByTypeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/UpdateIcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) FilterInstruments(ctx context.Context, in *FilterInstrumentsRequest, opts ...grpc.CallOption) (*FilterInstrumentsResponse, error) {
	out := new(FilterInstrumentsResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/FilterInstruments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetInstrumentByID(ctx context.Context, in *GetInstrumentByIDRequest, opts ...grpc.CallOption) (*FixSymbol, error) {
	out := new(FixSymbol)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetInstrumentByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetInstrumentHistory(ctx context.Context, in *GetInstrumentHistoryRequest, opts ...grpc.CallOption) (*GetInstrumentHistoryResponse, error) {
	out := new(GetInstrumentHistoryResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetInstrumentHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetAllSymbolId(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetSymbolIdsResponse, error) {
	out := new(GetSymbolIdsResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetAllSymbolId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) FilteredInstruments(ctx context.Context, in *FilterInstrumentsRequest, opts ...grpc.CallOption) (*FilterInstrumentsResponse, error) {
	out := new(FilterInstrumentsResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/FilteredInstruments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetMusaffoDetails(ctx context.Context, in *GetMusaffoDetailsRequest, opts ...grpc.CallOption) (*GetMusaffoDetailsResponse, error) {
	out := new(GetMusaffoDetailsResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetMusaffoDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetKeyStats(ctx context.Context, in *GetKeyStatsRequest, opts ...grpc.CallOption) (*GetKeyStatsResponse, error) {
	out := new(GetKeyStatsResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetKeyStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetBussinessSummary(ctx context.Context, in *GetBussinessSummaryRequest, opts ...grpc.CallOption) (*GetBussinessSummaryResponse, error) {
	out := new(GetBussinessSummaryResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetBussinessSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetKeyStatsNew(ctx context.Context, in *GetKeyStatsRequest, opts ...grpc.CallOption) (*GetKeyStatsNewResponse, error) {
	out := new(GetKeyStatsNewResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetKeyStatsNew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetApplicantInfoByExternalID(ctx context.Context, in *GetApplicantInfoByExternalIdRequest, opts ...grpc.CallOption) (*GetApplicantInfoByExternalIdResponse, error) {
	out := new(GetApplicantInfoByExternalIdResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetApplicantInfoByExternalID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) CreateApplicant(ctx context.Context, in *CreateApplicantRequest, opts ...grpc.CallOption) (*CreateApplicantResponse, error) {
	out := new(CreateApplicantResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/CreateApplicant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error) {
	out := new(GenerateTokenResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GenerateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) UploadDocument(ctx context.Context, in *UploadDocumentRequest, opts ...grpc.CallOption) (*UploadDocumentResponse, error) {
	out := new(UploadDocumentResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/UploadDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetApplicantDocs(ctx context.Context, in *GetApplicantDocsRequest, opts ...grpc.CallOption) (*GetApplicantDocsResponse, error) {
	out := new(GetApplicantDocsResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetApplicantDocs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetApplicantDocsStatus(ctx context.Context, in *GetApplicantDocsStatusRequest, opts ...grpc.CallOption) (*GetApplicantDocsStatusResponse, error) {
	out := new(GetApplicantDocsStatusResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetApplicantDocsStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetApprovedInvestorsDocIds(ctx context.Context, in *GetApplicantDocsStatusRequest, opts ...grpc.CallOption) (*GetApplicantDocsStatusResponse, error) {
	out := new(GetApplicantDocsStatusResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetApprovedInvestorsDocIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) UpdateKYCStatus(ctx context.Context, in *UpdateKYCStatusRequest, opts ...grpc.CallOption) (*UpdateKYCStatusResponse, error) {
	out := new(UpdateKYCStatusResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/UpdateKYCStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) RetrieveStoriesByIds(ctx context.Context, in *RetrieveStoriesByIdsRequests, opts ...grpc.CallOption) (*RetrieveStoriesByIdsResponse, error) {
	out := new(RetrieveStoriesByIdsResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/RetrieveStoriesByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetStockNews(ctx context.Context, in *GetStockNewsRequest, opts ...grpc.CallOption) (*GetStockNewsResponse, error) {
	out := new(GetStockNewsResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetStockNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) InvestorLoginByPhone(ctx context.Context, in *InvestorLoginByPhoneRequest, opts ...grpc.CallOption) (*InvestorLoginByPhoneResponse, error) {
	out := new(InvestorLoginByPhoneResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/InvestorLoginByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) InvestorLoginVerifyByPhone(ctx context.Context, in *InvestorLoginVerifyRequest, opts ...grpc.CallOption) (*InvestorLoginVerifyResponse, error) {
	out := new(InvestorLoginVerifyResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/InvestorLoginVerifyByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) AddFavouriteInstrument(ctx context.Context, in *AddFavouriteInstrumentRequest, opts ...grpc.CallOption) (*FavouriteInstrument, error) {
	out := new(FavouriteInstrument)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/AddFavouriteInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetFavouriteInstruments(ctx context.Context, in *InvestorId, opts ...grpc.CallOption) (*FavouriteInstrumentList, error) {
	out := new(FavouriteInstrumentList)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetFavouriteInstruments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) RemoveFromFavourite(ctx context.Context, in *FavouriteInstrument, opts ...grpc.CallOption) (*FavouriteInstrument, error) {
	out := new(FavouriteInstrument)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/RemoveFromFavourite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) IsInstrumentFavourite(ctx context.Context, in *FavouriteInstrument, opts ...grpc.CallOption) (*IsInstrumentFavouriteResponse, error) {
	out := new(IsInstrumentFavouriteResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/IsInstrumentFavourite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) UpdateInstrumentMusaffoFromSalesforce(ctx context.Context, in *UpdateInstrumentMusaffoFromSalesforceRequest, opts ...grpc.CallOption) (*UpdateInstrumentMusaffoFromSalesforceResponse, error) {
	out := new(UpdateInstrumentMusaffoFromSalesforceResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/UpdateInstrumentMusaffoFromSalesforce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetLastCheckedInstruments(ctx context.Context, in *GetLastCheckedInstrumentsRequest, opts ...grpc.CallOption) (*FilterInstrumentsResponse, error) {
	out := new(FilterInstrumentsResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetLastCheckedInstruments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) UpdateInstrumentRefenitiveFromSalesforce(ctx context.Context, in *UpdateInstrumentRefenitiveFromSalesforceRequest, opts ...grpc.CallOption) (*UpdateInstrumentRefenitiveFromSalesforceResponse, error) {
	out := new(UpdateInstrumentRefenitiveFromSalesforceResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/UpdateInstrumentRefenitiveFromSalesforce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) UpdateRatiosReport(ctx context.Context, in *UpdateRatiosReportRequst, opts ...grpc.CallOption) (*UpdateInstrumentRefenitiveFromSalesforceResponse, error) {
	out := new(UpdateInstrumentRefenitiveFromSalesforceResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/UpdateRatiosReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) UpsertInstrument(ctx context.Context, in *FixSymbol, opts ...grpc.CallOption) (*FixSymbol, error) {
	out := new(FixSymbol)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/UpsertInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetInstrumentRequiredFields(ctx context.Context, in *GetInstrumentRequiredFieldsRequest, opts ...grpc.CallOption) (*GetInstrumentRequiredFieldsResponse, error) {
	out := new(GetInstrumentRequiredFieldsResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetInstrumentRequiredFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) CreateInvestorAlert(ctx context.Context, in *CreateInvestorAlertRequest, opts ...grpc.CallOption) (*CreateInvestorAlertResponse, error) {
	out := new(CreateInvestorAlertResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/CreateInvestorAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetInvestorAlerts(ctx context.Context, in *GetInvestorAlertsRequest, opts ...grpc.CallOption) (*GetInvestorAlertsReponse, error) {
	out := new(GetInvestorAlertsReponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetInvestorAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetInvestorOneAlert(ctx context.Context, in *GetInvestorOneAlertRequest, opts ...grpc.CallOption) (*GetInvestorOneAlertResponse, error) {
	out := new(GetInvestorOneAlertResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetInvestorOneAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) DeleteInvestorAlert(ctx context.Context, in *DeleteInvestorAlertRequest, opts ...grpc.CallOption) (*DeleteInvestorAlertResponse, error) {
	out := new(DeleteInvestorAlertResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/DeleteInvestorAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) UpdateInvestorAlert(ctx context.Context, in *UpdateInvestorAlertRequest, opts ...grpc.CallOption) (*UpdateInvestorAlertResponse, error) {
	out := new(UpdateInvestorAlertResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/UpdateInvestorAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetInstrumentNameById(ctx context.Context, in *GetInstrumentNameByIdRequest, opts ...grpc.CallOption) (*GetInstrumentNameByIdResponse, error) {
	out := new(GetInstrumentNameByIdResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetInstrumentNameById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetInvestorInstrumentAlert(ctx context.Context, in *GetInvestorInstrumentAlertRequest, opts ...grpc.CallOption) (*GetInvestorInstrumentAlertResponse, error) {
	out := new(GetInvestorInstrumentAlertResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetInvestorInstrumentAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetStreetEvents(ctx context.Context, in *GetStreetEventsRequest, opts ...grpc.CallOption) (*GetStreetEventsResponse, error) {
	out := new(GetStreetEventsResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetStreetEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetInstrumentByISID(ctx context.Context, in *GetInstrumentByISIDRequest, opts ...grpc.CallOption) (*FixSymbol, error) {
	out := new(FixSymbol)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetInstrumentByISID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) InsertSumsubComments(ctx context.Context, in *InsertSumsubCommentsRequest, opts ...grpc.CallOption) (*InsertSumsubCommentsResponse, error) {
	out := new(InsertSumsubCommentsResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/InsertSumsubComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) CreateUsersFromWeb(ctx context.Context, in *CreateUsersFromWebRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/CreateUsersFromWeb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) CheckEmail(ctx context.Context, in *CheckEmailRequest, opts ...grpc.CallOption) (*CheckEmailResponse, error) {
	out := new(CheckEmailResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/CheckEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetLevelUpEmailTemplate(ctx context.Context, in *GetLevelUpEmailTemplateRequest, opts ...grpc.CallOption) (*GetLevelUpEmailTemplateResponse, error) {
	out := new(GetLevelUpEmailTemplateResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetLevelUpEmailTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) UpdateCompaileQuestions(ctx context.Context, in *UpdateCompaileQuestionsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/UpdateCompaileQuestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) UpdateUserFromWeb(ctx context.Context, in *UpdateUserFromWebRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/UpdateUserFromWeb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) Createcommissionrule(ctx context.Context, in *CommissionRule, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/Createcommissionrule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) Deletecommissionrule(ctx context.Context, in *DeletecommissionruleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/Deletecommissionrule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetUserCommissionrule(ctx context.Context, in *GetUserCommissionruleRequest, opts ...grpc.CallOption) (*CommissionRule, error) {
	out := new(CommissionRule)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetUserCommissionrule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationSeviceClient) GetInstrumentIndustries(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetIndustriesResponse, error) {
	out := new(GetIndustriesResponse)
	err := c.cc.Invoke(ctx, "/integration_service.IntegrationSevice/GetInstrumentIndustries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegrationSeviceServer is the server API for IntegrationSevice service.
// All implementations must embed UnimplementedIntegrationSeviceServer
// for forward compatibility
type IntegrationSeviceServer interface {
	// Instrument
	GetAllExchanges(context.Context, *empty.Empty) (*GetExchangesResponse, error)
	GetAllGroups(context.Context, *GetByIDRequest) (*GetGroupsResponse, error)
	GetAllTypes(context.Context, *empty.Empty) (*GetTypesResponse, error)
	GetGroupByID(context.Context, *GetByIDRequest) (*FixGroupResponse, error)
	GetExchangeByID(context.Context, *GetByIDRequest) (*FixExchangesResponse, error)
	GetExchangesByType(context.Context, *GetExchangesByTypeRequest) (*GetExchangesResponse, error)
	GetShortDetailsByStocks(context.Context, *GetShortDetailsByStocksRequest) (*GetShortDetailsByStocksResponse, error)
	UpdateIcon(context.Context, *GetInstrumentsByTypeRequest) (*empty.Empty, error)
	FilterInstruments(context.Context, *FilterInstrumentsRequest) (*FilterInstrumentsResponse, error)
	GetInstrumentByID(context.Context, *GetInstrumentByIDRequest) (*FixSymbol, error)
	GetInstrumentHistory(context.Context, *GetInstrumentHistoryRequest) (*GetInstrumentHistoryResponse, error)
	GetAllSymbolId(context.Context, *empty.Empty) (*GetSymbolIdsResponse, error)
	FilteredInstruments(context.Context, *FilterInstrumentsRequest) (*FilterInstrumentsResponse, error)
	// Instrument - Musaffo
	GetMusaffoDetails(context.Context, *GetMusaffoDetailsRequest) (*GetMusaffoDetailsResponse, error)
	// Instrument - Refinitiv
	GetKeyStats(context.Context, *GetKeyStatsRequest) (*GetKeyStatsResponse, error)
	GetBussinessSummary(context.Context, *GetBussinessSummaryRequest) (*GetBussinessSummaryResponse, error)
	GetKeyStatsNew(context.Context, *GetKeyStatsRequest) (*GetKeyStatsNewResponse, error)
	// KYC(Sumsub)
	GetApplicantInfoByExternalID(context.Context, *GetApplicantInfoByExternalIdRequest) (*GetApplicantInfoByExternalIdResponse, error)
	CreateApplicant(context.Context, *CreateApplicantRequest) (*CreateApplicantResponse, error)
	GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error)
	UploadDocument(context.Context, *UploadDocumentRequest) (*UploadDocumentResponse, error)
	GetApplicantDocs(context.Context, *GetApplicantDocsRequest) (*GetApplicantDocsResponse, error)
	GetApplicantDocsStatus(context.Context, *GetApplicantDocsStatusRequest) (*GetApplicantDocsStatusResponse, error)
	GetApprovedInvestorsDocIds(context.Context, *GetApplicantDocsStatusRequest) (*GetApplicantDocsStatusResponse, error)
	UpdateKYCStatus(context.Context, *UpdateKYCStatusRequest) (*UpdateKYCStatusResponse, error)
	// News - Refinitiv
	RetrieveStoriesByIds(context.Context, *RetrieveStoriesByIdsRequests) (*RetrieveStoriesByIdsResponse, error)
	GetStockNews(context.Context, *GetStockNewsRequest) (*GetStockNewsResponse, error)
	// Twilio
	InvestorLoginByPhone(context.Context, *InvestorLoginByPhoneRequest) (*InvestorLoginByPhoneResponse, error)
	InvestorLoginVerifyByPhone(context.Context, *InvestorLoginVerifyRequest) (*InvestorLoginVerifyResponse, error)
	// Favourite instrument(s)
	AddFavouriteInstrument(context.Context, *AddFavouriteInstrumentRequest) (*FavouriteInstrument, error)
	GetFavouriteInstruments(context.Context, *InvestorId) (*FavouriteInstrumentList, error)
	RemoveFromFavourite(context.Context, *FavouriteInstrument) (*FavouriteInstrument, error)
	IsInstrumentFavourite(context.Context, *FavouriteInstrument) (*IsInstrumentFavouriteResponse, error)
	// Webhook instrument
	UpdateInstrumentMusaffoFromSalesforce(context.Context, *UpdateInstrumentMusaffoFromSalesforceRequest) (*UpdateInstrumentMusaffoFromSalesforceResponse, error)
	// Last checked
	GetLastCheckedInstruments(context.Context, *GetLastCheckedInstrumentsRequest) (*FilterInstrumentsResponse, error)
	UpdateInstrumentRefenitiveFromSalesforce(context.Context, *UpdateInstrumentRefenitiveFromSalesforceRequest) (*UpdateInstrumentRefenitiveFromSalesforceResponse, error)
	UpdateRatiosReport(context.Context, *UpdateRatiosReportRequst) (*UpdateInstrumentRefenitiveFromSalesforceResponse, error)
	UpsertInstrument(context.Context, *FixSymbol) (*FixSymbol, error)
	GetInstrumentRequiredFields(context.Context, *GetInstrumentRequiredFieldsRequest) (*GetInstrumentRequiredFieldsResponse, error)
	CreateInvestorAlert(context.Context, *CreateInvestorAlertRequest) (*CreateInvestorAlertResponse, error)
	GetInvestorAlerts(context.Context, *GetInvestorAlertsRequest) (*GetInvestorAlertsReponse, error)
	GetInvestorOneAlert(context.Context, *GetInvestorOneAlertRequest) (*GetInvestorOneAlertResponse, error)
	DeleteInvestorAlert(context.Context, *DeleteInvestorAlertRequest) (*DeleteInvestorAlertResponse, error)
	UpdateInvestorAlert(context.Context, *UpdateInvestorAlertRequest) (*UpdateInvestorAlertResponse, error)
	GetInstrumentNameById(context.Context, *GetInstrumentNameByIdRequest) (*GetInstrumentNameByIdResponse, error)
	GetInvestorInstrumentAlert(context.Context, *GetInvestorInstrumentAlertRequest) (*GetInvestorInstrumentAlertResponse, error)
	GetStreetEvents(context.Context, *GetStreetEventsRequest) (*GetStreetEventsResponse, error)
	GetInstrumentByISID(context.Context, *GetInstrumentByISIDRequest) (*FixSymbol, error)
	InsertSumsubComments(context.Context, *InsertSumsubCommentsRequest) (*InsertSumsubCommentsResponse, error)
	CreateUsersFromWeb(context.Context, *CreateUsersFromWebRequest) (*empty.Empty, error)
	CheckEmail(context.Context, *CheckEmailRequest) (*CheckEmailResponse, error)
	GetLevelUpEmailTemplate(context.Context, *GetLevelUpEmailTemplateRequest) (*GetLevelUpEmailTemplateResponse, error)
	UpdateCompaileQuestions(context.Context, *UpdateCompaileQuestionsRequest) (*empty.Empty, error)
	UpdateUserFromWeb(context.Context, *UpdateUserFromWebRequest) (*empty.Empty, error)
	Createcommissionrule(context.Context, *CommissionRule) (*empty.Empty, error)
	Deletecommissionrule(context.Context, *DeletecommissionruleRequest) (*empty.Empty, error)
	GetUserCommissionrule(context.Context, *GetUserCommissionruleRequest) (*CommissionRule, error)
	GetInstrumentIndustries(context.Context, *empty.Empty) (*GetIndustriesResponse, error)
	mustEmbedUnimplementedIntegrationSeviceServer()
}

// UnimplementedIntegrationSeviceServer must be embedded to have forward compatible implementations.
type UnimplementedIntegrationSeviceServer struct {
}

func (UnimplementedIntegrationSeviceServer) GetAllExchanges(context.Context, *empty.Empty) (*GetExchangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllExchanges not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetAllGroups(context.Context, *GetByIDRequest) (*GetGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGroups not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetAllTypes(context.Context, *empty.Empty) (*GetTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTypes not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetGroupByID(context.Context, *GetByIDRequest) (*FixGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupByID not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetExchangeByID(context.Context, *GetByIDRequest) (*FixExchangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangeByID not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetExchangesByType(context.Context, *GetExchangesByTypeRequest) (*GetExchangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangesByType not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetShortDetailsByStocks(context.Context, *GetShortDetailsByStocksRequest) (*GetShortDetailsByStocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortDetailsByStocks not implemented")
}
func (UnimplementedIntegrationSeviceServer) UpdateIcon(context.Context, *GetInstrumentsByTypeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIcon not implemented")
}
func (UnimplementedIntegrationSeviceServer) FilterInstruments(context.Context, *FilterInstrumentsRequest) (*FilterInstrumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterInstruments not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetInstrumentByID(context.Context, *GetInstrumentByIDRequest) (*FixSymbol, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstrumentByID not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetInstrumentHistory(context.Context, *GetInstrumentHistoryRequest) (*GetInstrumentHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstrumentHistory not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetAllSymbolId(context.Context, *empty.Empty) (*GetSymbolIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSymbolId not implemented")
}
func (UnimplementedIntegrationSeviceServer) FilteredInstruments(context.Context, *FilterInstrumentsRequest) (*FilterInstrumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilteredInstruments not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetMusaffoDetails(context.Context, *GetMusaffoDetailsRequest) (*GetMusaffoDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMusaffoDetails not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetKeyStats(context.Context, *GetKeyStatsRequest) (*GetKeyStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyStats not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetBussinessSummary(context.Context, *GetBussinessSummaryRequest) (*GetBussinessSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBussinessSummary not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetKeyStatsNew(context.Context, *GetKeyStatsRequest) (*GetKeyStatsNewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyStatsNew not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetApplicantInfoByExternalID(context.Context, *GetApplicantInfoByExternalIdRequest) (*GetApplicantInfoByExternalIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicantInfoByExternalID not implemented")
}
func (UnimplementedIntegrationSeviceServer) CreateApplicant(context.Context, *CreateApplicantRequest) (*CreateApplicantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplicant not implemented")
}
func (UnimplementedIntegrationSeviceServer) GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (UnimplementedIntegrationSeviceServer) UploadDocument(context.Context, *UploadDocumentRequest) (*UploadDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDocument not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetApplicantDocs(context.Context, *GetApplicantDocsRequest) (*GetApplicantDocsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicantDocs not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetApplicantDocsStatus(context.Context, *GetApplicantDocsStatusRequest) (*GetApplicantDocsStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicantDocsStatus not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetApprovedInvestorsDocIds(context.Context, *GetApplicantDocsStatusRequest) (*GetApplicantDocsStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApprovedInvestorsDocIds not implemented")
}
func (UnimplementedIntegrationSeviceServer) UpdateKYCStatus(context.Context, *UpdateKYCStatusRequest) (*UpdateKYCStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKYCStatus not implemented")
}
func (UnimplementedIntegrationSeviceServer) RetrieveStoriesByIds(context.Context, *RetrieveStoriesByIdsRequests) (*RetrieveStoriesByIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStoriesByIds not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetStockNews(context.Context, *GetStockNewsRequest) (*GetStockNewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockNews not implemented")
}
func (UnimplementedIntegrationSeviceServer) InvestorLoginByPhone(context.Context, *InvestorLoginByPhoneRequest) (*InvestorLoginByPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvestorLoginByPhone not implemented")
}
func (UnimplementedIntegrationSeviceServer) InvestorLoginVerifyByPhone(context.Context, *InvestorLoginVerifyRequest) (*InvestorLoginVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvestorLoginVerifyByPhone not implemented")
}
func (UnimplementedIntegrationSeviceServer) AddFavouriteInstrument(context.Context, *AddFavouriteInstrumentRequest) (*FavouriteInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFavouriteInstrument not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetFavouriteInstruments(context.Context, *InvestorId) (*FavouriteInstrumentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavouriteInstruments not implemented")
}
func (UnimplementedIntegrationSeviceServer) RemoveFromFavourite(context.Context, *FavouriteInstrument) (*FavouriteInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromFavourite not implemented")
}
func (UnimplementedIntegrationSeviceServer) IsInstrumentFavourite(context.Context, *FavouriteInstrument) (*IsInstrumentFavouriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsInstrumentFavourite not implemented")
}
func (UnimplementedIntegrationSeviceServer) UpdateInstrumentMusaffoFromSalesforce(context.Context, *UpdateInstrumentMusaffoFromSalesforceRequest) (*UpdateInstrumentMusaffoFromSalesforceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstrumentMusaffoFromSalesforce not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetLastCheckedInstruments(context.Context, *GetLastCheckedInstrumentsRequest) (*FilterInstrumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastCheckedInstruments not implemented")
}
func (UnimplementedIntegrationSeviceServer) UpdateInstrumentRefenitiveFromSalesforce(context.Context, *UpdateInstrumentRefenitiveFromSalesforceRequest) (*UpdateInstrumentRefenitiveFromSalesforceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstrumentRefenitiveFromSalesforce not implemented")
}
func (UnimplementedIntegrationSeviceServer) UpdateRatiosReport(context.Context, *UpdateRatiosReportRequst) (*UpdateInstrumentRefenitiveFromSalesforceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRatiosReport not implemented")
}
func (UnimplementedIntegrationSeviceServer) UpsertInstrument(context.Context, *FixSymbol) (*FixSymbol, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertInstrument not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetInstrumentRequiredFields(context.Context, *GetInstrumentRequiredFieldsRequest) (*GetInstrumentRequiredFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstrumentRequiredFields not implemented")
}
func (UnimplementedIntegrationSeviceServer) CreateInvestorAlert(context.Context, *CreateInvestorAlertRequest) (*CreateInvestorAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvestorAlert not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetInvestorAlerts(context.Context, *GetInvestorAlertsRequest) (*GetInvestorAlertsReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvestorAlerts not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetInvestorOneAlert(context.Context, *GetInvestorOneAlertRequest) (*GetInvestorOneAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvestorOneAlert not implemented")
}
func (UnimplementedIntegrationSeviceServer) DeleteInvestorAlert(context.Context, *DeleteInvestorAlertRequest) (*DeleteInvestorAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInvestorAlert not implemented")
}
func (UnimplementedIntegrationSeviceServer) UpdateInvestorAlert(context.Context, *UpdateInvestorAlertRequest) (*UpdateInvestorAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvestorAlert not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetInstrumentNameById(context.Context, *GetInstrumentNameByIdRequest) (*GetInstrumentNameByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstrumentNameById not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetInvestorInstrumentAlert(context.Context, *GetInvestorInstrumentAlertRequest) (*GetInvestorInstrumentAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvestorInstrumentAlert not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetStreetEvents(context.Context, *GetStreetEventsRequest) (*GetStreetEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreetEvents not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetInstrumentByISID(context.Context, *GetInstrumentByISIDRequest) (*FixSymbol, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstrumentByISID not implemented")
}
func (UnimplementedIntegrationSeviceServer) InsertSumsubComments(context.Context, *InsertSumsubCommentsRequest) (*InsertSumsubCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertSumsubComments not implemented")
}
func (UnimplementedIntegrationSeviceServer) CreateUsersFromWeb(context.Context, *CreateUsersFromWebRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUsersFromWeb not implemented")
}
func (UnimplementedIntegrationSeviceServer) CheckEmail(context.Context, *CheckEmailRequest) (*CheckEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEmail not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetLevelUpEmailTemplate(context.Context, *GetLevelUpEmailTemplateRequest) (*GetLevelUpEmailTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLevelUpEmailTemplate not implemented")
}
func (UnimplementedIntegrationSeviceServer) UpdateCompaileQuestions(context.Context, *UpdateCompaileQuestionsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompaileQuestions not implemented")
}
func (UnimplementedIntegrationSeviceServer) UpdateUserFromWeb(context.Context, *UpdateUserFromWebRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserFromWeb not implemented")
}
func (UnimplementedIntegrationSeviceServer) Createcommissionrule(context.Context, *CommissionRule) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Createcommissionrule not implemented")
}
func (UnimplementedIntegrationSeviceServer) Deletecommissionrule(context.Context, *DeletecommissionruleRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deletecommissionrule not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetUserCommissionrule(context.Context, *GetUserCommissionruleRequest) (*CommissionRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCommissionrule not implemented")
}
func (UnimplementedIntegrationSeviceServer) GetInstrumentIndustries(context.Context, *empty.Empty) (*GetIndustriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstrumentIndustries not implemented")
}
func (UnimplementedIntegrationSeviceServer) mustEmbedUnimplementedIntegrationSeviceServer() {}

// UnsafeIntegrationSeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntegrationSeviceServer will
// result in compilation errors.
type UnsafeIntegrationSeviceServer interface {
	mustEmbedUnimplementedIntegrationSeviceServer()
}

func RegisterIntegrationSeviceServer(s grpc.ServiceRegistrar, srv IntegrationSeviceServer) {
	s.RegisterService(&IntegrationSevice_ServiceDesc, srv)
}

func _IntegrationSevice_GetAllExchanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetAllExchanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetAllExchanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetAllExchanges(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetAllGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetAllGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetAllGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetAllGroups(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetAllTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetAllTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetAllTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetAllTypes(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetGroupByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetGroupByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetGroupByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetGroupByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetExchangeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetExchangeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetExchangeByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetExchangeByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetExchangesByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangesByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetExchangesByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetExchangesByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetExchangesByType(ctx, req.(*GetExchangesByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetShortDetailsByStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortDetailsByStocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetShortDetailsByStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetShortDetailsByStocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetShortDetailsByStocks(ctx, req.(*GetShortDetailsByStocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_UpdateIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstrumentsByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).UpdateIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/UpdateIcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).UpdateIcon(ctx, req.(*GetInstrumentsByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_FilterInstruments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterInstrumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).FilterInstruments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/FilterInstruments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).FilterInstruments(ctx, req.(*FilterInstrumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetInstrumentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstrumentByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetInstrumentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetInstrumentByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetInstrumentByID(ctx, req.(*GetInstrumentByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetInstrumentHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstrumentHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetInstrumentHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetInstrumentHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetInstrumentHistory(ctx, req.(*GetInstrumentHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetAllSymbolId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetAllSymbolId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetAllSymbolId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetAllSymbolId(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_FilteredInstruments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterInstrumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).FilteredInstruments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/FilteredInstruments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).FilteredInstruments(ctx, req.(*FilterInstrumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetMusaffoDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMusaffoDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetMusaffoDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetMusaffoDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetMusaffoDetails(ctx, req.(*GetMusaffoDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetKeyStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetKeyStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetKeyStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetKeyStats(ctx, req.(*GetKeyStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetBussinessSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBussinessSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetBussinessSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetBussinessSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetBussinessSummary(ctx, req.(*GetBussinessSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetKeyStatsNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetKeyStatsNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetKeyStatsNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetKeyStatsNew(ctx, req.(*GetKeyStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetApplicantInfoByExternalID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicantInfoByExternalIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetApplicantInfoByExternalID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetApplicantInfoByExternalID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetApplicantInfoByExternalID(ctx, req.(*GetApplicantInfoByExternalIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_CreateApplicant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).CreateApplicant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/CreateApplicant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).CreateApplicant(ctx, req.(*CreateApplicantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GenerateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GenerateToken(ctx, req.(*GenerateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_UploadDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).UploadDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/UploadDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).UploadDocument(ctx, req.(*UploadDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetApplicantDocs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicantDocsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetApplicantDocs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetApplicantDocs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetApplicantDocs(ctx, req.(*GetApplicantDocsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetApplicantDocsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicantDocsStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetApplicantDocsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetApplicantDocsStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetApplicantDocsStatus(ctx, req.(*GetApplicantDocsStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetApprovedInvestorsDocIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicantDocsStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetApprovedInvestorsDocIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetApprovedInvestorsDocIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetApprovedInvestorsDocIds(ctx, req.(*GetApplicantDocsStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_UpdateKYCStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKYCStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).UpdateKYCStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/UpdateKYCStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).UpdateKYCStatus(ctx, req.(*UpdateKYCStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_RetrieveStoriesByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStoriesByIdsRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).RetrieveStoriesByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/RetrieveStoriesByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).RetrieveStoriesByIds(ctx, req.(*RetrieveStoriesByIdsRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetStockNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetStockNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetStockNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetStockNews(ctx, req.(*GetStockNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_InvestorLoginByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvestorLoginByPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).InvestorLoginByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/InvestorLoginByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).InvestorLoginByPhone(ctx, req.(*InvestorLoginByPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_InvestorLoginVerifyByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvestorLoginVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).InvestorLoginVerifyByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/InvestorLoginVerifyByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).InvestorLoginVerifyByPhone(ctx, req.(*InvestorLoginVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_AddFavouriteInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFavouriteInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).AddFavouriteInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/AddFavouriteInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).AddFavouriteInstrument(ctx, req.(*AddFavouriteInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetFavouriteInstruments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvestorId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetFavouriteInstruments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetFavouriteInstruments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetFavouriteInstruments(ctx, req.(*InvestorId))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_RemoveFromFavourite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavouriteInstrument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).RemoveFromFavourite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/RemoveFromFavourite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).RemoveFromFavourite(ctx, req.(*FavouriteInstrument))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_IsInstrumentFavourite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavouriteInstrument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).IsInstrumentFavourite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/IsInstrumentFavourite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).IsInstrumentFavourite(ctx, req.(*FavouriteInstrument))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_UpdateInstrumentMusaffoFromSalesforce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInstrumentMusaffoFromSalesforceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).UpdateInstrumentMusaffoFromSalesforce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/UpdateInstrumentMusaffoFromSalesforce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).UpdateInstrumentMusaffoFromSalesforce(ctx, req.(*UpdateInstrumentMusaffoFromSalesforceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetLastCheckedInstruments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastCheckedInstrumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetLastCheckedInstruments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetLastCheckedInstruments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetLastCheckedInstruments(ctx, req.(*GetLastCheckedInstrumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_UpdateInstrumentRefenitiveFromSalesforce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInstrumentRefenitiveFromSalesforceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).UpdateInstrumentRefenitiveFromSalesforce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/UpdateInstrumentRefenitiveFromSalesforce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).UpdateInstrumentRefenitiveFromSalesforce(ctx, req.(*UpdateInstrumentRefenitiveFromSalesforceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_UpdateRatiosReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRatiosReportRequst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).UpdateRatiosReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/UpdateRatiosReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).UpdateRatiosReport(ctx, req.(*UpdateRatiosReportRequst))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_UpsertInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FixSymbol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).UpsertInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/UpsertInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).UpsertInstrument(ctx, req.(*FixSymbol))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetInstrumentRequiredFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstrumentRequiredFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetInstrumentRequiredFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetInstrumentRequiredFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetInstrumentRequiredFields(ctx, req.(*GetInstrumentRequiredFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_CreateInvestorAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvestorAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).CreateInvestorAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/CreateInvestorAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).CreateInvestorAlert(ctx, req.(*CreateInvestorAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetInvestorAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvestorAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetInvestorAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetInvestorAlerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetInvestorAlerts(ctx, req.(*GetInvestorAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetInvestorOneAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvestorOneAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetInvestorOneAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetInvestorOneAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetInvestorOneAlert(ctx, req.(*GetInvestorOneAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_DeleteInvestorAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInvestorAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).DeleteInvestorAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/DeleteInvestorAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).DeleteInvestorAlert(ctx, req.(*DeleteInvestorAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_UpdateInvestorAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvestorAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).UpdateInvestorAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/UpdateInvestorAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).UpdateInvestorAlert(ctx, req.(*UpdateInvestorAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetInstrumentNameById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstrumentNameByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetInstrumentNameById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetInstrumentNameById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetInstrumentNameById(ctx, req.(*GetInstrumentNameByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetInvestorInstrumentAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvestorInstrumentAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetInvestorInstrumentAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetInvestorInstrumentAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetInvestorInstrumentAlert(ctx, req.(*GetInvestorInstrumentAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetStreetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreetEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetStreetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetStreetEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetStreetEvents(ctx, req.(*GetStreetEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetInstrumentByISID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstrumentByISIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetInstrumentByISID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetInstrumentByISID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetInstrumentByISID(ctx, req.(*GetInstrumentByISIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_InsertSumsubComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertSumsubCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).InsertSumsubComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/InsertSumsubComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).InsertSumsubComments(ctx, req.(*InsertSumsubCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_CreateUsersFromWeb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUsersFromWebRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).CreateUsersFromWeb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/CreateUsersFromWeb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).CreateUsersFromWeb(ctx, req.(*CreateUsersFromWebRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_CheckEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).CheckEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/CheckEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).CheckEmail(ctx, req.(*CheckEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetLevelUpEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLevelUpEmailTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetLevelUpEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetLevelUpEmailTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetLevelUpEmailTemplate(ctx, req.(*GetLevelUpEmailTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_UpdateCompaileQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompaileQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).UpdateCompaileQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/UpdateCompaileQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).UpdateCompaileQuestions(ctx, req.(*UpdateCompaileQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_UpdateUserFromWeb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserFromWebRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).UpdateUserFromWeb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/UpdateUserFromWeb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).UpdateUserFromWeb(ctx, req.(*UpdateUserFromWebRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_Createcommissionrule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommissionRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).Createcommissionrule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/Createcommissionrule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).Createcommissionrule(ctx, req.(*CommissionRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_Deletecommissionrule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletecommissionruleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).Deletecommissionrule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/Deletecommissionrule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).Deletecommissionrule(ctx, req.(*DeletecommissionruleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetUserCommissionrule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCommissionruleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetUserCommissionrule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetUserCommissionrule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetUserCommissionrule(ctx, req.(*GetUserCommissionruleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationSevice_GetInstrumentIndustries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationSeviceServer).GetInstrumentIndustries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.IntegrationSevice/GetInstrumentIndustries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationSeviceServer).GetInstrumentIndustries(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// IntegrationSevice_ServiceDesc is the grpc.ServiceDesc for IntegrationSevice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntegrationSevice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "integration_service.IntegrationSevice",
	HandlerType: (*IntegrationSeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllExchanges",
			Handler:    _IntegrationSevice_GetAllExchanges_Handler,
		},
		{
			MethodName: "GetAllGroups",
			Handler:    _IntegrationSevice_GetAllGroups_Handler,
		},
		{
			MethodName: "GetAllTypes",
			Handler:    _IntegrationSevice_GetAllTypes_Handler,
		},
		{
			MethodName: "GetGroupByID",
			Handler:    _IntegrationSevice_GetGroupByID_Handler,
		},
		{
			MethodName: "GetExchangeByID",
			Handler:    _IntegrationSevice_GetExchangeByID_Handler,
		},
		{
			MethodName: "GetExchangesByType",
			Handler:    _IntegrationSevice_GetExchangesByType_Handler,
		},
		{
			MethodName: "GetShortDetailsByStocks",
			Handler:    _IntegrationSevice_GetShortDetailsByStocks_Handler,
		},
		{
			MethodName: "UpdateIcon",
			Handler:    _IntegrationSevice_UpdateIcon_Handler,
		},
		{
			MethodName: "FilterInstruments",
			Handler:    _IntegrationSevice_FilterInstruments_Handler,
		},
		{
			MethodName: "GetInstrumentByID",
			Handler:    _IntegrationSevice_GetInstrumentByID_Handler,
		},
		{
			MethodName: "GetInstrumentHistory",
			Handler:    _IntegrationSevice_GetInstrumentHistory_Handler,
		},
		{
			MethodName: "GetAllSymbolId",
			Handler:    _IntegrationSevice_GetAllSymbolId_Handler,
		},
		{
			MethodName: "FilteredInstruments",
			Handler:    _IntegrationSevice_FilteredInstruments_Handler,
		},
		{
			MethodName: "GetMusaffoDetails",
			Handler:    _IntegrationSevice_GetMusaffoDetails_Handler,
		},
		{
			MethodName: "GetKeyStats",
			Handler:    _IntegrationSevice_GetKeyStats_Handler,
		},
		{
			MethodName: "GetBussinessSummary",
			Handler:    _IntegrationSevice_GetBussinessSummary_Handler,
		},
		{
			MethodName: "GetKeyStatsNew",
			Handler:    _IntegrationSevice_GetKeyStatsNew_Handler,
		},
		{
			MethodName: "GetApplicantInfoByExternalID",
			Handler:    _IntegrationSevice_GetApplicantInfoByExternalID_Handler,
		},
		{
			MethodName: "CreateApplicant",
			Handler:    _IntegrationSevice_CreateApplicant_Handler,
		},
		{
			MethodName: "GenerateToken",
			Handler:    _IntegrationSevice_GenerateToken_Handler,
		},
		{
			MethodName: "UploadDocument",
			Handler:    _IntegrationSevice_UploadDocument_Handler,
		},
		{
			MethodName: "GetApplicantDocs",
			Handler:    _IntegrationSevice_GetApplicantDocs_Handler,
		},
		{
			MethodName: "GetApplicantDocsStatus",
			Handler:    _IntegrationSevice_GetApplicantDocsStatus_Handler,
		},
		{
			MethodName: "GetApprovedInvestorsDocIds",
			Handler:    _IntegrationSevice_GetApprovedInvestorsDocIds_Handler,
		},
		{
			MethodName: "UpdateKYCStatus",
			Handler:    _IntegrationSevice_UpdateKYCStatus_Handler,
		},
		{
			MethodName: "RetrieveStoriesByIds",
			Handler:    _IntegrationSevice_RetrieveStoriesByIds_Handler,
		},
		{
			MethodName: "GetStockNews",
			Handler:    _IntegrationSevice_GetStockNews_Handler,
		},
		{
			MethodName: "InvestorLoginByPhone",
			Handler:    _IntegrationSevice_InvestorLoginByPhone_Handler,
		},
		{
			MethodName: "InvestorLoginVerifyByPhone",
			Handler:    _IntegrationSevice_InvestorLoginVerifyByPhone_Handler,
		},
		{
			MethodName: "AddFavouriteInstrument",
			Handler:    _IntegrationSevice_AddFavouriteInstrument_Handler,
		},
		{
			MethodName: "GetFavouriteInstruments",
			Handler:    _IntegrationSevice_GetFavouriteInstruments_Handler,
		},
		{
			MethodName: "RemoveFromFavourite",
			Handler:    _IntegrationSevice_RemoveFromFavourite_Handler,
		},
		{
			MethodName: "IsInstrumentFavourite",
			Handler:    _IntegrationSevice_IsInstrumentFavourite_Handler,
		},
		{
			MethodName: "UpdateInstrumentMusaffoFromSalesforce",
			Handler:    _IntegrationSevice_UpdateInstrumentMusaffoFromSalesforce_Handler,
		},
		{
			MethodName: "GetLastCheckedInstruments",
			Handler:    _IntegrationSevice_GetLastCheckedInstruments_Handler,
		},
		{
			MethodName: "UpdateInstrumentRefenitiveFromSalesforce",
			Handler:    _IntegrationSevice_UpdateInstrumentRefenitiveFromSalesforce_Handler,
		},
		{
			MethodName: "UpdateRatiosReport",
			Handler:    _IntegrationSevice_UpdateRatiosReport_Handler,
		},
		{
			MethodName: "UpsertInstrument",
			Handler:    _IntegrationSevice_UpsertInstrument_Handler,
		},
		{
			MethodName: "GetInstrumentRequiredFields",
			Handler:    _IntegrationSevice_GetInstrumentRequiredFields_Handler,
		},
		{
			MethodName: "CreateInvestorAlert",
			Handler:    _IntegrationSevice_CreateInvestorAlert_Handler,
		},
		{
			MethodName: "GetInvestorAlerts",
			Handler:    _IntegrationSevice_GetInvestorAlerts_Handler,
		},
		{
			MethodName: "GetInvestorOneAlert",
			Handler:    _IntegrationSevice_GetInvestorOneAlert_Handler,
		},
		{
			MethodName: "DeleteInvestorAlert",
			Handler:    _IntegrationSevice_DeleteInvestorAlert_Handler,
		},
		{
			MethodName: "UpdateInvestorAlert",
			Handler:    _IntegrationSevice_UpdateInvestorAlert_Handler,
		},
		{
			MethodName: "GetInstrumentNameById",
			Handler:    _IntegrationSevice_GetInstrumentNameById_Handler,
		},
		{
			MethodName: "GetInvestorInstrumentAlert",
			Handler:    _IntegrationSevice_GetInvestorInstrumentAlert_Handler,
		},
		{
			MethodName: "GetStreetEvents",
			Handler:    _IntegrationSevice_GetStreetEvents_Handler,
		},
		{
			MethodName: "GetInstrumentByISID",
			Handler:    _IntegrationSevice_GetInstrumentByISID_Handler,
		},
		{
			MethodName: "InsertSumsubComments",
			Handler:    _IntegrationSevice_InsertSumsubComments_Handler,
		},
		{
			MethodName: "CreateUsersFromWeb",
			Handler:    _IntegrationSevice_CreateUsersFromWeb_Handler,
		},
		{
			MethodName: "CheckEmail",
			Handler:    _IntegrationSevice_CheckEmail_Handler,
		},
		{
			MethodName: "GetLevelUpEmailTemplate",
			Handler:    _IntegrationSevice_GetLevelUpEmailTemplate_Handler,
		},
		{
			MethodName: "UpdateCompaileQuestions",
			Handler:    _IntegrationSevice_UpdateCompaileQuestions_Handler,
		},
		{
			MethodName: "UpdateUserFromWeb",
			Handler:    _IntegrationSevice_UpdateUserFromWeb_Handler,
		},
		{
			MethodName: "Createcommissionrule",
			Handler:    _IntegrationSevice_Createcommissionrule_Handler,
		},
		{
			MethodName: "Deletecommissionrule",
			Handler:    _IntegrationSevice_Deletecommissionrule_Handler,
		},
		{
			MethodName: "GetUserCommissionrule",
			Handler:    _IntegrationSevice_GetUserCommissionrule_Handler,
		},
		{
			MethodName: "GetInstrumentIndustries",
			Handler:    _IntegrationSevice_GetInstrumentIndustries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "integration_service.proto",
}
