// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: salesforce.proto

package integration_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NewsFeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title        string  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Body         string  `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	CreatedAt    string  `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ImageUrl     string  `protobuf:"bytes,4,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	LikeCount    float32 `protobuf:"fixed32,5,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`
	CommentCount float32 `protobuf:"fixed32,6,opt,name=comment_count,json=commentCount,proto3" json:"comment_count,omitempty"`
	Publisher    string  `protobuf:"bytes,7,opt,name=publisher,proto3" json:"publisher,omitempty"`
}

func (x *NewsFeed) Reset() {
	*x = NewsFeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_salesforce_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsFeed) ProtoMessage() {}

func (x *NewsFeed) ProtoReflect() protoreflect.Message {
	mi := &file_salesforce_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsFeed.ProtoReflect.Descriptor instead.
func (*NewsFeed) Descriptor() ([]byte, []int) {
	return file_salesforce_proto_rawDescGZIP(), []int{0}
}

func (x *NewsFeed) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewsFeed) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *NewsFeed) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *NewsFeed) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *NewsFeed) GetLikeCount() float32 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *NewsFeed) GetCommentCount() float32 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *NewsFeed) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

type BrokerageAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountName string  `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	Balance     float32 `protobuf:"fixed32,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *BrokerageAccount) Reset() {
	*x = BrokerageAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_salesforce_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerageAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerageAccount) ProtoMessage() {}

func (x *BrokerageAccount) ProtoReflect() protoreflect.Message {
	mi := &file_salesforce_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerageAccount.ProtoReflect.Descriptor instead.
func (*BrokerageAccount) Descriptor() ([]byte, []int) {
	return file_salesforce_proto_rawDescGZIP(), []int{1}
}

func (x *BrokerageAccount) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *BrokerageAccount) GetBalance() float32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title     string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content   string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Image     string `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	CreatedAt string `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	SendAt    string `protobuf:"bytes,6,opt,name=send_at,json=sendAt,proto3" json:"send_at,omitempty"`
	Type      string `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Notification) Reset() {
	*x = Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_salesforce_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_salesforce_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_salesforce_proto_rawDescGZIP(), []int{2}
}

func (x *Notification) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Notification) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Notification) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Notification) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Notification) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Notification) GetSendAt() string {
	if x != nil {
		return x.SendAt
	}
	return ""
}

func (x *Notification) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryOfResidence        string `protobuf:"bytes,1,opt,name=country_of_residence,json=countryOfResidence,proto3" json:"country_of_residence,omitempty"`
	CountryOfCitizenship      string `protobuf:"bytes,2,opt,name=country_of_citizenship,json=countryOfCitizenship,proto3" json:"country_of_citizenship,omitempty"`
	PostCode                  string `protobuf:"bytes,3,opt,name=post_code,json=postCode,proto3" json:"post_code,omitempty"`
	Address                   string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	AccountId                 string `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	KycStatus                 string `protobuf:"bytes,6,opt,name=kyc_status,json=kycStatus,proto3" json:"kyc_status,omitempty"`
	RejectReason              string `protobuf:"bytes,7,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	KycUpdatedAt              string `protobuf:"bytes,8,opt,name=kyc_updated_at,json=kycUpdatedAt,proto3" json:"kyc_updated_at,omitempty"`
	TaxResidence              string `protobuf:"bytes,9,opt,name=tax_residence,json=taxResidence,proto3" json:"tax_residence,omitempty"`
	TaxId                     string `protobuf:"bytes,10,opt,name=tax_id,json=taxId,proto3" json:"tax_id,omitempty"`
	PassportSubmitted         bool   `protobuf:"varint,11,opt,name=passport_submitted,json=passportSubmitted,proto3" json:"passport_submitted,omitempty"`
	PassportNumber            string `protobuf:"bytes,12,opt,name=passport_number,json=passportNumber,proto3" json:"passport_number,omitempty"`
	PassportExpiryDate        string `protobuf:"bytes,13,opt,name=passport_expiry_date,json=passportExpiryDate,proto3" json:"passport_expiry_date,omitempty"`
	PassportProvidedDate      string `protobuf:"bytes,14,opt,name=passport_provided_date,json=passportProvidedDate,proto3" json:"passport_provided_date,omitempty"`
	PassportPhoto             string `protobuf:"bytes,15,opt,name=passport_photo,json=passportPhoto,proto3" json:"passport_photo,omitempty"`
	PassportVerified          bool   `protobuf:"varint,16,opt,name=passport_verified,json=passportVerified,proto3" json:"passport_verified,omitempty"`
	PassportVerifiedTimestamp string `protobuf:"bytes,17,opt,name=passport_verified_timestamp,json=passportVerifiedTimestamp,proto3" json:"passport_verified_timestamp,omitempty"`
	PhotoVideoSubmitted       bool   `protobuf:"varint,18,opt,name=photo_video_submitted,json=photoVideoSubmitted,proto3" json:"photo_video_submitted,omitempty"`
	PhotoVideoMatchPassport   bool   `protobuf:"varint,19,opt,name=photo_video_match_passport,json=photoVideoMatchPassport,proto3" json:"photo_video_match_passport,omitempty"`
	IsTestAccount             bool   `protobuf:"varint,20,opt,name=is_test_account,json=isTestAccount,proto3" json:"is_test_account,omitempty"`
	Firstname                 string `protobuf:"bytes,21,opt,name=firstname,proto3" json:"firstname,omitempty"`
	Lastname                  string `protobuf:"bytes,22,opt,name=lastname,proto3" json:"lastname,omitempty"`
	Phone                     string `protobuf:"bytes,23,opt,name=phone,proto3" json:"phone,omitempty"`
	SelfiePhoto               string `protobuf:"bytes,24,opt,name=selfie_photo,json=selfiePhoto,proto3" json:"selfie_photo,omitempty"`
	Email                     string `protobuf:"bytes,25,opt,name=email,proto3" json:"email,omitempty"`
	Gender                    string `protobuf:"bytes,26,opt,name=gender,proto3" json:"gender,omitempty"`
	Username                  string `protobuf:"bytes,27,opt,name=username,proto3" json:"username,omitempty"`
	Description               string `protobuf:"bytes,28,opt,name=description,proto3" json:"description,omitempty"`
	PreferredName             string `protobuf:"bytes,29,opt,name=preferred_name,json=preferredName,proto3" json:"preferred_name,omitempty"`
	UserImage                 string `protobuf:"bytes,30,opt,name=user_image,json=userImage,proto3" json:"user_image,omitempty"`
	IdentityFront             string `protobuf:"bytes,31,opt,name=identity_front,json=identityFront,proto3" json:"identity_front,omitempty"`
	IdentityBack              string `protobuf:"bytes,32,opt,name=identity_back,json=identityBack,proto3" json:"identity_back,omitempty"`
	InspectionId              string `protobuf:"bytes,33,opt,name=inspection_id,json=inspectionId,proto3" json:"inspection_id,omitempty"`
	PorDocument               string `protobuf:"bytes,34,opt,name=por_document,json=porDocument,proto3" json:"por_document,omitempty"`
	PorSubmitted              bool   `protobuf:"varint,35,opt,name=por_submitted,json=porSubmitted,proto3" json:"por_submitted,omitempty"`
	PorProvidedDate           string `protobuf:"bytes,36,opt,name=por_provided_date,json=porProvidedDate,proto3" json:"por_provided_date,omitempty"`
	PorVerified               bool   `protobuf:"varint,37,opt,name=por_verified,json=porVerified,proto3" json:"por_verified,omitempty"`
	PorVerifiedTimestamp      string `protobuf:"bytes,38,opt,name=por_verified_timestamp,json=porVerifiedTimestamp,proto3" json:"por_verified_timestamp,omitempty"`
	LastLogin                 string `protobuf:"bytes,39,opt,name=last_login,json=lastLogin,proto3" json:"last_login,omitempty"`
	FirstLogin                string `protobuf:"bytes,40,opt,name=first_login,json=firstLogin,proto3" json:"first_login,omitempty"`
	LegalEntity               string `protobuf:"bytes,41,opt,name=legal_entity,json=legalEntity,proto3" json:"legal_entity,omitempty"`
	// string country_of_birth = 7;
	// string date_of_birth = 14;
	// string middle_name = 16;
	// string id = 20;
	Finance                  *AccountFinance      `protobuf:"bytes,42,opt,name=finance,proto3" json:"finance,omitempty"`
	Restrictions             *AccountRestrictions `protobuf:"bytes,43,opt,name=restrictions,proto3" json:"restrictions,omitempty"`
	IdentityApplication      *IdentityApplicaiton `protobuf:"bytes,44,opt,name=identity_application,json=identityApplication,proto3" json:"identity_application,omitempty"`
	Activity                 string               `protobuf:"bytes,45,opt,name=activity,proto3" json:"activity,omitempty"`
	AccountNumber            string               `protobuf:"bytes,46,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	PassportIssuedBy         string               `protobuf:"bytes,47,opt,name=passport_issued_by,json=passportIssuedBy,proto3" json:"passport_issued_by,omitempty"`
	LearnedFrom              string               `protobuf:"bytes,48,opt,name=learned_from,json=learnedFrom,proto3" json:"learned_from,omitempty"`
	Region                   string               `protobuf:"bytes,49,opt,name=region,proto3" json:"region,omitempty"`
	Accountstatus            string               `protobuf:"bytes,50,opt,name=accountstatus,proto3" json:"accountstatus,omitempty"`
	Twofa                    bool                 `protobuf:"varint,51,opt,name=twofa,proto3" json:"twofa,omitempty"`
	Invisible                bool                 `protobuf:"varint,52,opt,name=invisible,proto3" json:"invisible,omitempty"`
	RegionId                 string               `protobuf:"bytes,53,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	BlockToPost              bool                 `protobuf:"varint,55,opt,name=block_to_post,json=blockToPost,proto3" json:"block_to_post,omitempty"`
	Deleted                  bool                 `protobuf:"varint,56,opt,name=deleted,proto3" json:"deleted,omitempty"`
	ManualVerification       bool                 `protobuf:"varint,57,opt,name=manual_verification,json=manualVerification,proto3" json:"manual_verification,omitempty"`
	ManualVerificationDate   string               `protobuf:"bytes,58,opt,name=manual_verification_date,json=manualVerificationDate,proto3" json:"manual_verification_date,omitempty"`
	ManualVerificationReason string               `protobuf:"bytes,59,opt,name=manual_verification_reason,json=manualVerificationReason,proto3" json:"manual_verification_reason,omitempty"`
	ManualVerificationResult string               `protobuf:"bytes,60,opt,name=manual_verification_result,json=manualVerificationResult,proto3" json:"manual_verification_result,omitempty"`
	MiddleName               string               `protobuf:"bytes,61,opt,name=middle_name,json=middleName,proto3" json:"middle_name,omitempty"`
	TransitBalance           float64              `protobuf:"fixed64,62,opt,name=transit_balance,json=transitBalance,proto3" json:"transit_balance,omitempty"`
	ExanteAccountId          string               `protobuf:"bytes,63,opt,name=exante_account_id,json=exanteAccountId,proto3" json:"exante_account_id,omitempty"`
	RegistrationStep         string               `protobuf:"bytes,64,opt,name=registration_step,json=registrationStep,proto3" json:"registration_step,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_salesforce_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_salesforce_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_salesforce_proto_rawDescGZIP(), []int{3}
}

func (x *Account) GetCountryOfResidence() string {
	if x != nil {
		return x.CountryOfResidence
	}
	return ""
}

func (x *Account) GetCountryOfCitizenship() string {
	if x != nil {
		return x.CountryOfCitizenship
	}
	return ""
}

func (x *Account) GetPostCode() string {
	if x != nil {
		return x.PostCode
	}
	return ""
}

func (x *Account) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Account) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Account) GetKycStatus() string {
	if x != nil {
		return x.KycStatus
	}
	return ""
}

func (x *Account) GetRejectReason() string {
	if x != nil {
		return x.RejectReason
	}
	return ""
}

func (x *Account) GetKycUpdatedAt() string {
	if x != nil {
		return x.KycUpdatedAt
	}
	return ""
}

func (x *Account) GetTaxResidence() string {
	if x != nil {
		return x.TaxResidence
	}
	return ""
}

func (x *Account) GetTaxId() string {
	if x != nil {
		return x.TaxId
	}
	return ""
}

func (x *Account) GetPassportSubmitted() bool {
	if x != nil {
		return x.PassportSubmitted
	}
	return false
}

func (x *Account) GetPassportNumber() string {
	if x != nil {
		return x.PassportNumber
	}
	return ""
}

func (x *Account) GetPassportExpiryDate() string {
	if x != nil {
		return x.PassportExpiryDate
	}
	return ""
}

func (x *Account) GetPassportProvidedDate() string {
	if x != nil {
		return x.PassportProvidedDate
	}
	return ""
}

func (x *Account) GetPassportPhoto() string {
	if x != nil {
		return x.PassportPhoto
	}
	return ""
}

func (x *Account) GetPassportVerified() bool {
	if x != nil {
		return x.PassportVerified
	}
	return false
}

func (x *Account) GetPassportVerifiedTimestamp() string {
	if x != nil {
		return x.PassportVerifiedTimestamp
	}
	return ""
}

func (x *Account) GetPhotoVideoSubmitted() bool {
	if x != nil {
		return x.PhotoVideoSubmitted
	}
	return false
}

func (x *Account) GetPhotoVideoMatchPassport() bool {
	if x != nil {
		return x.PhotoVideoMatchPassport
	}
	return false
}

func (x *Account) GetIsTestAccount() bool {
	if x != nil {
		return x.IsTestAccount
	}
	return false
}

func (x *Account) GetFirstname() string {
	if x != nil {
		return x.Firstname
	}
	return ""
}

func (x *Account) GetLastname() string {
	if x != nil {
		return x.Lastname
	}
	return ""
}

func (x *Account) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Account) GetSelfiePhoto() string {
	if x != nil {
		return x.SelfiePhoto
	}
	return ""
}

func (x *Account) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Account) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *Account) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Account) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Account) GetPreferredName() string {
	if x != nil {
		return x.PreferredName
	}
	return ""
}

func (x *Account) GetUserImage() string {
	if x != nil {
		return x.UserImage
	}
	return ""
}

func (x *Account) GetIdentityFront() string {
	if x != nil {
		return x.IdentityFront
	}
	return ""
}

func (x *Account) GetIdentityBack() string {
	if x != nil {
		return x.IdentityBack
	}
	return ""
}

func (x *Account) GetInspectionId() string {
	if x != nil {
		return x.InspectionId
	}
	return ""
}

func (x *Account) GetPorDocument() string {
	if x != nil {
		return x.PorDocument
	}
	return ""
}

func (x *Account) GetPorSubmitted() bool {
	if x != nil {
		return x.PorSubmitted
	}
	return false
}

func (x *Account) GetPorProvidedDate() string {
	if x != nil {
		return x.PorProvidedDate
	}
	return ""
}

func (x *Account) GetPorVerified() bool {
	if x != nil {
		return x.PorVerified
	}
	return false
}

func (x *Account) GetPorVerifiedTimestamp() string {
	if x != nil {
		return x.PorVerifiedTimestamp
	}
	return ""
}

func (x *Account) GetLastLogin() string {
	if x != nil {
		return x.LastLogin
	}
	return ""
}

func (x *Account) GetFirstLogin() string {
	if x != nil {
		return x.FirstLogin
	}
	return ""
}

func (x *Account) GetLegalEntity() string {
	if x != nil {
		return x.LegalEntity
	}
	return ""
}

func (x *Account) GetFinance() *AccountFinance {
	if x != nil {
		return x.Finance
	}
	return nil
}

func (x *Account) GetRestrictions() *AccountRestrictions {
	if x != nil {
		return x.Restrictions
	}
	return nil
}

func (x *Account) GetIdentityApplication() *IdentityApplicaiton {
	if x != nil {
		return x.IdentityApplication
	}
	return nil
}

func (x *Account) GetActivity() string {
	if x != nil {
		return x.Activity
	}
	return ""
}

func (x *Account) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *Account) GetPassportIssuedBy() string {
	if x != nil {
		return x.PassportIssuedBy
	}
	return ""
}

func (x *Account) GetLearnedFrom() string {
	if x != nil {
		return x.LearnedFrom
	}
	return ""
}

func (x *Account) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Account) GetAccountstatus() string {
	if x != nil {
		return x.Accountstatus
	}
	return ""
}

func (x *Account) GetTwofa() bool {
	if x != nil {
		return x.Twofa
	}
	return false
}

func (x *Account) GetInvisible() bool {
	if x != nil {
		return x.Invisible
	}
	return false
}

func (x *Account) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *Account) GetBlockToPost() bool {
	if x != nil {
		return x.BlockToPost
	}
	return false
}

func (x *Account) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *Account) GetManualVerification() bool {
	if x != nil {
		return x.ManualVerification
	}
	return false
}

func (x *Account) GetManualVerificationDate() string {
	if x != nil {
		return x.ManualVerificationDate
	}
	return ""
}

func (x *Account) GetManualVerificationReason() string {
	if x != nil {
		return x.ManualVerificationReason
	}
	return ""
}

func (x *Account) GetManualVerificationResult() string {
	if x != nil {
		return x.ManualVerificationResult
	}
	return ""
}

func (x *Account) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *Account) GetTransitBalance() float64 {
	if x != nil {
		return x.TransitBalance
	}
	return 0
}

func (x *Account) GetExanteAccountId() string {
	if x != nil {
		return x.ExanteAccountId
	}
	return ""
}

func (x *Account) GetRegistrationStep() string {
	if x != nil {
		return x.RegistrationStep
	}
	return ""
}

type AccountFinance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepositExists    bool   `protobuf:"varint,1,opt,name=deposit_exists,json=depositExists,proto3" json:"deposit_exists,omitempty"`
	FirstDepositDate string `protobuf:"bytes,2,opt,name=first_deposit_date,json=firstDepositDate,proto3" json:"first_deposit_date,omitempty"`
	LastDepositDate  string `protobuf:"bytes,3,opt,name=last_deposit_date,json=lastDepositDate,proto3" json:"last_deposit_date,omitempty"`
	TradeExists      bool   `protobuf:"varint,4,opt,name=trade_exists,json=tradeExists,proto3" json:"trade_exists,omitempty"`
	FirstTradeDate   string `protobuf:"bytes,5,opt,name=first_trade_date,json=firstTradeDate,proto3" json:"first_trade_date,omitempty"`
	LastTradeDate    string `protobuf:"bytes,6,opt,name=last_trade_date,json=lastTradeDate,proto3" json:"last_trade_date,omitempty"`
	TotalDeposits    string `protobuf:"bytes,7,opt,name=total_deposits,json=totalDeposits,proto3" json:"total_deposits,omitempty"`
	TotalWithdrawals string `protobuf:"bytes,8,opt,name=total_withdrawals,json=totalWithdrawals,proto3" json:"total_withdrawals,omitempty"`
	Aum              string `protobuf:"bytes,9,opt,name=aum,proto3" json:"aum,omitempty"`
}

func (x *AccountFinance) Reset() {
	*x = AccountFinance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_salesforce_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountFinance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountFinance) ProtoMessage() {}

func (x *AccountFinance) ProtoReflect() protoreflect.Message {
	mi := &file_salesforce_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountFinance.ProtoReflect.Descriptor instead.
func (*AccountFinance) Descriptor() ([]byte, []int) {
	return file_salesforce_proto_rawDescGZIP(), []int{4}
}

func (x *AccountFinance) GetDepositExists() bool {
	if x != nil {
		return x.DepositExists
	}
	return false
}

func (x *AccountFinance) GetFirstDepositDate() string {
	if x != nil {
		return x.FirstDepositDate
	}
	return ""
}

func (x *AccountFinance) GetLastDepositDate() string {
	if x != nil {
		return x.LastDepositDate
	}
	return ""
}

func (x *AccountFinance) GetTradeExists() bool {
	if x != nil {
		return x.TradeExists
	}
	return false
}

func (x *AccountFinance) GetFirstTradeDate() string {
	if x != nil {
		return x.FirstTradeDate
	}
	return ""
}

func (x *AccountFinance) GetLastTradeDate() string {
	if x != nil {
		return x.LastTradeDate
	}
	return ""
}

func (x *AccountFinance) GetTotalDeposits() string {
	if x != nil {
		return x.TotalDeposits
	}
	return ""
}

func (x *AccountFinance) GetTotalWithdrawals() string {
	if x != nil {
		return x.TotalWithdrawals
	}
	return ""
}

func (x *AccountFinance) GetAum() string {
	if x != nil {
		return x.Aum
	}
	return ""
}

type AccountRestrictions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingEnabled         bool `protobuf:"varint,1,opt,name=trading_enabled,json=tradingEnabled,proto3" json:"trading_enabled,omitempty"`
	DepositWithdrawEnabled bool `protobuf:"varint,2,opt,name=deposit_withdraw_enabled,json=depositWithdrawEnabled,proto3" json:"deposit_withdraw_enabled,omitempty"`
	CountryRestriction     bool `protobuf:"varint,3,opt,name=country_restriction,json=countryRestriction,proto3" json:"country_restriction,omitempty"`
	IsRestricted           bool `protobuf:"varint,4,opt,name=is_restricted,json=isRestricted,proto3" json:"is_restricted,omitempty"`
}

func (x *AccountRestrictions) Reset() {
	*x = AccountRestrictions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_salesforce_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRestrictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRestrictions) ProtoMessage() {}

func (x *AccountRestrictions) ProtoReflect() protoreflect.Message {
	mi := &file_salesforce_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRestrictions.ProtoReflect.Descriptor instead.
func (*AccountRestrictions) Descriptor() ([]byte, []int) {
	return file_salesforce_proto_rawDescGZIP(), []int{5}
}

func (x *AccountRestrictions) GetTradingEnabled() bool {
	if x != nil {
		return x.TradingEnabled
	}
	return false
}

func (x *AccountRestrictions) GetDepositWithdrawEnabled() bool {
	if x != nil {
		return x.DepositWithdrawEnabled
	}
	return false
}

func (x *AccountRestrictions) GetCountryRestriction() bool {
	if x != nil {
		return x.CountryRestriction
	}
	return false
}

func (x *AccountRestrictions) GetIsRestricted() bool {
	if x != nil {
		return x.IsRestricted
	}
	return false
}

type IdentityApplicaiton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *IdentityApplicaiton) Reset() {
	*x = IdentityApplicaiton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_salesforce_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityApplicaiton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityApplicaiton) ProtoMessage() {}

func (x *IdentityApplicaiton) ProtoReflect() protoreflect.Message {
	mi := &file_salesforce_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityApplicaiton.ProtoReflect.Descriptor instead.
func (*IdentityApplicaiton) Descriptor() ([]byte, []int) {
	return file_salesforce_proto_rawDescGZIP(), []int{6}
}

func (x *IdentityApplicaiton) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IdentityApplicaiton) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Url  string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_salesforce_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_salesforce_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_salesforce_proto_rawDescGZIP(), []int{7}
}

func (x *Document) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Document) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Document) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Tax struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount           string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	CompanyAccountId string `protobuf:"bytes,2,opt,name=company_account_id,json=companyAccountId,proto3" json:"company_account_id,omitempty"`
	OperationId      string `protobuf:"bytes,3,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	TaxType          string `protobuf:"bytes,4,opt,name=tax_type,json=taxType,proto3" json:"tax_type,omitempty"`
}

func (x *Tax) Reset() {
	*x = Tax{}
	if protoimpl.UnsafeEnabled {
		mi := &file_salesforce_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tax) ProtoMessage() {}

func (x *Tax) ProtoReflect() protoreflect.Message {
	mi := &file_salesforce_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tax.ProtoReflect.Descriptor instead.
func (*Tax) Descriptor() ([]byte, []int) {
	return file_salesforce_proto_rawDescGZIP(), []int{8}
}

func (x *Tax) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Tax) GetCompanyAccountId() string {
	if x != nil {
		return x.CompanyAccountId
	}
	return ""
}

func (x *Tax) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *Tax) GetTaxType() string {
	if x != nil {
		return x.TaxType
	}
	return ""
}

var File_salesforce_proto protoreflect.FileDescriptor

var file_salesforce_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x73,
	0x46, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69,
	0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x22, 0x4f, 0x0a, 0x10,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xb0, 0x01,
	0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xf5, 0x13, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x4f, 0x66, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x69, 0x74,
	0x69, 0x7a, 0x65, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x43, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x79,
	0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6b, 0x79, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0e, 0x6b, 0x79, 0x63, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x79, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x78,
	0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x78,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x78, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x12, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x61,
	0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x73, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x61,
	0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x61, 0x73, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x61, 0x73, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x73,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x69, 0x73, 0x54, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x6c, 0x66, 0x69, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x69, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x5f, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70,
	0x6f, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70,
	0x6f, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x6f,
	0x72, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x6f, 0x72, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x07, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x5b, 0x0a, 0x14, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x69, 0x74, 0x6f, 0x6e, 0x52, 0x13, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61,
	0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x42, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x31, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x77, 0x6f, 0x66, 0x61, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x74, 0x77, 0x6f, 0x66, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x6f,
	0x50, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2f,
	0x0a, 0x13, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x18, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x6d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x1a, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x65, 0x78, 0x61, 0x6e, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x61, 0x6e,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x65, 0x70,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x22, 0xec, 0x02, 0x0a, 0x0e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x61, 0x75, 0x6d, 0x22, 0xce, 0x01, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x22, 0x3d, 0x0a, 0x13, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x69, 0x74, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x44, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x89, 0x01,
	0x0a, 0x03, 0x54, 0x61, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x61, 0x78, 0x54, 0x79, 0x70, 0x65, 0x42, 0x1e, 0x5a, 0x1c, 0x67, 0x65, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_salesforce_proto_rawDescOnce sync.Once
	file_salesforce_proto_rawDescData = file_salesforce_proto_rawDesc
)

func file_salesforce_proto_rawDescGZIP() []byte {
	file_salesforce_proto_rawDescOnce.Do(func() {
		file_salesforce_proto_rawDescData = protoimpl.X.CompressGZIP(file_salesforce_proto_rawDescData)
	})
	return file_salesforce_proto_rawDescData
}

var file_salesforce_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_salesforce_proto_goTypes = []interface{}{
	(*NewsFeed)(nil),            // 0: integration_service.NewsFeed
	(*BrokerageAccount)(nil),    // 1: integration_service.BrokerageAccount
	(*Notification)(nil),        // 2: integration_service.Notification
	(*Account)(nil),             // 3: integration_service.Account
	(*AccountFinance)(nil),      // 4: integration_service.AccountFinance
	(*AccountRestrictions)(nil), // 5: integration_service.AccountRestrictions
	(*IdentityApplicaiton)(nil), // 6: integration_service.IdentityApplicaiton
	(*Document)(nil),            // 7: integration_service.Document
	(*Tax)(nil),                 // 8: integration_service.Tax
}
var file_salesforce_proto_depIdxs = []int32{
	4, // 0: integration_service.Account.finance:type_name -> integration_service.AccountFinance
	5, // 1: integration_service.Account.restrictions:type_name -> integration_service.AccountRestrictions
	6, // 2: integration_service.Account.identity_application:type_name -> integration_service.IdentityApplicaiton
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_salesforce_proto_init() }
func file_salesforce_proto_init() {
	if File_salesforce_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_salesforce_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsFeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_salesforce_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerageAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_salesforce_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_salesforce_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_salesforce_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountFinance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_salesforce_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountRestrictions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_salesforce_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityApplicaiton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_salesforce_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_salesforce_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tax); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_salesforce_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_salesforce_proto_goTypes,
		DependencyIndexes: file_salesforce_proto_depIdxs,
		MessageInfos:      file_salesforce_proto_msgTypes,
	}.Build()
	File_salesforce_proto = out.File
	file_salesforce_proto_rawDesc = nil
	file_salesforce_proto_goTypes = nil
	file_salesforce_proto_depIdxs = nil
}
