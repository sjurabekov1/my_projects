// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: salesforce_service.proto

package integration_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SalesforceServiceClient is the client API for SalesforceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SalesforceServiceClient interface {
	CreateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*CreateResponse, error)
	UpdateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*Account, error)
	CreateFinancialAccount(ctx context.Context, in *CreateFinancialAccountRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	CreateKYCData(ctx context.Context, in *CreateKYCRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	PurchaseStock(ctx context.Context, in *StockPurchaseRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	CreateTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	UpdateFinancialAccountBalance(ctx context.Context, in *UpdateFinancialAccountBalanceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetBrokerageAccount(ctx context.Context, in *GetBrokerageAccountRequest, opts ...grpc.CallOption) (*GetBrokerageAccountResponse, error)
	GetNewsFeeds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetNewsFeedsResponse, error)
	PostNewsFeeds(ctx context.Context, in *InvestorPostRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	CreateInstrument(ctx context.Context, in *CreateInstrumentRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	GetNotifications(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetNotificationsResponse, error)
	CreateCurrency(ctx context.Context, in *Currency, opts ...grpc.CallOption) (*CreateResponse, error)
	CreateOperationHistory(ctx context.Context, in *CreateOperationHistoryRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	GetStockID(ctx context.Context, in *GetStockIDRequest, opts ...grpc.CallOption) (*GetStockIDResponse, error)
	GetStockIdBySymbolId(ctx context.Context, in *GetStockIdBySymbolIdRequest, opts ...grpc.CallOption) (*GetStockIdBySymbolIdResponse, error)
	UpdateUserStock(ctx context.Context, in *UpdateUserStockRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	FetchDocuments(ctx context.Context, in *FetchDocumentsRequest, opts ...grpc.CallOption) (*FetchDocumentsResponse, error)
	GetRegionID(ctx context.Context, in *GetRegionIDRequest, opts ...grpc.CallOption) (*GetRegionIDResponse, error)
	GetTaxList(ctx context.Context, in *GetTaxListRequest, opts ...grpc.CallOption) (*GetTaxListResponse, error)
	GetComissionGroupID(ctx context.Context, in *GetComissionGroupIDRequest, opts ...grpc.CallOption) (*GetComissionGroupIDResponse, error)
	GetDocumentByPublishedVersionId(ctx context.Context, in *GetDocumentByPublishedVersionIdRequest, opts ...grpc.CallOption) (*GetDocumentByPublishedVersionIdResponse, error)
	CreateTaxOfOperation(ctx context.Context, in *CreateTaxOfOperationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetSymbolIDBySalesforceID(ctx context.Context, in *GetSymbolIDBySalesforceIDRequest, opts ...grpc.CallOption) (*GetSymbolIDBySalesforceIDResponse, error)
	GetOperatingHour(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetOperatingHourResponse, error)
	GetObjectByPrefix(ctx context.Context, in *GetObjectByPrefixRequest, opts ...grpc.CallOption) (*GetObjectByPrefixResponse, error)
	GetContentDocument(ctx context.Context, in *GetContentDocumentRequest, opts ...grpc.CallOption) (*GetContentDocumentResponse, error)
	GetNotificationTemplate(ctx context.Context, in *GetNotificationTemplateRequest, opts ...grpc.CallOption) (*GetNotificationTemplateResponse, error)
	CreateDividientByInstrument(ctx context.Context, in *CreateDividientByInstrumentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error)
	DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CommentToPost(ctx context.Context, in *CommentToPostRequest, opts ...grpc.CallOption) (*CommentToPostResponse, error)
	UpdateComment(ctx context.Context, in *CommentToPostRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (*GetCommentsResponse, error)
	LikeToPost(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ToFollow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetPosts(ctx context.Context, in *GetPostsRequest, opts ...grpc.CallOption) (*GetPostsResponse, error)
	GetOnePost(ctx context.Context, in *GetOnePostRequest, opts ...grpc.CallOption) (*Post, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteLike(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UnFollow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateAssets(ctx context.Context, in *CreateAssetsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetInstrumentsOfPosts(ctx context.Context, in *GetInstrumentsOfPostsRequest, opts ...grpc.CallOption) (*GetInstrumentsOfPostsResponse, error)
	DeleteInstrument(ctx context.Context, in *DeleteInstrumentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	IsLiked(ctx context.Context, in *IsLikedRequest, opts ...grpc.CallOption) (*IsLikedResponse, error)
	GetUnsentNotification(ctx context.Context, in *GetUnsentNotificationRequest, opts ...grpc.CallOption) (*GetUnsentNotificationResponse, error)
	CreateNotification(ctx context.Context, in *Notificationn, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateNotification(ctx context.Context, in *Notificationn, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateNotificationComposite(ctx context.Context, in *CreateNotificationCompositeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetPostWriterData(ctx context.Context, in *GetPostWriterDataRequest, opts ...grpc.CallOption) (*GetPostWriterDataResponse, error)
	BulkInsert(ctx context.Context, opts ...grpc.CallOption) (SalesforceService_BulkInsertClient, error)
	UpdateAccountComposite(ctx context.Context, in *UpdateAccountCompositeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateTransaction(ctx context.Context, in *UpdateTransactionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	UpdateTransactionNew(ctx context.Context, in *UpdateTransactionNewRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateFinancialAccount(ctx context.Context, in *UpdateFinancialAccountRequest, opts ...grpc.CallOption) (*UpdateFinancialAccountResponse, error)
	UpdateFinancialAccountComposite(ctx context.Context, in *UpdateFinancialAccountCompositeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateUserStockComposite(ctx context.Context, in *UpdateUserStockCompositeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetFinancialAccount(ctx context.Context, in *GetFinancialAccountRequest, opts ...grpc.CallOption) (*GetFinancialAccountResponse, error)
	UpdateModeratedTrading(ctx context.Context, in *UpdateModeratedTradingRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type salesforceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSalesforceServiceClient(cc grpc.ClientConnInterface) SalesforceServiceClient {
	return &salesforceServiceClient{cc}
}

func (c *salesforceServiceClient) CreateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) UpdateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) CreateFinancialAccount(ctx context.Context, in *CreateFinancialAccountRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/CreateFinancialAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) CreateKYCData(ctx context.Context, in *CreateKYCRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/CreateKYCData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) PurchaseStock(ctx context.Context, in *StockPurchaseRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/PurchaseStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) CreateTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) UpdateFinancialAccountBalance(ctx context.Context, in *UpdateFinancialAccountBalanceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/UpdateFinancialAccountBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) GetBrokerageAccount(ctx context.Context, in *GetBrokerageAccountRequest, opts ...grpc.CallOption) (*GetBrokerageAccountResponse, error) {
	out := new(GetBrokerageAccountResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/GetBrokerageAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) GetNewsFeeds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetNewsFeedsResponse, error) {
	out := new(GetNewsFeedsResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/GetNewsFeeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) PostNewsFeeds(ctx context.Context, in *InvestorPostRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/PostNewsFeeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) CreateInstrument(ctx context.Context, in *CreateInstrumentRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/CreateInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) GetNotifications(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetNotificationsResponse, error) {
	out := new(GetNotificationsResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/GetNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) CreateCurrency(ctx context.Context, in *Currency, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/CreateCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) CreateOperationHistory(ctx context.Context, in *CreateOperationHistoryRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/CreateOperationHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) GetStockID(ctx context.Context, in *GetStockIDRequest, opts ...grpc.CallOption) (*GetStockIDResponse, error) {
	out := new(GetStockIDResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/GetStockID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) GetStockIdBySymbolId(ctx context.Context, in *GetStockIdBySymbolIdRequest, opts ...grpc.CallOption) (*GetStockIdBySymbolIdResponse, error) {
	out := new(GetStockIdBySymbolIdResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/GetStockIdBySymbolId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) UpdateUserStock(ctx context.Context, in *UpdateUserStockRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/UpdateUserStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) FetchDocuments(ctx context.Context, in *FetchDocumentsRequest, opts ...grpc.CallOption) (*FetchDocumentsResponse, error) {
	out := new(FetchDocumentsResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/FetchDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) GetRegionID(ctx context.Context, in *GetRegionIDRequest, opts ...grpc.CallOption) (*GetRegionIDResponse, error) {
	out := new(GetRegionIDResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/GetRegionID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) GetTaxList(ctx context.Context, in *GetTaxListRequest, opts ...grpc.CallOption) (*GetTaxListResponse, error) {
	out := new(GetTaxListResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/GetTaxList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) GetComissionGroupID(ctx context.Context, in *GetComissionGroupIDRequest, opts ...grpc.CallOption) (*GetComissionGroupIDResponse, error) {
	out := new(GetComissionGroupIDResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/GetComissionGroupID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) GetDocumentByPublishedVersionId(ctx context.Context, in *GetDocumentByPublishedVersionIdRequest, opts ...grpc.CallOption) (*GetDocumentByPublishedVersionIdResponse, error) {
	out := new(GetDocumentByPublishedVersionIdResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/GetDocumentByPublishedVersionId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) CreateTaxOfOperation(ctx context.Context, in *CreateTaxOfOperationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/CreateTaxOfOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) GetSymbolIDBySalesforceID(ctx context.Context, in *GetSymbolIDBySalesforceIDRequest, opts ...grpc.CallOption) (*GetSymbolIDBySalesforceIDResponse, error) {
	out := new(GetSymbolIDBySalesforceIDResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/GetSymbolIDBySalesforceID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) GetOperatingHour(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetOperatingHourResponse, error) {
	out := new(GetOperatingHourResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/GetOperatingHour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) GetObjectByPrefix(ctx context.Context, in *GetObjectByPrefixRequest, opts ...grpc.CallOption) (*GetObjectByPrefixResponse, error) {
	out := new(GetObjectByPrefixResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/GetObjectByPrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) GetContentDocument(ctx context.Context, in *GetContentDocumentRequest, opts ...grpc.CallOption) (*GetContentDocumentResponse, error) {
	out := new(GetContentDocumentResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/GetContentDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) GetNotificationTemplate(ctx context.Context, in *GetNotificationTemplateRequest, opts ...grpc.CallOption) (*GetNotificationTemplateResponse, error) {
	out := new(GetNotificationTemplateResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/GetNotificationTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) CreateDividientByInstrument(ctx context.Context, in *CreateDividientByInstrumentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/CreateDividientByInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error) {
	out := new(CreatePostResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/DeletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) UpdatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/UpdatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) CommentToPost(ctx context.Context, in *CommentToPostRequest, opts ...grpc.CallOption) (*CommentToPostResponse, error) {
	out := new(CommentToPostResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/CommentToPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) UpdateComment(ctx context.Context, in *CommentToPostRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/UpdateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (*GetCommentsResponse, error) {
	out := new(GetCommentsResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/GetComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) LikeToPost(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/LikeToPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) ToFollow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/ToFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) GetPosts(ctx context.Context, in *GetPostsRequest, opts ...grpc.CallOption) (*GetPostsResponse, error) {
	out := new(GetPostsResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/GetPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) GetOnePost(ctx context.Context, in *GetOnePostRequest, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/GetOnePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) DeleteLike(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/DeleteLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) UnFollow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/UnFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) CreateAssets(ctx context.Context, in *CreateAssetsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/CreateAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) GetInstrumentsOfPosts(ctx context.Context, in *GetInstrumentsOfPostsRequest, opts ...grpc.CallOption) (*GetInstrumentsOfPostsResponse, error) {
	out := new(GetInstrumentsOfPostsResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/GetInstrumentsOfPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) DeleteInstrument(ctx context.Context, in *DeleteInstrumentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/DeleteInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) IsLiked(ctx context.Context, in *IsLikedRequest, opts ...grpc.CallOption) (*IsLikedResponse, error) {
	out := new(IsLikedResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/IsLiked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) GetUnsentNotification(ctx context.Context, in *GetUnsentNotificationRequest, opts ...grpc.CallOption) (*GetUnsentNotificationResponse, error) {
	out := new(GetUnsentNotificationResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/GetUnsentNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) CreateNotification(ctx context.Context, in *Notificationn, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/CreateNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) UpdateNotification(ctx context.Context, in *Notificationn, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/UpdateNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) CreateNotificationComposite(ctx context.Context, in *CreateNotificationCompositeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/CreateNotificationComposite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) GetPostWriterData(ctx context.Context, in *GetPostWriterDataRequest, opts ...grpc.CallOption) (*GetPostWriterDataResponse, error) {
	out := new(GetPostWriterDataResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/GetPostWriterData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) BulkInsert(ctx context.Context, opts ...grpc.CallOption) (SalesforceService_BulkInsertClient, error) {
	stream, err := c.cc.NewStream(ctx, &SalesforceService_ServiceDesc.Streams[0], "/integration_service.SalesforceService/BulkInsert", opts...)
	if err != nil {
		return nil, err
	}
	x := &salesforceServiceBulkInsertClient{stream}
	return x, nil
}

type SalesforceService_BulkInsertClient interface {
	Send(*BulkInsertRequest) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type salesforceServiceBulkInsertClient struct {
	grpc.ClientStream
}

func (x *salesforceServiceBulkInsertClient) Send(m *BulkInsertRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *salesforceServiceBulkInsertClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *salesforceServiceClient) UpdateAccountComposite(ctx context.Context, in *UpdateAccountCompositeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/UpdateAccountComposite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) UpdateTransaction(ctx context.Context, in *UpdateTransactionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/UpdateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) UpdateTransactionNew(ctx context.Context, in *UpdateTransactionNewRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/UpdateTransactionNew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) UpdateFinancialAccount(ctx context.Context, in *UpdateFinancialAccountRequest, opts ...grpc.CallOption) (*UpdateFinancialAccountResponse, error) {
	out := new(UpdateFinancialAccountResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/UpdateFinancialAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) UpdateFinancialAccountComposite(ctx context.Context, in *UpdateFinancialAccountCompositeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/UpdateFinancialAccountComposite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) UpdateUserStockComposite(ctx context.Context, in *UpdateUserStockCompositeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/UpdateUserStockComposite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) GetFinancialAccount(ctx context.Context, in *GetFinancialAccountRequest, opts ...grpc.CallOption) (*GetFinancialAccountResponse, error) {
	out := new(GetFinancialAccountResponse)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/GetFinancialAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceServiceClient) UpdateModeratedTrading(ctx context.Context, in *UpdateModeratedTradingRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/integration_service.SalesforceService/UpdateModeratedTrading", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SalesforceServiceServer is the server API for SalesforceService service.
// All implementations must embed UnimplementedSalesforceServiceServer
// for forward compatibility
type SalesforceServiceServer interface {
	CreateAccount(context.Context, *Account) (*CreateResponse, error)
	UpdateAccount(context.Context, *Account) (*empty.Empty, error)
	GetAccount(context.Context, *GetAccountRequest) (*Account, error)
	CreateFinancialAccount(context.Context, *CreateFinancialAccountRequest) (*CreateResponse, error)
	CreateKYCData(context.Context, *CreateKYCRequest) (*CreateResponse, error)
	PurchaseStock(context.Context, *StockPurchaseRequest) (*CreateResponse, error)
	CreateTransaction(context.Context, *TransactionRequest) (*CreateResponse, error)
	UpdateFinancialAccountBalance(context.Context, *UpdateFinancialAccountBalanceRequest) (*empty.Empty, error)
	GetBrokerageAccount(context.Context, *GetBrokerageAccountRequest) (*GetBrokerageAccountResponse, error)
	GetNewsFeeds(context.Context, *empty.Empty) (*GetNewsFeedsResponse, error)
	PostNewsFeeds(context.Context, *InvestorPostRequest) (*CreateResponse, error)
	CreateInstrument(context.Context, *CreateInstrumentRequest) (*CreateResponse, error)
	GetNotifications(context.Context, *empty.Empty) (*GetNotificationsResponse, error)
	CreateCurrency(context.Context, *Currency) (*CreateResponse, error)
	CreateOperationHistory(context.Context, *CreateOperationHistoryRequest) (*CreateResponse, error)
	GetStockID(context.Context, *GetStockIDRequest) (*GetStockIDResponse, error)
	GetStockIdBySymbolId(context.Context, *GetStockIdBySymbolIdRequest) (*GetStockIdBySymbolIdResponse, error)
	UpdateUserStock(context.Context, *UpdateUserStockRequest) (*empty.Empty, error)
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateResponse, error)
	FetchDocuments(context.Context, *FetchDocumentsRequest) (*FetchDocumentsResponse, error)
	GetRegionID(context.Context, *GetRegionIDRequest) (*GetRegionIDResponse, error)
	GetTaxList(context.Context, *GetTaxListRequest) (*GetTaxListResponse, error)
	GetComissionGroupID(context.Context, *GetComissionGroupIDRequest) (*GetComissionGroupIDResponse, error)
	GetDocumentByPublishedVersionId(context.Context, *GetDocumentByPublishedVersionIdRequest) (*GetDocumentByPublishedVersionIdResponse, error)
	CreateTaxOfOperation(context.Context, *CreateTaxOfOperationRequest) (*empty.Empty, error)
	GetSymbolIDBySalesforceID(context.Context, *GetSymbolIDBySalesforceIDRequest) (*GetSymbolIDBySalesforceIDResponse, error)
	GetOperatingHour(context.Context, *empty.Empty) (*GetOperatingHourResponse, error)
	GetObjectByPrefix(context.Context, *GetObjectByPrefixRequest) (*GetObjectByPrefixResponse, error)
	GetContentDocument(context.Context, *GetContentDocumentRequest) (*GetContentDocumentResponse, error)
	GetNotificationTemplate(context.Context, *GetNotificationTemplateRequest) (*GetNotificationTemplateResponse, error)
	CreateDividientByInstrument(context.Context, *CreateDividientByInstrumentRequest) (*empty.Empty, error)
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error)
	DeletePost(context.Context, *DeletePostRequest) (*empty.Empty, error)
	UpdatePost(context.Context, *CreatePostRequest) (*empty.Empty, error)
	CommentToPost(context.Context, *CommentToPostRequest) (*CommentToPostResponse, error)
	UpdateComment(context.Context, *CommentToPostRequest) (*empty.Empty, error)
	GetComments(context.Context, *GetCommentsRequest) (*GetCommentsResponse, error)
	LikeToPost(context.Context, *LikeRequest) (*empty.Empty, error)
	ToFollow(context.Context, *FollowRequest) (*empty.Empty, error)
	GetPosts(context.Context, *GetPostsRequest) (*GetPostsResponse, error)
	GetOnePost(context.Context, *GetOnePostRequest) (*Post, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*empty.Empty, error)
	DeleteLike(context.Context, *LikeRequest) (*empty.Empty, error)
	UnFollow(context.Context, *FollowRequest) (*empty.Empty, error)
	CreateAssets(context.Context, *CreateAssetsRequest) (*empty.Empty, error)
	GetInstrumentsOfPosts(context.Context, *GetInstrumentsOfPostsRequest) (*GetInstrumentsOfPostsResponse, error)
	DeleteInstrument(context.Context, *DeleteInstrumentRequest) (*empty.Empty, error)
	IsLiked(context.Context, *IsLikedRequest) (*IsLikedResponse, error)
	GetUnsentNotification(context.Context, *GetUnsentNotificationRequest) (*GetUnsentNotificationResponse, error)
	CreateNotification(context.Context, *Notificationn) (*empty.Empty, error)
	UpdateNotification(context.Context, *Notificationn) (*empty.Empty, error)
	CreateNotificationComposite(context.Context, *CreateNotificationCompositeRequest) (*empty.Empty, error)
	GetPostWriterData(context.Context, *GetPostWriterDataRequest) (*GetPostWriterDataResponse, error)
	BulkInsert(SalesforceService_BulkInsertServer) error
	UpdateAccountComposite(context.Context, *UpdateAccountCompositeRequest) (*empty.Empty, error)
	UpdateTransaction(context.Context, *UpdateTransactionRequest) (*empty.Empty, error)
	GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error)
	UpdateTransactionNew(context.Context, *UpdateTransactionNewRequest) (*empty.Empty, error)
	UpdateFinancialAccount(context.Context, *UpdateFinancialAccountRequest) (*UpdateFinancialAccountResponse, error)
	UpdateFinancialAccountComposite(context.Context, *UpdateFinancialAccountCompositeRequest) (*empty.Empty, error)
	UpdateUserStockComposite(context.Context, *UpdateUserStockCompositeRequest) (*empty.Empty, error)
	GetFinancialAccount(context.Context, *GetFinancialAccountRequest) (*GetFinancialAccountResponse, error)
	UpdateModeratedTrading(context.Context, *UpdateModeratedTradingRequest) (*empty.Empty, error)
	mustEmbedUnimplementedSalesforceServiceServer()
}

// UnimplementedSalesforceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSalesforceServiceServer struct {
}

func (UnimplementedSalesforceServiceServer) CreateAccount(context.Context, *Account) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedSalesforceServiceServer) UpdateAccount(context.Context, *Account) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedSalesforceServiceServer) GetAccount(context.Context, *GetAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedSalesforceServiceServer) CreateFinancialAccount(context.Context, *CreateFinancialAccountRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFinancialAccount not implemented")
}
func (UnimplementedSalesforceServiceServer) CreateKYCData(context.Context, *CreateKYCRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKYCData not implemented")
}
func (UnimplementedSalesforceServiceServer) PurchaseStock(context.Context, *StockPurchaseRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseStock not implemented")
}
func (UnimplementedSalesforceServiceServer) CreateTransaction(context.Context, *TransactionRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedSalesforceServiceServer) UpdateFinancialAccountBalance(context.Context, *UpdateFinancialAccountBalanceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFinancialAccountBalance not implemented")
}
func (UnimplementedSalesforceServiceServer) GetBrokerageAccount(context.Context, *GetBrokerageAccountRequest) (*GetBrokerageAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrokerageAccount not implemented")
}
func (UnimplementedSalesforceServiceServer) GetNewsFeeds(context.Context, *empty.Empty) (*GetNewsFeedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewsFeeds not implemented")
}
func (UnimplementedSalesforceServiceServer) PostNewsFeeds(context.Context, *InvestorPostRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostNewsFeeds not implemented")
}
func (UnimplementedSalesforceServiceServer) CreateInstrument(context.Context, *CreateInstrumentRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInstrument not implemented")
}
func (UnimplementedSalesforceServiceServer) GetNotifications(context.Context, *empty.Empty) (*GetNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifications not implemented")
}
func (UnimplementedSalesforceServiceServer) CreateCurrency(context.Context, *Currency) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCurrency not implemented")
}
func (UnimplementedSalesforceServiceServer) CreateOperationHistory(context.Context, *CreateOperationHistoryRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOperationHistory not implemented")
}
func (UnimplementedSalesforceServiceServer) GetStockID(context.Context, *GetStockIDRequest) (*GetStockIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockID not implemented")
}
func (UnimplementedSalesforceServiceServer) GetStockIdBySymbolId(context.Context, *GetStockIdBySymbolIdRequest) (*GetStockIdBySymbolIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockIdBySymbolId not implemented")
}
func (UnimplementedSalesforceServiceServer) UpdateUserStock(context.Context, *UpdateUserStockRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserStock not implemented")
}
func (UnimplementedSalesforceServiceServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedSalesforceServiceServer) FetchDocuments(context.Context, *FetchDocumentsRequest) (*FetchDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchDocuments not implemented")
}
func (UnimplementedSalesforceServiceServer) GetRegionID(context.Context, *GetRegionIDRequest) (*GetRegionIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegionID not implemented")
}
func (UnimplementedSalesforceServiceServer) GetTaxList(context.Context, *GetTaxListRequest) (*GetTaxListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaxList not implemented")
}
func (UnimplementedSalesforceServiceServer) GetComissionGroupID(context.Context, *GetComissionGroupIDRequest) (*GetComissionGroupIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComissionGroupID not implemented")
}
func (UnimplementedSalesforceServiceServer) GetDocumentByPublishedVersionId(context.Context, *GetDocumentByPublishedVersionIdRequest) (*GetDocumentByPublishedVersionIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentByPublishedVersionId not implemented")
}
func (UnimplementedSalesforceServiceServer) CreateTaxOfOperation(context.Context, *CreateTaxOfOperationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaxOfOperation not implemented")
}
func (UnimplementedSalesforceServiceServer) GetSymbolIDBySalesforceID(context.Context, *GetSymbolIDBySalesforceIDRequest) (*GetSymbolIDBySalesforceIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSymbolIDBySalesforceID not implemented")
}
func (UnimplementedSalesforceServiceServer) GetOperatingHour(context.Context, *empty.Empty) (*GetOperatingHourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatingHour not implemented")
}
func (UnimplementedSalesforceServiceServer) GetObjectByPrefix(context.Context, *GetObjectByPrefixRequest) (*GetObjectByPrefixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectByPrefix not implemented")
}
func (UnimplementedSalesforceServiceServer) GetContentDocument(context.Context, *GetContentDocumentRequest) (*GetContentDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContentDocument not implemented")
}
func (UnimplementedSalesforceServiceServer) GetNotificationTemplate(context.Context, *GetNotificationTemplateRequest) (*GetNotificationTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationTemplate not implemented")
}
func (UnimplementedSalesforceServiceServer) CreateDividientByInstrument(context.Context, *CreateDividientByInstrumentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDividientByInstrument not implemented")
}
func (UnimplementedSalesforceServiceServer) CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedSalesforceServiceServer) DeletePost(context.Context, *DeletePostRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedSalesforceServiceServer) UpdatePost(context.Context, *CreatePostRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedSalesforceServiceServer) CommentToPost(context.Context, *CommentToPostRequest) (*CommentToPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentToPost not implemented")
}
func (UnimplementedSalesforceServiceServer) UpdateComment(context.Context, *CommentToPostRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedSalesforceServiceServer) GetComments(context.Context, *GetCommentsRequest) (*GetCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComments not implemented")
}
func (UnimplementedSalesforceServiceServer) LikeToPost(context.Context, *LikeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeToPost not implemented")
}
func (UnimplementedSalesforceServiceServer) ToFollow(context.Context, *FollowRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToFollow not implemented")
}
func (UnimplementedSalesforceServiceServer) GetPosts(context.Context, *GetPostsRequest) (*GetPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosts not implemented")
}
func (UnimplementedSalesforceServiceServer) GetOnePost(context.Context, *GetOnePostRequest) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnePost not implemented")
}
func (UnimplementedSalesforceServiceServer) DeleteComment(context.Context, *DeleteCommentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedSalesforceServiceServer) DeleteLike(context.Context, *LikeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLike not implemented")
}
func (UnimplementedSalesforceServiceServer) UnFollow(context.Context, *FollowRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnFollow not implemented")
}
func (UnimplementedSalesforceServiceServer) CreateAssets(context.Context, *CreateAssetsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssets not implemented")
}
func (UnimplementedSalesforceServiceServer) GetInstrumentsOfPosts(context.Context, *GetInstrumentsOfPostsRequest) (*GetInstrumentsOfPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstrumentsOfPosts not implemented")
}
func (UnimplementedSalesforceServiceServer) DeleteInstrument(context.Context, *DeleteInstrumentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInstrument not implemented")
}
func (UnimplementedSalesforceServiceServer) IsLiked(context.Context, *IsLikedRequest) (*IsLikedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLiked not implemented")
}
func (UnimplementedSalesforceServiceServer) GetUnsentNotification(context.Context, *GetUnsentNotificationRequest) (*GetUnsentNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnsentNotification not implemented")
}
func (UnimplementedSalesforceServiceServer) CreateNotification(context.Context, *Notificationn) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotification not implemented")
}
func (UnimplementedSalesforceServiceServer) UpdateNotification(context.Context, *Notificationn) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotification not implemented")
}
func (UnimplementedSalesforceServiceServer) CreateNotificationComposite(context.Context, *CreateNotificationCompositeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotificationComposite not implemented")
}
func (UnimplementedSalesforceServiceServer) GetPostWriterData(context.Context, *GetPostWriterDataRequest) (*GetPostWriterDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostWriterData not implemented")
}
func (UnimplementedSalesforceServiceServer) BulkInsert(SalesforceService_BulkInsertServer) error {
	return status.Errorf(codes.Unimplemented, "method BulkInsert not implemented")
}
func (UnimplementedSalesforceServiceServer) UpdateAccountComposite(context.Context, *UpdateAccountCompositeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountComposite not implemented")
}
func (UnimplementedSalesforceServiceServer) UpdateTransaction(context.Context, *UpdateTransactionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransaction not implemented")
}
func (UnimplementedSalesforceServiceServer) GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedSalesforceServiceServer) UpdateTransactionNew(context.Context, *UpdateTransactionNewRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransactionNew not implemented")
}
func (UnimplementedSalesforceServiceServer) UpdateFinancialAccount(context.Context, *UpdateFinancialAccountRequest) (*UpdateFinancialAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFinancialAccount not implemented")
}
func (UnimplementedSalesforceServiceServer) UpdateFinancialAccountComposite(context.Context, *UpdateFinancialAccountCompositeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFinancialAccountComposite not implemented")
}
func (UnimplementedSalesforceServiceServer) UpdateUserStockComposite(context.Context, *UpdateUserStockCompositeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserStockComposite not implemented")
}
func (UnimplementedSalesforceServiceServer) GetFinancialAccount(context.Context, *GetFinancialAccountRequest) (*GetFinancialAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinancialAccount not implemented")
}
func (UnimplementedSalesforceServiceServer) UpdateModeratedTrading(context.Context, *UpdateModeratedTradingRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModeratedTrading not implemented")
}
func (UnimplementedSalesforceServiceServer) mustEmbedUnimplementedSalesforceServiceServer() {}

// UnsafeSalesforceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SalesforceServiceServer will
// result in compilation errors.
type UnsafeSalesforceServiceServer interface {
	mustEmbedUnimplementedSalesforceServiceServer()
}

func RegisterSalesforceServiceServer(s grpc.ServiceRegistrar, srv SalesforceServiceServer) {
	s.RegisterService(&SalesforceService_ServiceDesc, srv)
}

func _SalesforceService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).CreateAccount(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).UpdateAccount(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_CreateFinancialAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFinancialAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).CreateFinancialAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/CreateFinancialAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).CreateFinancialAccount(ctx, req.(*CreateFinancialAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_CreateKYCData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKYCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).CreateKYCData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/CreateKYCData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).CreateKYCData(ctx, req.(*CreateKYCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_PurchaseStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).PurchaseStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/PurchaseStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).PurchaseStock(ctx, req.(*StockPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).CreateTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_UpdateFinancialAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFinancialAccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).UpdateFinancialAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/UpdateFinancialAccountBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).UpdateFinancialAccountBalance(ctx, req.(*UpdateFinancialAccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_GetBrokerageAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrokerageAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).GetBrokerageAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/GetBrokerageAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).GetBrokerageAccount(ctx, req.(*GetBrokerageAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_GetNewsFeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).GetNewsFeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/GetNewsFeeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).GetNewsFeeds(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_PostNewsFeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvestorPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).PostNewsFeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/PostNewsFeeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).PostNewsFeeds(ctx, req.(*InvestorPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_CreateInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).CreateInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/CreateInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).CreateInstrument(ctx, req.(*CreateInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_GetNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).GetNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/GetNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).GetNotifications(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_CreateCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Currency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).CreateCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/CreateCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).CreateCurrency(ctx, req.(*Currency))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_CreateOperationHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOperationHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).CreateOperationHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/CreateOperationHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).CreateOperationHistory(ctx, req.(*CreateOperationHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_GetStockID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).GetStockID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/GetStockID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).GetStockID(ctx, req.(*GetStockIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_GetStockIdBySymbolId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockIdBySymbolIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).GetStockIdBySymbolId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/GetStockIdBySymbolId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).GetStockIdBySymbolId(ctx, req.(*GetStockIdBySymbolIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_UpdateUserStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).UpdateUserStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/UpdateUserStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).UpdateUserStock(ctx, req.(*UpdateUserStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_FetchDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).FetchDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/FetchDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).FetchDocuments(ctx, req.(*FetchDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_GetRegionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).GetRegionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/GetRegionID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).GetRegionID(ctx, req.(*GetRegionIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_GetTaxList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaxListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).GetTaxList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/GetTaxList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).GetTaxList(ctx, req.(*GetTaxListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_GetComissionGroupID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComissionGroupIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).GetComissionGroupID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/GetComissionGroupID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).GetComissionGroupID(ctx, req.(*GetComissionGroupIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_GetDocumentByPublishedVersionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentByPublishedVersionIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).GetDocumentByPublishedVersionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/GetDocumentByPublishedVersionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).GetDocumentByPublishedVersionId(ctx, req.(*GetDocumentByPublishedVersionIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_CreateTaxOfOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaxOfOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).CreateTaxOfOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/CreateTaxOfOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).CreateTaxOfOperation(ctx, req.(*CreateTaxOfOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_GetSymbolIDBySalesforceID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSymbolIDBySalesforceIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).GetSymbolIDBySalesforceID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/GetSymbolIDBySalesforceID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).GetSymbolIDBySalesforceID(ctx, req.(*GetSymbolIDBySalesforceIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_GetOperatingHour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).GetOperatingHour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/GetOperatingHour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).GetOperatingHour(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_GetObjectByPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectByPrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).GetObjectByPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/GetObjectByPrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).GetObjectByPrefix(ctx, req.(*GetObjectByPrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_GetContentDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContentDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).GetContentDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/GetContentDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).GetContentDocument(ctx, req.(*GetContentDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_GetNotificationTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).GetNotificationTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/GetNotificationTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).GetNotificationTemplate(ctx, req.(*GetNotificationTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_CreateDividientByInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDividientByInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).CreateDividientByInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/CreateDividientByInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).CreateDividientByInstrument(ctx, req.(*CreateDividientByInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).DeletePost(ctx, req.(*DeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/UpdatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).UpdatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_CommentToPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentToPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).CommentToPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/CommentToPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).CommentToPost(ctx, req.(*CommentToPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentToPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/UpdateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).UpdateComment(ctx, req.(*CommentToPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_GetComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).GetComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/GetComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).GetComments(ctx, req.(*GetCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_LikeToPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).LikeToPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/LikeToPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).LikeToPost(ctx, req.(*LikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_ToFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).ToFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/ToFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).ToFollow(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_GetPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).GetPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/GetPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).GetPosts(ctx, req.(*GetPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_GetOnePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).GetOnePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/GetOnePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).GetOnePost(ctx, req.(*GetOnePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_DeleteLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).DeleteLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/DeleteLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).DeleteLike(ctx, req.(*LikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_UnFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).UnFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/UnFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).UnFollow(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_CreateAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).CreateAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/CreateAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).CreateAssets(ctx, req.(*CreateAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_GetInstrumentsOfPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstrumentsOfPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).GetInstrumentsOfPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/GetInstrumentsOfPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).GetInstrumentsOfPosts(ctx, req.(*GetInstrumentsOfPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_DeleteInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).DeleteInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/DeleteInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).DeleteInstrument(ctx, req.(*DeleteInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_IsLiked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsLikedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).IsLiked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/IsLiked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).IsLiked(ctx, req.(*IsLikedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_GetUnsentNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnsentNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).GetUnsentNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/GetUnsentNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).GetUnsentNotification(ctx, req.(*GetUnsentNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_CreateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notificationn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).CreateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/CreateNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).CreateNotification(ctx, req.(*Notificationn))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_UpdateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notificationn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).UpdateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/UpdateNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).UpdateNotification(ctx, req.(*Notificationn))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_CreateNotificationComposite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationCompositeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).CreateNotificationComposite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/CreateNotificationComposite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).CreateNotificationComposite(ctx, req.(*CreateNotificationCompositeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_GetPostWriterData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostWriterDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).GetPostWriterData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/GetPostWriterData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).GetPostWriterData(ctx, req.(*GetPostWriterDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_BulkInsert_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SalesforceServiceServer).BulkInsert(&salesforceServiceBulkInsertServer{stream})
}

type SalesforceService_BulkInsertServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*BulkInsertRequest, error)
	grpc.ServerStream
}

type salesforceServiceBulkInsertServer struct {
	grpc.ServerStream
}

func (x *salesforceServiceBulkInsertServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *salesforceServiceBulkInsertServer) Recv() (*BulkInsertRequest, error) {
	m := new(BulkInsertRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SalesforceService_UpdateAccountComposite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountCompositeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).UpdateAccountComposite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/UpdateAccountComposite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).UpdateAccountComposite(ctx, req.(*UpdateAccountCompositeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_UpdateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).UpdateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/UpdateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).UpdateTransaction(ctx, req.(*UpdateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_UpdateTransactionNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransactionNewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).UpdateTransactionNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/UpdateTransactionNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).UpdateTransactionNew(ctx, req.(*UpdateTransactionNewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_UpdateFinancialAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFinancialAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).UpdateFinancialAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/UpdateFinancialAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).UpdateFinancialAccount(ctx, req.(*UpdateFinancialAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_UpdateFinancialAccountComposite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFinancialAccountCompositeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).UpdateFinancialAccountComposite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/UpdateFinancialAccountComposite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).UpdateFinancialAccountComposite(ctx, req.(*UpdateFinancialAccountCompositeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_UpdateUserStockComposite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserStockCompositeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).UpdateUserStockComposite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/UpdateUserStockComposite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).UpdateUserStockComposite(ctx, req.(*UpdateUserStockCompositeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_GetFinancialAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFinancialAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).GetFinancialAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/GetFinancialAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).GetFinancialAccount(ctx, req.(*GetFinancialAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceService_UpdateModeratedTrading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModeratedTradingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceServiceServer).UpdateModeratedTrading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service.SalesforceService/UpdateModeratedTrading",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceServiceServer).UpdateModeratedTrading(ctx, req.(*UpdateModeratedTradingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SalesforceService_ServiceDesc is the grpc.ServiceDesc for SalesforceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SalesforceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "integration_service.SalesforceService",
	HandlerType: (*SalesforceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _SalesforceService_CreateAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _SalesforceService_UpdateAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _SalesforceService_GetAccount_Handler,
		},
		{
			MethodName: "CreateFinancialAccount",
			Handler:    _SalesforceService_CreateFinancialAccount_Handler,
		},
		{
			MethodName: "CreateKYCData",
			Handler:    _SalesforceService_CreateKYCData_Handler,
		},
		{
			MethodName: "PurchaseStock",
			Handler:    _SalesforceService_PurchaseStock_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _SalesforceService_CreateTransaction_Handler,
		},
		{
			MethodName: "UpdateFinancialAccountBalance",
			Handler:    _SalesforceService_UpdateFinancialAccountBalance_Handler,
		},
		{
			MethodName: "GetBrokerageAccount",
			Handler:    _SalesforceService_GetBrokerageAccount_Handler,
		},
		{
			MethodName: "GetNewsFeeds",
			Handler:    _SalesforceService_GetNewsFeeds_Handler,
		},
		{
			MethodName: "PostNewsFeeds",
			Handler:    _SalesforceService_PostNewsFeeds_Handler,
		},
		{
			MethodName: "CreateInstrument",
			Handler:    _SalesforceService_CreateInstrument_Handler,
		},
		{
			MethodName: "GetNotifications",
			Handler:    _SalesforceService_GetNotifications_Handler,
		},
		{
			MethodName: "CreateCurrency",
			Handler:    _SalesforceService_CreateCurrency_Handler,
		},
		{
			MethodName: "CreateOperationHistory",
			Handler:    _SalesforceService_CreateOperationHistory_Handler,
		},
		{
			MethodName: "GetStockID",
			Handler:    _SalesforceService_GetStockID_Handler,
		},
		{
			MethodName: "GetStockIdBySymbolId",
			Handler:    _SalesforceService_GetStockIdBySymbolId_Handler,
		},
		{
			MethodName: "UpdateUserStock",
			Handler:    _SalesforceService_UpdateUserStock_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _SalesforceService_CreateOrder_Handler,
		},
		{
			MethodName: "FetchDocuments",
			Handler:    _SalesforceService_FetchDocuments_Handler,
		},
		{
			MethodName: "GetRegionID",
			Handler:    _SalesforceService_GetRegionID_Handler,
		},
		{
			MethodName: "GetTaxList",
			Handler:    _SalesforceService_GetTaxList_Handler,
		},
		{
			MethodName: "GetComissionGroupID",
			Handler:    _SalesforceService_GetComissionGroupID_Handler,
		},
		{
			MethodName: "GetDocumentByPublishedVersionId",
			Handler:    _SalesforceService_GetDocumentByPublishedVersionId_Handler,
		},
		{
			MethodName: "CreateTaxOfOperation",
			Handler:    _SalesforceService_CreateTaxOfOperation_Handler,
		},
		{
			MethodName: "GetSymbolIDBySalesforceID",
			Handler:    _SalesforceService_GetSymbolIDBySalesforceID_Handler,
		},
		{
			MethodName: "GetOperatingHour",
			Handler:    _SalesforceService_GetOperatingHour_Handler,
		},
		{
			MethodName: "GetObjectByPrefix",
			Handler:    _SalesforceService_GetObjectByPrefix_Handler,
		},
		{
			MethodName: "GetContentDocument",
			Handler:    _SalesforceService_GetContentDocument_Handler,
		},
		{
			MethodName: "GetNotificationTemplate",
			Handler:    _SalesforceService_GetNotificationTemplate_Handler,
		},
		{
			MethodName: "CreateDividientByInstrument",
			Handler:    _SalesforceService_CreateDividientByInstrument_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _SalesforceService_CreatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _SalesforceService_DeletePost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _SalesforceService_UpdatePost_Handler,
		},
		{
			MethodName: "CommentToPost",
			Handler:    _SalesforceService_CommentToPost_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _SalesforceService_UpdateComment_Handler,
		},
		{
			MethodName: "GetComments",
			Handler:    _SalesforceService_GetComments_Handler,
		},
		{
			MethodName: "LikeToPost",
			Handler:    _SalesforceService_LikeToPost_Handler,
		},
		{
			MethodName: "ToFollow",
			Handler:    _SalesforceService_ToFollow_Handler,
		},
		{
			MethodName: "GetPosts",
			Handler:    _SalesforceService_GetPosts_Handler,
		},
		{
			MethodName: "GetOnePost",
			Handler:    _SalesforceService_GetOnePost_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _SalesforceService_DeleteComment_Handler,
		},
		{
			MethodName: "DeleteLike",
			Handler:    _SalesforceService_DeleteLike_Handler,
		},
		{
			MethodName: "UnFollow",
			Handler:    _SalesforceService_UnFollow_Handler,
		},
		{
			MethodName: "CreateAssets",
			Handler:    _SalesforceService_CreateAssets_Handler,
		},
		{
			MethodName: "GetInstrumentsOfPosts",
			Handler:    _SalesforceService_GetInstrumentsOfPosts_Handler,
		},
		{
			MethodName: "DeleteInstrument",
			Handler:    _SalesforceService_DeleteInstrument_Handler,
		},
		{
			MethodName: "IsLiked",
			Handler:    _SalesforceService_IsLiked_Handler,
		},
		{
			MethodName: "GetUnsentNotification",
			Handler:    _SalesforceService_GetUnsentNotification_Handler,
		},
		{
			MethodName: "CreateNotification",
			Handler:    _SalesforceService_CreateNotification_Handler,
		},
		{
			MethodName: "UpdateNotification",
			Handler:    _SalesforceService_UpdateNotification_Handler,
		},
		{
			MethodName: "CreateNotificationComposite",
			Handler:    _SalesforceService_CreateNotificationComposite_Handler,
		},
		{
			MethodName: "GetPostWriterData",
			Handler:    _SalesforceService_GetPostWriterData_Handler,
		},
		{
			MethodName: "UpdateAccountComposite",
			Handler:    _SalesforceService_UpdateAccountComposite_Handler,
		},
		{
			MethodName: "UpdateTransaction",
			Handler:    _SalesforceService_UpdateTransaction_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _SalesforceService_GetTransaction_Handler,
		},
		{
			MethodName: "UpdateTransactionNew",
			Handler:    _SalesforceService_UpdateTransactionNew_Handler,
		},
		{
			MethodName: "UpdateFinancialAccount",
			Handler:    _SalesforceService_UpdateFinancialAccount_Handler,
		},
		{
			MethodName: "UpdateFinancialAccountComposite",
			Handler:    _SalesforceService_UpdateFinancialAccountComposite_Handler,
		},
		{
			MethodName: "UpdateUserStockComposite",
			Handler:    _SalesforceService_UpdateUserStockComposite_Handler,
		},
		{
			MethodName: "GetFinancialAccount",
			Handler:    _SalesforceService_GetFinancialAccount_Handler,
		},
		{
			MethodName: "UpdateModeratedTrading",
			Handler:    _SalesforceService_UpdateModeratedTrading_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BulkInsert",
			Handler:       _SalesforceService_BulkInsert_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "salesforce_service.proto",
}
