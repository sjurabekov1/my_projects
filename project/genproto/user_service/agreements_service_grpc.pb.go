// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: agreements_service.proto

package user_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgreementServiceClient is the client API for AgreementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgreementServiceClient interface {
	Create(ctx context.Context, in *CreateAgreement, opts ...grpc.CallOption) (*AgreementId, error)
	Update(ctx context.Context, in *Agreement, opts ...grpc.CallOption) (*AgreementId, error)
	Get(ctx context.Context, in *AgreementId, opts ...grpc.CallOption) (*Agreement, error)
	GetAll(ctx context.Context, in *GetAllAgreementsRequest, opts ...grpc.CallOption) (*GetAllAgreementsResponse, error)
	Delete(ctx context.Context, in *AgreementId, opts ...grpc.CallOption) (*empty.Empty, error)
}

type agreementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgreementServiceClient(cc grpc.ClientConnInterface) AgreementServiceClient {
	return &agreementServiceClient{cc}
}

func (c *agreementServiceClient) Create(ctx context.Context, in *CreateAgreement, opts ...grpc.CallOption) (*AgreementId, error) {
	out := new(AgreementId)
	err := c.cc.Invoke(ctx, "/user_service.AgreementService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agreementServiceClient) Update(ctx context.Context, in *Agreement, opts ...grpc.CallOption) (*AgreementId, error) {
	out := new(AgreementId)
	err := c.cc.Invoke(ctx, "/user_service.AgreementService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agreementServiceClient) Get(ctx context.Context, in *AgreementId, opts ...grpc.CallOption) (*Agreement, error) {
	out := new(Agreement)
	err := c.cc.Invoke(ctx, "/user_service.AgreementService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agreementServiceClient) GetAll(ctx context.Context, in *GetAllAgreementsRequest, opts ...grpc.CallOption) (*GetAllAgreementsResponse, error) {
	out := new(GetAllAgreementsResponse)
	err := c.cc.Invoke(ctx, "/user_service.AgreementService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agreementServiceClient) Delete(ctx context.Context, in *AgreementId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/user_service.AgreementService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgreementServiceServer is the server API for AgreementService service.
// All implementations must embed UnimplementedAgreementServiceServer
// for forward compatibility
type AgreementServiceServer interface {
	Create(context.Context, *CreateAgreement) (*AgreementId, error)
	Update(context.Context, *Agreement) (*AgreementId, error)
	Get(context.Context, *AgreementId) (*Agreement, error)
	GetAll(context.Context, *GetAllAgreementsRequest) (*GetAllAgreementsResponse, error)
	Delete(context.Context, *AgreementId) (*empty.Empty, error)
	mustEmbedUnimplementedAgreementServiceServer()
}

// UnimplementedAgreementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgreementServiceServer struct {
}

func (UnimplementedAgreementServiceServer) Create(context.Context, *CreateAgreement) (*AgreementId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAgreementServiceServer) Update(context.Context, *Agreement) (*AgreementId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAgreementServiceServer) Get(context.Context, *AgreementId) (*Agreement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAgreementServiceServer) GetAll(context.Context, *GetAllAgreementsRequest) (*GetAllAgreementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedAgreementServiceServer) Delete(context.Context, *AgreementId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAgreementServiceServer) mustEmbedUnimplementedAgreementServiceServer() {}

// UnsafeAgreementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgreementServiceServer will
// result in compilation errors.
type UnsafeAgreementServiceServer interface {
	mustEmbedUnimplementedAgreementServiceServer()
}

func RegisterAgreementServiceServer(s grpc.ServiceRegistrar, srv AgreementServiceServer) {
	s.RegisterService(&AgreementService_ServiceDesc, srv)
}

func _AgreementService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgreement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgreementServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.AgreementService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgreementServiceServer).Create(ctx, req.(*CreateAgreement))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgreementService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Agreement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgreementServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.AgreementService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgreementServiceServer).Update(ctx, req.(*Agreement))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgreementService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgreementId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgreementServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.AgreementService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgreementServiceServer).Get(ctx, req.(*AgreementId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgreementService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAgreementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgreementServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.AgreementService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgreementServiceServer).GetAll(ctx, req.(*GetAllAgreementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgreementService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgreementId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgreementServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.AgreementService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgreementServiceServer).Delete(ctx, req.(*AgreementId))
	}
	return interceptor(ctx, in, info, handler)
}

// AgreementService_ServiceDesc is the grpc.ServiceDesc for AgreementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgreementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_service.AgreementService",
	HandlerType: (*AgreementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AgreementService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AgreementService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AgreementService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _AgreementService_GetAll_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AgreementService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agreements_service.proto",
}
