// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: investor_service.proto

package user_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InvestorServiceClient is the client API for InvestorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvestorServiceClient interface {
	// Investor
	InvestorLogin(ctx context.Context, in *InvestorLoginRequest, opts ...grpc.CallOption) (*InvestorLoginResponse, error)
	InvestorLoginWeb(ctx context.Context, in *InvestorLoginWebRequest, opts ...grpc.CallOption) (*InvestorLoginWebResponse, error)
	TwoFactorAutheticate(ctx context.Context, in *TwoFactorAuthenticateRequest, opts ...grpc.CallOption) (*TwoFactorAuthenticateResponse, error)
	GetTwoFactorAutheticate(ctx context.Context, in *GetTwoFactorAuthenticateRequest, opts ...grpc.CallOption) (*GetTwoFactorAuthenticateResponse, error)
	SendTwilioPhoneNumber(ctx context.Context, in *SendTwilioPhoneNumberRequest, opts ...grpc.CallOption) (*SendTwilioPhoneNumberResponse, error)
	CheckVerifivation(ctx context.Context, in *CheckVerifivationRequest, opts ...grpc.CallOption) (*CheckVerifivationResponse, error)
	InvestorConfirmEmail(ctx context.Context, in *InvestorConfirmEmailRequest, opts ...grpc.CallOption) (*InvestorConfirmEmailResponse, error)
	InvestorConfirmEmailWeb(ctx context.Context, in *InvestorConfirmEmailWebRequest, opts ...grpc.CallOption) (*InvestorConfirmEmailWebResponse, error)
	GetApplicantInfo(ctx context.Context, in *GetApplicantInfoRequest, opts ...grpc.CallOption) (*GetApplicantInfoResponse, error)
	// rpc InvestorPersonalData(InvestorPersonalDataRequest) returns(InvestorPersonalDataResponse) {}
	GetInvestor(ctx context.Context, in *GetInvestorRequest, opts ...grpc.CallOption) (*GetInvestorResponse, error)
	GetInvestorDocuments(ctx context.Context, in *GetInvestorDocumentsRequest, opts ...grpc.CallOption) (*GetInvestorDocumentsResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SaveInvestorIdentity(ctx context.Context, in *SaveInvestorIdentityRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	EditProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateLanguage(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// KYC
	SaveKYCData(ctx context.Context, in *SaveKycDataRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SaveDocumentMetadata(ctx context.Context, in *DocumentMetadata, opts ...grpc.CallOption) (*DocumentMetadata, error)
	GetKycData(ctx context.Context, in *GetKycDataRequest, opts ...grpc.CallOption) (*GetKycDataResponse, error)
	// Account
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Account, error)
	GetAccount(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*Account, error)
	DeleteAccount(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*Account, error)
	// FCM Token
	GetInvestorTokens(ctx context.Context, in *GetInvestorTokensRequest, opts ...grpc.CallOption) (*GetInvestorTokensResponse, error)
	GetAllInvestorTokens(ctx context.Context, in *UserDetail, opts ...grpc.CallOption) (*GetAllInvestorTokensResponse, error)
	// Favourite instrument(s)
	AddFavouriteInstrument(ctx context.Context, in *AddFavouriteInstrumentRequest, opts ...grpc.CallOption) (*FavouriteInstrument, error)
	GetFavouriteInstruments(ctx context.Context, in *InvestorId, opts ...grpc.CallOption) (*FavouriteInstrumentList, error)
	RemoveFromFavourite(ctx context.Context, in *FavouriteInstrument, opts ...grpc.CallOption) (*FavouriteInstrument, error)
	IsInstrumentFavourite(ctx context.Context, in *FavouriteInstrument, opts ...grpc.CallOption) (*IsInstrumentFavouriteResponse, error)
	// Country
	GetCountryPhoneNumber(ctx context.Context, in *GetCountryPhoneNumberRequest, opts ...grpc.CallOption) (*GetCountryPhoneNumberResponse, error)
	SaveCountryFlag(ctx context.Context, in *SaveCountryFlagRequest, opts ...grpc.CallOption) (*Country, error)
	// Webhook
	UpdateAccountFromSalesforce(ctx context.Context, in *UpdateAccountFromSalesforceRequest, opts ...grpc.CallOption) (*UpdateAccountFromSalesforceResponse, error)
	UpdateRegistrationStatus(ctx context.Context, in *UpdateAccountFromSalesforceRequest, opts ...grpc.CallOption) (*UpdateAccountFromSalesforceResponse, error)
	InvestorSearchWithUsername(ctx context.Context, in *InvestorSearchWithUsernameRequest, opts ...grpc.CallOption) (*InvestorSearchWithUsernameResponse, error)
	GetKycStatus(ctx context.Context, in *GetKycStatusRequest, opts ...grpc.CallOption) (*GetKycStatusResponse, error)
	GetSumsubRejectComment(ctx context.Context, in *GetSumsubRejectCommentRequest, opts ...grpc.CallOption) (*GetSumsubRejectCommentResponse, error)
	InsertCommentsFromSumsub(ctx context.Context, in *SumsubCommentRequest, opts ...grpc.CallOption) (*SumsubCommentResponse, error)
	SendGmailNotification(ctx context.Context, in *SendGmailNotificationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetInvestorRegistrationStatus(ctx context.Context, in *GetInvestorRegistrationStatusRequest, opts ...grpc.CallOption) (*GetInvestorRegistrationStatusResponse, error)
	GetInvestorPlatform(ctx context.Context, in *GetInvestorPlatformRequest, opts ...grpc.CallOption) (*GetInvestorPlatformResponse, error)
	AssignExanteAccount(ctx context.Context, in *ExanteAccountRequest, opts ...grpc.CallOption) (*ExanteAccountResponse, error)
	GetExanteAccount(ctx context.Context, in *ExanteAccountRequest, opts ...grpc.CallOption) (*ExanteAccountResponse, error)
}

type investorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvestorServiceClient(cc grpc.ClientConnInterface) InvestorServiceClient {
	return &investorServiceClient{cc}
}

func (c *investorServiceClient) InvestorLogin(ctx context.Context, in *InvestorLoginRequest, opts ...grpc.CallOption) (*InvestorLoginResponse, error) {
	out := new(InvestorLoginResponse)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/InvestorLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) InvestorLoginWeb(ctx context.Context, in *InvestorLoginWebRequest, opts ...grpc.CallOption) (*InvestorLoginWebResponse, error) {
	out := new(InvestorLoginWebResponse)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/InvestorLoginWeb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) TwoFactorAutheticate(ctx context.Context, in *TwoFactorAuthenticateRequest, opts ...grpc.CallOption) (*TwoFactorAuthenticateResponse, error) {
	out := new(TwoFactorAuthenticateResponse)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/TwoFactorAutheticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) GetTwoFactorAutheticate(ctx context.Context, in *GetTwoFactorAuthenticateRequest, opts ...grpc.CallOption) (*GetTwoFactorAuthenticateResponse, error) {
	out := new(GetTwoFactorAuthenticateResponse)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/GetTwoFactorAutheticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) SendTwilioPhoneNumber(ctx context.Context, in *SendTwilioPhoneNumberRequest, opts ...grpc.CallOption) (*SendTwilioPhoneNumberResponse, error) {
	out := new(SendTwilioPhoneNumberResponse)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/SendTwilioPhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) CheckVerifivation(ctx context.Context, in *CheckVerifivationRequest, opts ...grpc.CallOption) (*CheckVerifivationResponse, error) {
	out := new(CheckVerifivationResponse)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/CheckVerifivation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) InvestorConfirmEmail(ctx context.Context, in *InvestorConfirmEmailRequest, opts ...grpc.CallOption) (*InvestorConfirmEmailResponse, error) {
	out := new(InvestorConfirmEmailResponse)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/InvestorConfirmEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) InvestorConfirmEmailWeb(ctx context.Context, in *InvestorConfirmEmailWebRequest, opts ...grpc.CallOption) (*InvestorConfirmEmailWebResponse, error) {
	out := new(InvestorConfirmEmailWebResponse)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/InvestorConfirmEmailWeb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) GetApplicantInfo(ctx context.Context, in *GetApplicantInfoRequest, opts ...grpc.CallOption) (*GetApplicantInfoResponse, error) {
	out := new(GetApplicantInfoResponse)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/GetApplicantInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) GetInvestor(ctx context.Context, in *GetInvestorRequest, opts ...grpc.CallOption) (*GetInvestorResponse, error) {
	out := new(GetInvestorResponse)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/GetInvestor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) GetInvestorDocuments(ctx context.Context, in *GetInvestorDocumentsRequest, opts ...grpc.CallOption) (*GetInvestorDocumentsResponse, error) {
	out := new(GetInvestorDocumentsResponse)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/GetInvestorDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) SaveInvestorIdentity(ctx context.Context, in *SaveInvestorIdentityRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/SaveInvestorIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) EditProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/EditProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) UpdateLanguage(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/UpdateLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) SaveKYCData(ctx context.Context, in *SaveKycDataRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/SaveKYCData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) SaveDocumentMetadata(ctx context.Context, in *DocumentMetadata, opts ...grpc.CallOption) (*DocumentMetadata, error) {
	out := new(DocumentMetadata)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/SaveDocumentMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) GetKycData(ctx context.Context, in *GetKycDataRequest, opts ...grpc.CallOption) (*GetKycDataResponse, error) {
	out := new(GetKycDataResponse)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/GetKycData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) GetAccount(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) DeleteAccount(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) GetInvestorTokens(ctx context.Context, in *GetInvestorTokensRequest, opts ...grpc.CallOption) (*GetInvestorTokensResponse, error) {
	out := new(GetInvestorTokensResponse)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/GetInvestorTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) GetAllInvestorTokens(ctx context.Context, in *UserDetail, opts ...grpc.CallOption) (*GetAllInvestorTokensResponse, error) {
	out := new(GetAllInvestorTokensResponse)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/GetAllInvestorTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) AddFavouriteInstrument(ctx context.Context, in *AddFavouriteInstrumentRequest, opts ...grpc.CallOption) (*FavouriteInstrument, error) {
	out := new(FavouriteInstrument)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/AddFavouriteInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) GetFavouriteInstruments(ctx context.Context, in *InvestorId, opts ...grpc.CallOption) (*FavouriteInstrumentList, error) {
	out := new(FavouriteInstrumentList)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/GetFavouriteInstruments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) RemoveFromFavourite(ctx context.Context, in *FavouriteInstrument, opts ...grpc.CallOption) (*FavouriteInstrument, error) {
	out := new(FavouriteInstrument)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/RemoveFromFavourite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) IsInstrumentFavourite(ctx context.Context, in *FavouriteInstrument, opts ...grpc.CallOption) (*IsInstrumentFavouriteResponse, error) {
	out := new(IsInstrumentFavouriteResponse)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/IsInstrumentFavourite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) GetCountryPhoneNumber(ctx context.Context, in *GetCountryPhoneNumberRequest, opts ...grpc.CallOption) (*GetCountryPhoneNumberResponse, error) {
	out := new(GetCountryPhoneNumberResponse)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/GetCountryPhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) SaveCountryFlag(ctx context.Context, in *SaveCountryFlagRequest, opts ...grpc.CallOption) (*Country, error) {
	out := new(Country)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/SaveCountryFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) UpdateAccountFromSalesforce(ctx context.Context, in *UpdateAccountFromSalesforceRequest, opts ...grpc.CallOption) (*UpdateAccountFromSalesforceResponse, error) {
	out := new(UpdateAccountFromSalesforceResponse)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/UpdateAccountFromSalesforce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) UpdateRegistrationStatus(ctx context.Context, in *UpdateAccountFromSalesforceRequest, opts ...grpc.CallOption) (*UpdateAccountFromSalesforceResponse, error) {
	out := new(UpdateAccountFromSalesforceResponse)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/UpdateRegistrationStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) InvestorSearchWithUsername(ctx context.Context, in *InvestorSearchWithUsernameRequest, opts ...grpc.CallOption) (*InvestorSearchWithUsernameResponse, error) {
	out := new(InvestorSearchWithUsernameResponse)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/InvestorSearchWithUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) GetKycStatus(ctx context.Context, in *GetKycStatusRequest, opts ...grpc.CallOption) (*GetKycStatusResponse, error) {
	out := new(GetKycStatusResponse)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/GetKycStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) GetSumsubRejectComment(ctx context.Context, in *GetSumsubRejectCommentRequest, opts ...grpc.CallOption) (*GetSumsubRejectCommentResponse, error) {
	out := new(GetSumsubRejectCommentResponse)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/GetSumsubRejectComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) InsertCommentsFromSumsub(ctx context.Context, in *SumsubCommentRequest, opts ...grpc.CallOption) (*SumsubCommentResponse, error) {
	out := new(SumsubCommentResponse)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/InsertCommentsFromSumsub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) SendGmailNotification(ctx context.Context, in *SendGmailNotificationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/SendGmailNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) GetInvestorRegistrationStatus(ctx context.Context, in *GetInvestorRegistrationStatusRequest, opts ...grpc.CallOption) (*GetInvestorRegistrationStatusResponse, error) {
	out := new(GetInvestorRegistrationStatusResponse)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/GetInvestorRegistrationStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) GetInvestorPlatform(ctx context.Context, in *GetInvestorPlatformRequest, opts ...grpc.CallOption) (*GetInvestorPlatformResponse, error) {
	out := new(GetInvestorPlatformResponse)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/GetInvestorPlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) AssignExanteAccount(ctx context.Context, in *ExanteAccountRequest, opts ...grpc.CallOption) (*ExanteAccountResponse, error) {
	out := new(ExanteAccountResponse)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/AssignExanteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorServiceClient) GetExanteAccount(ctx context.Context, in *ExanteAccountRequest, opts ...grpc.CallOption) (*ExanteAccountResponse, error) {
	out := new(ExanteAccountResponse)
	err := c.cc.Invoke(ctx, "/user_service.InvestorService/GetExanteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvestorServiceServer is the server API for InvestorService service.
// All implementations must embed UnimplementedInvestorServiceServer
// for forward compatibility
type InvestorServiceServer interface {
	// Investor
	InvestorLogin(context.Context, *InvestorLoginRequest) (*InvestorLoginResponse, error)
	InvestorLoginWeb(context.Context, *InvestorLoginWebRequest) (*InvestorLoginWebResponse, error)
	TwoFactorAutheticate(context.Context, *TwoFactorAuthenticateRequest) (*TwoFactorAuthenticateResponse, error)
	GetTwoFactorAutheticate(context.Context, *GetTwoFactorAuthenticateRequest) (*GetTwoFactorAuthenticateResponse, error)
	SendTwilioPhoneNumber(context.Context, *SendTwilioPhoneNumberRequest) (*SendTwilioPhoneNumberResponse, error)
	CheckVerifivation(context.Context, *CheckVerifivationRequest) (*CheckVerifivationResponse, error)
	InvestorConfirmEmail(context.Context, *InvestorConfirmEmailRequest) (*InvestorConfirmEmailResponse, error)
	InvestorConfirmEmailWeb(context.Context, *InvestorConfirmEmailWebRequest) (*InvestorConfirmEmailWebResponse, error)
	GetApplicantInfo(context.Context, *GetApplicantInfoRequest) (*GetApplicantInfoResponse, error)
	// rpc InvestorPersonalData(InvestorPersonalDataRequest) returns(InvestorPersonalDataResponse) {}
	GetInvestor(context.Context, *GetInvestorRequest) (*GetInvestorResponse, error)
	GetInvestorDocuments(context.Context, *GetInvestorDocumentsRequest) (*GetInvestorDocumentsResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*empty.Empty, error)
	SaveInvestorIdentity(context.Context, *SaveInvestorIdentityRequest) (*empty.Empty, error)
	EditProfile(context.Context, *UpdateProfileRequest) (*empty.Empty, error)
	UpdateLanguage(context.Context, *UpdateProfileRequest) (*empty.Empty, error)
	// KYC
	SaveKYCData(context.Context, *SaveKycDataRequest) (*empty.Empty, error)
	SaveDocumentMetadata(context.Context, *DocumentMetadata) (*DocumentMetadata, error)
	GetKycData(context.Context, *GetKycDataRequest) (*GetKycDataResponse, error)
	// Account
	CreateAccount(context.Context, *CreateAccountRequest) (*Account, error)
	GetAccount(context.Context, *AccountID) (*Account, error)
	DeleteAccount(context.Context, *AccountID) (*Account, error)
	// FCM Token
	GetInvestorTokens(context.Context, *GetInvestorTokensRequest) (*GetInvestorTokensResponse, error)
	GetAllInvestorTokens(context.Context, *UserDetail) (*GetAllInvestorTokensResponse, error)
	// Favourite instrument(s)
	AddFavouriteInstrument(context.Context, *AddFavouriteInstrumentRequest) (*FavouriteInstrument, error)
	GetFavouriteInstruments(context.Context, *InvestorId) (*FavouriteInstrumentList, error)
	RemoveFromFavourite(context.Context, *FavouriteInstrument) (*FavouriteInstrument, error)
	IsInstrumentFavourite(context.Context, *FavouriteInstrument) (*IsInstrumentFavouriteResponse, error)
	// Country
	GetCountryPhoneNumber(context.Context, *GetCountryPhoneNumberRequest) (*GetCountryPhoneNumberResponse, error)
	SaveCountryFlag(context.Context, *SaveCountryFlagRequest) (*Country, error)
	// Webhook
	UpdateAccountFromSalesforce(context.Context, *UpdateAccountFromSalesforceRequest) (*UpdateAccountFromSalesforceResponse, error)
	UpdateRegistrationStatus(context.Context, *UpdateAccountFromSalesforceRequest) (*UpdateAccountFromSalesforceResponse, error)
	InvestorSearchWithUsername(context.Context, *InvestorSearchWithUsernameRequest) (*InvestorSearchWithUsernameResponse, error)
	GetKycStatus(context.Context, *GetKycStatusRequest) (*GetKycStatusResponse, error)
	GetSumsubRejectComment(context.Context, *GetSumsubRejectCommentRequest) (*GetSumsubRejectCommentResponse, error)
	InsertCommentsFromSumsub(context.Context, *SumsubCommentRequest) (*SumsubCommentResponse, error)
	SendGmailNotification(context.Context, *SendGmailNotificationRequest) (*empty.Empty, error)
	GetInvestorRegistrationStatus(context.Context, *GetInvestorRegistrationStatusRequest) (*GetInvestorRegistrationStatusResponse, error)
	GetInvestorPlatform(context.Context, *GetInvestorPlatformRequest) (*GetInvestorPlatformResponse, error)
	AssignExanteAccount(context.Context, *ExanteAccountRequest) (*ExanteAccountResponse, error)
	GetExanteAccount(context.Context, *ExanteAccountRequest) (*ExanteAccountResponse, error)
	mustEmbedUnimplementedInvestorServiceServer()
}

// UnimplementedInvestorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInvestorServiceServer struct {
}

func (UnimplementedInvestorServiceServer) InvestorLogin(context.Context, *InvestorLoginRequest) (*InvestorLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvestorLogin not implemented")
}
func (UnimplementedInvestorServiceServer) InvestorLoginWeb(context.Context, *InvestorLoginWebRequest) (*InvestorLoginWebResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvestorLoginWeb not implemented")
}
func (UnimplementedInvestorServiceServer) TwoFactorAutheticate(context.Context, *TwoFactorAuthenticateRequest) (*TwoFactorAuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TwoFactorAutheticate not implemented")
}
func (UnimplementedInvestorServiceServer) GetTwoFactorAutheticate(context.Context, *GetTwoFactorAuthenticateRequest) (*GetTwoFactorAuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTwoFactorAutheticate not implemented")
}
func (UnimplementedInvestorServiceServer) SendTwilioPhoneNumber(context.Context, *SendTwilioPhoneNumberRequest) (*SendTwilioPhoneNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTwilioPhoneNumber not implemented")
}
func (UnimplementedInvestorServiceServer) CheckVerifivation(context.Context, *CheckVerifivationRequest) (*CheckVerifivationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckVerifivation not implemented")
}
func (UnimplementedInvestorServiceServer) InvestorConfirmEmail(context.Context, *InvestorConfirmEmailRequest) (*InvestorConfirmEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvestorConfirmEmail not implemented")
}
func (UnimplementedInvestorServiceServer) InvestorConfirmEmailWeb(context.Context, *InvestorConfirmEmailWebRequest) (*InvestorConfirmEmailWebResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvestorConfirmEmailWeb not implemented")
}
func (UnimplementedInvestorServiceServer) GetApplicantInfo(context.Context, *GetApplicantInfoRequest) (*GetApplicantInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicantInfo not implemented")
}
func (UnimplementedInvestorServiceServer) GetInvestor(context.Context, *GetInvestorRequest) (*GetInvestorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvestor not implemented")
}
func (UnimplementedInvestorServiceServer) GetInvestorDocuments(context.Context, *GetInvestorDocumentsRequest) (*GetInvestorDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvestorDocuments not implemented")
}
func (UnimplementedInvestorServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedInvestorServiceServer) SaveInvestorIdentity(context.Context, *SaveInvestorIdentityRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveInvestorIdentity not implemented")
}
func (UnimplementedInvestorServiceServer) EditProfile(context.Context, *UpdateProfileRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditProfile not implemented")
}
func (UnimplementedInvestorServiceServer) UpdateLanguage(context.Context, *UpdateProfileRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLanguage not implemented")
}
func (UnimplementedInvestorServiceServer) SaveKYCData(context.Context, *SaveKycDataRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveKYCData not implemented")
}
func (UnimplementedInvestorServiceServer) SaveDocumentMetadata(context.Context, *DocumentMetadata) (*DocumentMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveDocumentMetadata not implemented")
}
func (UnimplementedInvestorServiceServer) GetKycData(context.Context, *GetKycDataRequest) (*GetKycDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKycData not implemented")
}
func (UnimplementedInvestorServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedInvestorServiceServer) GetAccount(context.Context, *AccountID) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedInvestorServiceServer) DeleteAccount(context.Context, *AccountID) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedInvestorServiceServer) GetInvestorTokens(context.Context, *GetInvestorTokensRequest) (*GetInvestorTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvestorTokens not implemented")
}
func (UnimplementedInvestorServiceServer) GetAllInvestorTokens(context.Context, *UserDetail) (*GetAllInvestorTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllInvestorTokens not implemented")
}
func (UnimplementedInvestorServiceServer) AddFavouriteInstrument(context.Context, *AddFavouriteInstrumentRequest) (*FavouriteInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFavouriteInstrument not implemented")
}
func (UnimplementedInvestorServiceServer) GetFavouriteInstruments(context.Context, *InvestorId) (*FavouriteInstrumentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavouriteInstruments not implemented")
}
func (UnimplementedInvestorServiceServer) RemoveFromFavourite(context.Context, *FavouriteInstrument) (*FavouriteInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromFavourite not implemented")
}
func (UnimplementedInvestorServiceServer) IsInstrumentFavourite(context.Context, *FavouriteInstrument) (*IsInstrumentFavouriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsInstrumentFavourite not implemented")
}
func (UnimplementedInvestorServiceServer) GetCountryPhoneNumber(context.Context, *GetCountryPhoneNumberRequest) (*GetCountryPhoneNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountryPhoneNumber not implemented")
}
func (UnimplementedInvestorServiceServer) SaveCountryFlag(context.Context, *SaveCountryFlagRequest) (*Country, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCountryFlag not implemented")
}
func (UnimplementedInvestorServiceServer) UpdateAccountFromSalesforce(context.Context, *UpdateAccountFromSalesforceRequest) (*UpdateAccountFromSalesforceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountFromSalesforce not implemented")
}
func (UnimplementedInvestorServiceServer) UpdateRegistrationStatus(context.Context, *UpdateAccountFromSalesforceRequest) (*UpdateAccountFromSalesforceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegistrationStatus not implemented")
}
func (UnimplementedInvestorServiceServer) InvestorSearchWithUsername(context.Context, *InvestorSearchWithUsernameRequest) (*InvestorSearchWithUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvestorSearchWithUsername not implemented")
}
func (UnimplementedInvestorServiceServer) GetKycStatus(context.Context, *GetKycStatusRequest) (*GetKycStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKycStatus not implemented")
}
func (UnimplementedInvestorServiceServer) GetSumsubRejectComment(context.Context, *GetSumsubRejectCommentRequest) (*GetSumsubRejectCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSumsubRejectComment not implemented")
}
func (UnimplementedInvestorServiceServer) InsertCommentsFromSumsub(context.Context, *SumsubCommentRequest) (*SumsubCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertCommentsFromSumsub not implemented")
}
func (UnimplementedInvestorServiceServer) SendGmailNotification(context.Context, *SendGmailNotificationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGmailNotification not implemented")
}
func (UnimplementedInvestorServiceServer) GetInvestorRegistrationStatus(context.Context, *GetInvestorRegistrationStatusRequest) (*GetInvestorRegistrationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvestorRegistrationStatus not implemented")
}
func (UnimplementedInvestorServiceServer) GetInvestorPlatform(context.Context, *GetInvestorPlatformRequest) (*GetInvestorPlatformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvestorPlatform not implemented")
}
func (UnimplementedInvestorServiceServer) AssignExanteAccount(context.Context, *ExanteAccountRequest) (*ExanteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignExanteAccount not implemented")
}
func (UnimplementedInvestorServiceServer) GetExanteAccount(context.Context, *ExanteAccountRequest) (*ExanteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExanteAccount not implemented")
}
func (UnimplementedInvestorServiceServer) mustEmbedUnimplementedInvestorServiceServer() {}

// UnsafeInvestorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvestorServiceServer will
// result in compilation errors.
type UnsafeInvestorServiceServer interface {
	mustEmbedUnimplementedInvestorServiceServer()
}

func RegisterInvestorServiceServer(s grpc.ServiceRegistrar, srv InvestorServiceServer) {
	s.RegisterService(&InvestorService_ServiceDesc, srv)
}

func _InvestorService_InvestorLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvestorLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).InvestorLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/InvestorLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).InvestorLogin(ctx, req.(*InvestorLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_InvestorLoginWeb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvestorLoginWebRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).InvestorLoginWeb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/InvestorLoginWeb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).InvestorLoginWeb(ctx, req.(*InvestorLoginWebRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_TwoFactorAutheticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoFactorAuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).TwoFactorAutheticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/TwoFactorAutheticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).TwoFactorAutheticate(ctx, req.(*TwoFactorAuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_GetTwoFactorAutheticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTwoFactorAuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).GetTwoFactorAutheticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/GetTwoFactorAutheticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).GetTwoFactorAutheticate(ctx, req.(*GetTwoFactorAuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_SendTwilioPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTwilioPhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).SendTwilioPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/SendTwilioPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).SendTwilioPhoneNumber(ctx, req.(*SendTwilioPhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_CheckVerifivation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckVerifivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).CheckVerifivation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/CheckVerifivation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).CheckVerifivation(ctx, req.(*CheckVerifivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_InvestorConfirmEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvestorConfirmEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).InvestorConfirmEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/InvestorConfirmEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).InvestorConfirmEmail(ctx, req.(*InvestorConfirmEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_InvestorConfirmEmailWeb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvestorConfirmEmailWebRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).InvestorConfirmEmailWeb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/InvestorConfirmEmailWeb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).InvestorConfirmEmailWeb(ctx, req.(*InvestorConfirmEmailWebRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_GetApplicantInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicantInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).GetApplicantInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/GetApplicantInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).GetApplicantInfo(ctx, req.(*GetApplicantInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_GetInvestor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvestorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).GetInvestor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/GetInvestor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).GetInvestor(ctx, req.(*GetInvestorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_GetInvestorDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvestorDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).GetInvestorDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/GetInvestorDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).GetInvestorDocuments(ctx, req.(*GetInvestorDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_SaveInvestorIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveInvestorIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).SaveInvestorIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/SaveInvestorIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).SaveInvestorIdentity(ctx, req.(*SaveInvestorIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_EditProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).EditProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/EditProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).EditProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_UpdateLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).UpdateLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/UpdateLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).UpdateLanguage(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_SaveKYCData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveKycDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).SaveKYCData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/SaveKYCData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).SaveKYCData(ctx, req.(*SaveKycDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_SaveDocumentMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).SaveDocumentMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/SaveDocumentMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).SaveDocumentMetadata(ctx, req.(*DocumentMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_GetKycData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKycDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).GetKycData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/GetKycData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).GetKycData(ctx, req.(*GetKycDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).GetAccount(ctx, req.(*AccountID))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).DeleteAccount(ctx, req.(*AccountID))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_GetInvestorTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvestorTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).GetInvestorTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/GetInvestorTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).GetInvestorTokens(ctx, req.(*GetInvestorTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_GetAllInvestorTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).GetAllInvestorTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/GetAllInvestorTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).GetAllInvestorTokens(ctx, req.(*UserDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_AddFavouriteInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFavouriteInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).AddFavouriteInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/AddFavouriteInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).AddFavouriteInstrument(ctx, req.(*AddFavouriteInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_GetFavouriteInstruments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvestorId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).GetFavouriteInstruments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/GetFavouriteInstruments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).GetFavouriteInstruments(ctx, req.(*InvestorId))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_RemoveFromFavourite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavouriteInstrument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).RemoveFromFavourite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/RemoveFromFavourite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).RemoveFromFavourite(ctx, req.(*FavouriteInstrument))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_IsInstrumentFavourite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavouriteInstrument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).IsInstrumentFavourite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/IsInstrumentFavourite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).IsInstrumentFavourite(ctx, req.(*FavouriteInstrument))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_GetCountryPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountryPhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).GetCountryPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/GetCountryPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).GetCountryPhoneNumber(ctx, req.(*GetCountryPhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_SaveCountryFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveCountryFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).SaveCountryFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/SaveCountryFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).SaveCountryFlag(ctx, req.(*SaveCountryFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_UpdateAccountFromSalesforce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountFromSalesforceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).UpdateAccountFromSalesforce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/UpdateAccountFromSalesforce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).UpdateAccountFromSalesforce(ctx, req.(*UpdateAccountFromSalesforceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_UpdateRegistrationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountFromSalesforceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).UpdateRegistrationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/UpdateRegistrationStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).UpdateRegistrationStatus(ctx, req.(*UpdateAccountFromSalesforceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_InvestorSearchWithUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvestorSearchWithUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).InvestorSearchWithUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/InvestorSearchWithUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).InvestorSearchWithUsername(ctx, req.(*InvestorSearchWithUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_GetKycStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKycStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).GetKycStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/GetKycStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).GetKycStatus(ctx, req.(*GetKycStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_GetSumsubRejectComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSumsubRejectCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).GetSumsubRejectComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/GetSumsubRejectComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).GetSumsubRejectComment(ctx, req.(*GetSumsubRejectCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_InsertCommentsFromSumsub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumsubCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).InsertCommentsFromSumsub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/InsertCommentsFromSumsub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).InsertCommentsFromSumsub(ctx, req.(*SumsubCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_SendGmailNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGmailNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).SendGmailNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/SendGmailNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).SendGmailNotification(ctx, req.(*SendGmailNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_GetInvestorRegistrationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvestorRegistrationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).GetInvestorRegistrationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/GetInvestorRegistrationStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).GetInvestorRegistrationStatus(ctx, req.(*GetInvestorRegistrationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_GetInvestorPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvestorPlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).GetInvestorPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/GetInvestorPlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).GetInvestorPlatform(ctx, req.(*GetInvestorPlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_AssignExanteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExanteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).AssignExanteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/AssignExanteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).AssignExanteAccount(ctx, req.(*ExanteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestorService_GetExanteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExanteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).GetExanteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.InvestorService/GetExanteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).GetExanteAccount(ctx, req.(*ExanteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InvestorService_ServiceDesc is the grpc.ServiceDesc for InvestorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvestorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_service.InvestorService",
	HandlerType: (*InvestorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InvestorLogin",
			Handler:    _InvestorService_InvestorLogin_Handler,
		},
		{
			MethodName: "InvestorLoginWeb",
			Handler:    _InvestorService_InvestorLoginWeb_Handler,
		},
		{
			MethodName: "TwoFactorAutheticate",
			Handler:    _InvestorService_TwoFactorAutheticate_Handler,
		},
		{
			MethodName: "GetTwoFactorAutheticate",
			Handler:    _InvestorService_GetTwoFactorAutheticate_Handler,
		},
		{
			MethodName: "SendTwilioPhoneNumber",
			Handler:    _InvestorService_SendTwilioPhoneNumber_Handler,
		},
		{
			MethodName: "CheckVerifivation",
			Handler:    _InvestorService_CheckVerifivation_Handler,
		},
		{
			MethodName: "InvestorConfirmEmail",
			Handler:    _InvestorService_InvestorConfirmEmail_Handler,
		},
		{
			MethodName: "InvestorConfirmEmailWeb",
			Handler:    _InvestorService_InvestorConfirmEmailWeb_Handler,
		},
		{
			MethodName: "GetApplicantInfo",
			Handler:    _InvestorService_GetApplicantInfo_Handler,
		},
		{
			MethodName: "GetInvestor",
			Handler:    _InvestorService_GetInvestor_Handler,
		},
		{
			MethodName: "GetInvestorDocuments",
			Handler:    _InvestorService_GetInvestorDocuments_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _InvestorService_UpdateUser_Handler,
		},
		{
			MethodName: "SaveInvestorIdentity",
			Handler:    _InvestorService_SaveInvestorIdentity_Handler,
		},
		{
			MethodName: "EditProfile",
			Handler:    _InvestorService_EditProfile_Handler,
		},
		{
			MethodName: "UpdateLanguage",
			Handler:    _InvestorService_UpdateLanguage_Handler,
		},
		{
			MethodName: "SaveKYCData",
			Handler:    _InvestorService_SaveKYCData_Handler,
		},
		{
			MethodName: "SaveDocumentMetadata",
			Handler:    _InvestorService_SaveDocumentMetadata_Handler,
		},
		{
			MethodName: "GetKycData",
			Handler:    _InvestorService_GetKycData_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _InvestorService_CreateAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _InvestorService_GetAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _InvestorService_DeleteAccount_Handler,
		},
		{
			MethodName: "GetInvestorTokens",
			Handler:    _InvestorService_GetInvestorTokens_Handler,
		},
		{
			MethodName: "GetAllInvestorTokens",
			Handler:    _InvestorService_GetAllInvestorTokens_Handler,
		},
		{
			MethodName: "AddFavouriteInstrument",
			Handler:    _InvestorService_AddFavouriteInstrument_Handler,
		},
		{
			MethodName: "GetFavouriteInstruments",
			Handler:    _InvestorService_GetFavouriteInstruments_Handler,
		},
		{
			MethodName: "RemoveFromFavourite",
			Handler:    _InvestorService_RemoveFromFavourite_Handler,
		},
		{
			MethodName: "IsInstrumentFavourite",
			Handler:    _InvestorService_IsInstrumentFavourite_Handler,
		},
		{
			MethodName: "GetCountryPhoneNumber",
			Handler:    _InvestorService_GetCountryPhoneNumber_Handler,
		},
		{
			MethodName: "SaveCountryFlag",
			Handler:    _InvestorService_SaveCountryFlag_Handler,
		},
		{
			MethodName: "UpdateAccountFromSalesforce",
			Handler:    _InvestorService_UpdateAccountFromSalesforce_Handler,
		},
		{
			MethodName: "UpdateRegistrationStatus",
			Handler:    _InvestorService_UpdateRegistrationStatus_Handler,
		},
		{
			MethodName: "InvestorSearchWithUsername",
			Handler:    _InvestorService_InvestorSearchWithUsername_Handler,
		},
		{
			MethodName: "GetKycStatus",
			Handler:    _InvestorService_GetKycStatus_Handler,
		},
		{
			MethodName: "GetSumsubRejectComment",
			Handler:    _InvestorService_GetSumsubRejectComment_Handler,
		},
		{
			MethodName: "InsertCommentsFromSumsub",
			Handler:    _InvestorService_InsertCommentsFromSumsub_Handler,
		},
		{
			MethodName: "SendGmailNotification",
			Handler:    _InvestorService_SendGmailNotification_Handler,
		},
		{
			MethodName: "GetInvestorRegistrationStatus",
			Handler:    _InvestorService_GetInvestorRegistrationStatus_Handler,
		},
		{
			MethodName: "GetInvestorPlatform",
			Handler:    _InvestorService_GetInvestorPlatform_Handler,
		},
		{
			MethodName: "AssignExanteAccount",
			Handler:    _InvestorService_AssignExanteAccount_Handler,
		},
		{
			MethodName: "GetExanteAccount",
			Handler:    _InvestorService_GetExanteAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "investor_service.proto",
}
