// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: pocket.sql

package sqlc

import (
	"context"
	"database/sql"

	null "gopkg.in/guregu/null.v4"
)

type CreatePocketParams struct {
	Name         null.String `json:"name"`
	Title        null.String `json:"title"`
	UserID       null.String `json:"user_id"`
	CompanyID    null.String `json:"company_id"`
	Type         null.Int    `json:"type"`
	Icon         null.String `json:"icon"`
	Color        null.String `json:"color"`
	SalesforceID null.String `json:"salesforce_id"`
}

const getPocketsByUserID = `-- name: GetPocketsByUserID :many
SELECT p.id, p.o_id, p.name, p.user_id, p.company_id, p.type, p.created_at, p.title, p.icon, p.salesforce_id, p.color,
    pt.name AS "pocket_type_name",
    c.company_name AS "company_name"
FROM pocket p
    JOIN pocket_type pt ON p.type = pt.id
    JOIN company c ON p.company_id = c.id
WHERE user_id = $1
`

type GetPocketsByUserIDRow struct {
	ID             string       `json:"id"`
	OID            int64        `json:"o_id"`
	Name           null.String  `json:"name"`
	UserID         null.String  `json:"user_id"`
	CompanyID      null.String  `json:"company_id"`
	Type           null.Int     `json:"type"`
	CreatedAt      sql.NullTime `json:"created_at"`
	Title          null.String  `json:"title"`
	Icon           null.String  `json:"icon"`
	SalesforceID   null.String  `json:"salesforce_id"`
	Color          null.String  `json:"color"`
	PocketTypeName null.String  `json:"pocket_type_name"`
	CompanyName    null.String  `json:"company_name"`
}

func (q *Queries) GetPocketsByUserID(ctx context.Context, userID null.String) ([]GetPocketsByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getPocketsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPocketsByUserIDRow
	for rows.Next() {
		var i GetPocketsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.OID,
			&i.Name,
			&i.UserID,
			&i.CompanyID,
			&i.Type,
			&i.CreatedAt,
			&i.Title,
			&i.Icon,
			&i.SalesforceID,
			&i.Color,
			&i.PocketTypeName,
			&i.CompanyName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
