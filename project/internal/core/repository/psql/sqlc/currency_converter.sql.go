// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: currency_converter.sql

package sqlc

import (
	"context"

	null "gopkg.in/guregu/null.v4"
)

const getCurrencyConvertor = `-- name: GetCurrencyConvertor :many
SELECT id, primary_currency, secondary_currency, amount
FROM currency_convertor
LIMIT $2 OFFSET $1
`

type GetCurrencyConvertorParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) GetCurrencyConvertor(ctx context.Context, arg GetCurrencyConvertorParams) ([]CurrencyConvertor, error) {
	rows, err := q.db.Query(ctx, getCurrencyConvertor, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CurrencyConvertor
	for rows.Next() {
		var i CurrencyConvertor
		if err := rows.Scan(
			&i.ID,
			&i.PrimaryCurrency,
			&i.SecondaryCurrency,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCurrencyConvertorByCurrency = `-- name: GetCurrencyConvertorByCurrency :one
SELECT id, primary_currency, secondary_currency, amount
FROM currency_convertor
WHERE primary_currency = $1
    AND secondary_currency = $2
`

type GetCurrencyConvertorByCurrencyParams struct {
	PrimaryCurrency   int32 `json:"primary_currency"`
	SecondaryCurrency int32 `json:"secondary_currency"`
}

func (q *Queries) GetCurrencyConvertorByCurrency(ctx context.Context, arg GetCurrencyConvertorByCurrencyParams) (CurrencyConvertor, error) {
	row := q.db.QueryRow(ctx, getCurrencyConvertorByCurrency, arg.PrimaryCurrency, arg.SecondaryCurrency)
	var i CurrencyConvertor
	err := row.Scan(
		&i.ID,
		&i.PrimaryCurrency,
		&i.SecondaryCurrency,
		&i.Amount,
	)
	return i, err
}

const updateCurrencyConvertor = `-- name: UpdateCurrencyConvertor :one
INSERT INTO currency_convertor (
        "id",
        "primary_currency",
        "secondary_currency",
        "amount"
    )
VALUES (
        $1,
        $2,
        $3,
        $4
    ) ON CONFLICT ON CONSTRAINT uq_primary_currency_secondary_currency DO
UPDATE
SET amount = $4
RETURNING "id"
`

type UpdateCurrencyConvertorParams struct {
	ID                int32      `json:"id"`
	PrimaryCurrency   int32      `json:"primary_currency"`
	SecondaryCurrency int32      `json:"secondary_currency"`
	Amount            null.Float `json:"amount"`
}

func (q *Queries) UpdateCurrencyConvertor(ctx context.Context, arg UpdateCurrencyConvertorParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateCurrencyConvertor,
		arg.ID,
		arg.PrimaryCurrency,
		arg.SecondaryCurrency,
		arg.Amount,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
