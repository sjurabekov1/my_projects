// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: bank_account.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	null "gopkg.in/guregu/null.v4"
)

const createBankAccount = `-- name: CreateBankAccount :one
INSERT INTO bank_account (
        bank_account_name,
        bic_code,
        iban_code,
        swift_code,
        region,
        registration_number,
        address,
        bank_address,
        phone_number,
        payment_reference,
        description,
        salesforce_id,
        owner_name,
        transactions_reference,
        receiving_party_bank_details,
        currency
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14,
        $15,
        $16
    )
RETURNING id, o_id, bank_account_name, bic_code, iban_code, swift_code, region, registration_number, address, bank_address, phone_number, payment_reference, description, salesforce_id, owner_name, transactions_reference, receiving_party_bank_details, currency, created_at, updated_at, deleted_at
`

type CreateBankAccountParams struct {
	BankAccountName           null.String `json:"bank_account_name"`
	BicCode                   null.String `json:"bic_code"`
	IbanCode                  null.String `json:"iban_code"`
	SwiftCode                 null.String `json:"swift_code"`
	Region                    null.String `json:"region"`
	RegistrationNumber        null.Int    `json:"registration_number"`
	Address                   null.String `json:"address"`
	BankAddress               null.String `json:"bank_address"`
	PhoneNumber               null.String `json:"phone_number"`
	PaymentReference          null.String `json:"payment_reference"`
	Description               null.String `json:"description"`
	SalesforceID              null.String `json:"salesforce_id"`
	OwnerName                 null.String `json:"owner_name"`
	TransactionsReference     null.String `json:"transactions_reference"`
	ReceivingPartyBankDetails null.String `json:"receiving_party_bank_details"`
	Currency                  int32       `json:"currency"`
}

func (q *Queries) CreateBankAccount(ctx context.Context, arg CreateBankAccountParams) (BankAccount, error) {
	row := q.db.QueryRow(ctx, createBankAccount,
		arg.BankAccountName,
		arg.BicCode,
		arg.IbanCode,
		arg.SwiftCode,
		arg.Region,
		arg.RegistrationNumber,
		arg.Address,
		arg.BankAddress,
		arg.PhoneNumber,
		arg.PaymentReference,
		arg.Description,
		arg.SalesforceID,
		arg.OwnerName,
		arg.TransactionsReference,
		arg.ReceivingPartyBankDetails,
		arg.Currency,
	)
	var i BankAccount
	err := row.Scan(
		&i.ID,
		&i.OID,
		&i.BankAccountName,
		&i.BicCode,
		&i.IbanCode,
		&i.SwiftCode,
		&i.Region,
		&i.RegistrationNumber,
		&i.Address,
		&i.BankAddress,
		&i.PhoneNumber,
		&i.PaymentReference,
		&i.Description,
		&i.SalesforceID,
		&i.OwnerName,
		&i.TransactionsReference,
		&i.ReceivingPartyBankDetails,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteBankAccount = `-- name: DeleteBankAccount :exec
DELETE FROM bank_account
WHERE id = $1
`

func (q *Queries) DeleteBankAccount(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteBankAccount, id)
	return err
}

const getAllBankAccounts = `-- name: GetAllBankAccounts :many
SELECT ba.id, ba.o_id, ba.bank_account_name, ba.bic_code, ba.iban_code, ba.swift_code, ba.region, ba.registration_number, ba.address, ba.bank_address, ba.phone_number, ba.payment_reference, ba.description, ba.salesforce_id, ba.owner_name, ba.transactions_reference, ba.receiving_party_bank_details, ba.currency, ba.created_at, ba.updated_at, ba.deleted_at,
    c.name AS currency_name
FROM bank_account AS ba
    LEFT JOIN currencies AS c ON ba.currency = c.id
WHERE ba.bank_account_name ilike '%' || $1 || '%'
    AND CASE
        WHEN $2::VARCHAR = '' THEN TRUE
        ELSE ba.region = $2
    END
    AND CASE
        WHEN $3::VARCHAR = '' THEN TRUE
        ELSE ba.registration_number = $3
    END
    AND CASE
        WHEN $4::VARCHAR = '' THEN TRUE
        ELSE ba.salesforce_id = $4
    END
ORDER BY ba.created_at DESC OFFSET $5
LIMIT $6
`

type GetAllBankAccountsParams struct {
	BankAccountName    sql.NullString `json:"bank_account_name"`
	Region             string         `json:"region"`
	RegistrationNumber string         `json:"registration_number"`
	SalesforceID       string         `json:"salesforce_id"`
	Offset             int32          `json:"offset"`
	Limit              int32          `json:"limit"`
}

type GetAllBankAccountsRow struct {
	ID                        string      `json:"id"`
	OID                       int32       `json:"o_id"`
	BankAccountName           null.String `json:"bank_account_name"`
	BicCode                   null.String `json:"bic_code"`
	IbanCode                  null.String `json:"iban_code"`
	SwiftCode                 null.String `json:"swift_code"`
	Region                    null.String `json:"region"`
	RegistrationNumber        null.Int    `json:"registration_number"`
	Address                   null.String `json:"address"`
	BankAddress               null.String `json:"bank_address"`
	PhoneNumber               null.String `json:"phone_number"`
	PaymentReference          null.String `json:"payment_reference"`
	Description               null.String `json:"description"`
	SalesforceID              null.String `json:"salesforce_id"`
	OwnerName                 null.String `json:"owner_name"`
	TransactionsReference     null.String `json:"transactions_reference"`
	ReceivingPartyBankDetails null.String `json:"receiving_party_bank_details"`
	Currency                  int32       `json:"currency"`
	CreatedAt                 time.Time   `json:"created_at"`
	UpdatedAt                 time.Time   `json:"updated_at"`
	DeletedAt                 null.Time   `json:"deleted_at"`
	CurrencyName              null.String `json:"currency_name"`
}

func (q *Queries) GetAllBankAccounts(ctx context.Context, arg GetAllBankAccountsParams) ([]GetAllBankAccountsRow, error) {
	rows, err := q.db.Query(ctx, getAllBankAccounts,
		arg.BankAccountName,
		arg.Region,
		arg.RegistrationNumber,
		arg.SalesforceID,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllBankAccountsRow
	for rows.Next() {
		var i GetAllBankAccountsRow
		if err := rows.Scan(
			&i.ID,
			&i.OID,
			&i.BankAccountName,
			&i.BicCode,
			&i.IbanCode,
			&i.SwiftCode,
			&i.Region,
			&i.RegistrationNumber,
			&i.Address,
			&i.BankAddress,
			&i.PhoneNumber,
			&i.PaymentReference,
			&i.Description,
			&i.SalesforceID,
			&i.OwnerName,
			&i.TransactionsReference,
			&i.ReceivingPartyBankDetails,
			&i.Currency,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CurrencyName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBankAccount = `-- name: GetBankAccount :one
SELECT id, o_id, bank_account_name, bic_code, iban_code, swift_code, region, registration_number, address, bank_address, phone_number, payment_reference, description, salesforce_id, owner_name, transactions_reference, receiving_party_bank_details, currency, created_at, updated_at, deleted_at
FROM bank_account
WHERE id = $1
`

func (q *Queries) GetBankAccount(ctx context.Context, id string) (BankAccount, error) {
	row := q.db.QueryRow(ctx, getBankAccount, id)
	var i BankAccount
	err := row.Scan(
		&i.ID,
		&i.OID,
		&i.BankAccountName,
		&i.BicCode,
		&i.IbanCode,
		&i.SwiftCode,
		&i.Region,
		&i.RegistrationNumber,
		&i.Address,
		&i.BankAddress,
		&i.PhoneNumber,
		&i.PaymentReference,
		&i.Description,
		&i.SalesforceID,
		&i.OwnerName,
		&i.TransactionsReference,
		&i.ReceivingPartyBankDetails,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getBankAccountById = `-- name: GetBankAccountById :one
SELECT ba.id, ba.o_id, ba.bank_account_name, ba.bic_code, ba.iban_code, ba.swift_code, ba.region, ba.registration_number, ba.address, ba.bank_address, ba.phone_number, ba.payment_reference, ba.description, ba.salesforce_id, ba.owner_name, ba.transactions_reference, ba.receiving_party_bank_details, ba.currency, ba.created_at, ba.updated_at, ba.deleted_at,
    c.name AS currency_name
FROM bank_account AS ba
    LEFT JOIN currencies AS c ON ba.currency = c.id
WHERE ba.id = $1
`

type GetBankAccountByIdRow struct {
	ID                        string      `json:"id"`
	OID                       int32       `json:"o_id"`
	BankAccountName           null.String `json:"bank_account_name"`
	BicCode                   null.String `json:"bic_code"`
	IbanCode                  null.String `json:"iban_code"`
	SwiftCode                 null.String `json:"swift_code"`
	Region                    null.String `json:"region"`
	RegistrationNumber        null.Int    `json:"registration_number"`
	Address                   null.String `json:"address"`
	BankAddress               null.String `json:"bank_address"`
	PhoneNumber               null.String `json:"phone_number"`
	PaymentReference          null.String `json:"payment_reference"`
	Description               null.String `json:"description"`
	SalesforceID              null.String `json:"salesforce_id"`
	OwnerName                 null.String `json:"owner_name"`
	TransactionsReference     null.String `json:"transactions_reference"`
	ReceivingPartyBankDetails null.String `json:"receiving_party_bank_details"`
	Currency                  int32       `json:"currency"`
	CreatedAt                 time.Time   `json:"created_at"`
	UpdatedAt                 time.Time   `json:"updated_at"`
	DeletedAt                 null.Time   `json:"deleted_at"`
	CurrencyName              null.String `json:"currency_name"`
}

func (q *Queries) GetBankAccountById(ctx context.Context, id string) (GetBankAccountByIdRow, error) {
	row := q.db.QueryRow(ctx, getBankAccountById, id)
	var i GetBankAccountByIdRow
	err := row.Scan(
		&i.ID,
		&i.OID,
		&i.BankAccountName,
		&i.BicCode,
		&i.IbanCode,
		&i.SwiftCode,
		&i.Region,
		&i.RegistrationNumber,
		&i.Address,
		&i.BankAddress,
		&i.PhoneNumber,
		&i.PaymentReference,
		&i.Description,
		&i.SalesforceID,
		&i.OwnerName,
		&i.TransactionsReference,
		&i.ReceivingPartyBankDetails,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CurrencyName,
	)
	return i, err
}

const getBankAccountsCount = `-- name: GetBankAccountsCount :one
SELECT COUNT(*) AS COUNT
FROM bank_account
WHERE bank_account_name ilike '%' || $1 || '%'
    AND CASE
        WHEN $2::VARCHAR = '' THEN TRUE
        ELSE region = $2
    END
    AND CASE
        WHEN $3::VARCHAR = '' THEN TRUE
        ELSE registration_number = $3
    END
    AND CASE
        WHEN $4::VARCHAR = '' THEN TRUE
        ELSE salesforce_id = $4
    END
`

type GetBankAccountsCountParams struct {
	BankAccountName    sql.NullString `json:"bank_account_name"`
	Region             string         `json:"region"`
	RegistrationNumber string         `json:"registration_number"`
	SalesforceID       string         `json:"salesforce_id"`
}

func (q *Queries) GetBankAccountsCount(ctx context.Context, arg GetBankAccountsCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, getBankAccountsCount,
		arg.BankAccountName,
		arg.Region,
		arg.RegistrationNumber,
		arg.SalesforceID,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const setSalesforceId = `-- name: SetSalesforceId :exec
UPDATE bank_account
SET salesforce_id = $1
WHERE id = $2
`

type SetSalesforceIdParams struct {
	SalesforceID null.String `json:"salesforce_id"`
	ID           string      `json:"id"`
}

func (q *Queries) SetSalesforceId(ctx context.Context, arg SetSalesforceIdParams) error {
	_, err := q.db.Exec(ctx, setSalesforceId, arg.SalesforceID, arg.ID)
	return err
}

const updateBankAccount = `-- name: UpdateBankAccount :exec
UPDATE bank_account
SET bic_code = COALESCE($1, bic_code),
    iban_code = COALESCE($2, iban_code),
    swift_code = COALESCE($3, swift_code),
    region = COALESCE($4, region),
    address = COALESCE($5, address),
    bank_address = COALESCE($6, bank_address),
    phone_number = COALESCE($7, phone_number),
    description = COALESCE($8, description),
    salesforce_id = COALESCE($9, salesforce_id),
    owner_name = COALESCE($10, owner_name),
    currency = COALESCE($11, currency),
    bank_account_name = COALESCE(
        $12,
        bank_account_name
    ),
    registration_number = COALESCE(
        $13,
        registration_number
    ),
    payment_reference = COALESCE(
        $14,
        payment_reference
    ),
    transactions_reference = COALESCE(
        $15,
        transactions_reference
    ),
    receiving_party_bank_details = COALESCE(
        $16,
        receiving_party_bank_details
    ),
    updated_at = NOW()
WHERE id = $17
`

type UpdateBankAccountParams struct {
	BicCode                   null.String `json:"bic_code"`
	IbanCode                  null.String `json:"iban_code"`
	SwiftCode                 null.String `json:"swift_code"`
	Region                    null.String `json:"region"`
	Address                   null.String `json:"address"`
	BankAddress               null.String `json:"bank_address"`
	PhoneNumber               null.String `json:"phone_number"`
	Description               null.String `json:"description"`
	SalesforceID              null.String `json:"salesforce_id"`
	OwnerName                 null.String `json:"owner_name"`
	Currency                  null.Int    `json:"currency"`
	BankAccountName           null.String `json:"bank_account_name"`
	RegistrationNumber        null.Int    `json:"registration_number"`
	PaymentReference          null.String `json:"payment_reference"`
	TransactionsReference     null.String `json:"transactions_reference"`
	ReceivingPartyBankDetails null.String `json:"receiving_party_bank_details"`
	ID                        string      `json:"id"`
}

func (q *Queries) UpdateBankAccount(ctx context.Context, arg UpdateBankAccountParams) error {
	_, err := q.db.Exec(ctx, updateBankAccount,
		arg.BicCode,
		arg.IbanCode,
		arg.SwiftCode,
		arg.Region,
		arg.Address,
		arg.BankAddress,
		arg.PhoneNumber,
		arg.Description,
		arg.SalesforceID,
		arg.OwnerName,
		arg.Currency,
		arg.BankAccountName,
		arg.RegistrationNumber,
		arg.PaymentReference,
		arg.TransactionsReference,
		arg.ReceivingPartyBankDetails,
		arg.ID,
	)
	return err
}
