// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: currency.sql

package sqlc

import (
	"context"

	null "gopkg.in/guregu/null.v4"
)

const createCurrency = `-- name: CreateCurrency :one
INSERT INTO "currencies" ("name", "icon", "active")
VALUES(
        $1,
        $2,
        $3
    )
RETURNING id, name, icon, active
`

type CreateCurrencyParams struct {
	Name   string      `json:"name"`
	Icon   null.String `json:"icon"`
	Active null.Bool   `json:"active"`
}

func (q *Queries) CreateCurrency(ctx context.Context, arg CreateCurrencyParams) (Currency, error) {
	row := q.db.QueryRow(ctx, createCurrency, arg.Name, arg.Icon, arg.Active)
	var i Currency
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Icon,
		&i.Active,
	)
	return i, err
}

const deleteCurrency = `-- name: DeleteCurrency :exec
DELETE FROM currencies
WHERE id = $1
`

func (q *Queries) DeleteCurrency(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCurrency, id)
	return err
}

const getCurrencies = `-- name: GetCurrencies :many
SELECT id, name, icon, active
FROM currencies
WHERE active = TRUE
LIMIT $2 OFFSET $1
`

type GetCurrenciesParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) GetCurrencies(ctx context.Context, arg GetCurrenciesParams) ([]Currency, error) {
	rows, err := q.db.Query(ctx, getCurrencies, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Currency
	for rows.Next() {
		var i Currency
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Icon,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCurrencyByName = `-- name: GetCurrencyByName :one
SELECT id, name, icon, active
FROM currencies
WHERE name = $1
`

func (q *Queries) GetCurrencyByName(ctx context.Context, name string) (Currency, error) {
	row := q.db.QueryRow(ctx, getCurrencyByName, name)
	var i Currency
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Icon,
		&i.Active,
	)
	return i, err
}

const updateCurrency = `-- name: UpdateCurrency :one
UPDATE currencies
SET "name" = coallesce($1, name),
    "icon" = coallesce($2, icon),
    "active" = coallesce($3, active)
WHERE id = $4
RETURNING id, name, icon, active
`

type UpdateCurrencyParams struct {
	Name   interface{} `json:"name"`
	Icon   interface{} `json:"icon"`
	Active interface{} `json:"active"`
	ID     int32       `json:"id"`
}

func (q *Queries) UpdateCurrency(ctx context.Context, arg UpdateCurrencyParams) (Currency, error) {
	row := q.db.QueryRow(ctx, updateCurrency,
		arg.Name,
		arg.Icon,
		arg.Active,
		arg.ID,
	)
	var i Currency
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Icon,
		&i.Active,
	)
	return i, err
}
