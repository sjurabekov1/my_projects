// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: company.sql

package sqlc

import (
	"context"

	null "gopkg.in/guregu/null.v4"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO company (company_name)
VALUES ($1) RETURNING id, o_id, company_name, created_at, updated_at, deleted_at
`

func (q *Queries) CreateCompany(ctx context.Context, companyName null.String) (Company, error) {
	row := q.db.QueryRow(ctx, createCompany, companyName)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.OID,
		&i.CompanyName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :exec
DELETE FROM company
WHERE id = $1
`

func (q *Queries) DeleteCompany(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteCompany, id)
	return err
}

const getAllCompanies = `-- name: GetAllCompanies :many
SELECT id, o_id, company_name, created_at, updated_at, deleted_at
FROM company
WHERE TRUE
    AND CASE
        WHEN $1::VARCHAR = '' THEN TRUE
        ELSE company_name = $1
    END
ORDER BY created_at DESC OFFSET $2
LIMIT $3
`

type GetAllCompaniesParams struct {
	CompanyName string `json:"company_name"`
	Offset      int32  `json:"offset"`
	Limit       int32  `json:"limit"`
}

func (q *Queries) GetAllCompanies(ctx context.Context, arg GetAllCompaniesParams) ([]Company, error) {
	rows, err := q.db.Query(ctx, getAllCompanies, arg.CompanyName, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.OID,
			&i.CompanyName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllCompaniesCount = `-- name: GetAllCompaniesCount :one
SELECT COUNT(*)
FROM company
WHERE TRUE
    AND CASE
        WHEN $1::VARCHAR = '' THEN TRUE
        ELSE company_name = $1
    END
`

func (q *Queries) GetAllCompaniesCount(ctx context.Context, companyName string) (int64, error) {
	row := q.db.QueryRow(ctx, getAllCompaniesCount, companyName)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCompany = `-- name: GetCompany :one
SELECT id, o_id, company_name, created_at, updated_at, deleted_at
FROM company
WHERE id = $1
`

func (q *Queries) GetCompany(ctx context.Context, id string) (Company, error) {
	row := q.db.QueryRow(ctx, getCompany, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.OID,
		&i.CompanyName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const softDeleteCompany = `-- name: SoftDeleteCompany :exec
UPDATE company
SET deleted_at = now()
WHERE id = $1
`

func (q *Queries) SoftDeleteCompany(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, softDeleteCompany, id)
	return err
}

const updateCompany = `-- name: UpdateCompany :exec
UPDATE company
SET company_name = coallesce($1, company_name),
    updated_at = now()
WHERE id = $2
`

type UpdateCompanyParams struct {
	CompanyName interface{} `json:"company_name"`
	ID          string      `json:"id"`
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) error {
	_, err := q.db.Exec(ctx, updateCompany, arg.CompanyName, arg.ID)
	return err
}
